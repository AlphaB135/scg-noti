
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EmployeeProfile
 * 
 */
export type EmployeeProfile = $Result.DefaultSelection<Prisma.$EmployeeProfilePayload>
/**
 * Model AdminProfile
 * 
 */
export type AdminProfile = $Result.DefaultSelection<Prisma.$AdminProfilePayload>
/**
 * Model SecurityLog
 * 
 */
export type SecurityLog = $Result.DefaultSelection<Prisma.$SecurityLogPayload>
/**
 * Model UserNotificationPref
 * 
 */
export type UserNotificationPref = $Result.DefaultSelection<Prisma.$UserNotificationPrefPayload>
/**
 * Model UserAppearancePref
 * 
 */
export type UserAppearancePref = $Result.DefaultSelection<Prisma.$UserAppearancePrefPayload>
/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model IntegrationSMTP
 * 
 */
export type IntegrationSMTP = $Result.DefaultSelection<Prisma.$IntegrationSMTPPayload>
/**
 * Model ExternalIntegration
 * 
 */
export type ExternalIntegration = $Result.DefaultSelection<Prisma.$ExternalIntegrationPayload>
/**
 * Model WebhookConfig
 * 
 */
export type WebhookConfig = $Result.DefaultSelection<Prisma.$WebhookConfigPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Approval
 * 
 */
export type Approval = $Result.DefaultSelection<Prisma.$ApprovalPayload>
/**
 * Model Recipient
 * 
 */
export type Recipient = $Result.DefaultSelection<Prisma.$RecipientPayload>
/**
 * Model NotificationAttachment
 * 
 */
export type NotificationAttachment = $Result.DefaultSelection<Prisma.$NotificationAttachmentPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>
/**
 * Model EmployeeAnalytics
 * 
 */
export type EmployeeAnalytics = $Result.DefaultSelection<Prisma.$EmployeeAnalyticsPayload>
/**
 * Model FileStorage
 * 
 */
export type FileStorage = $Result.DefaultSelection<Prisma.$FileStoragePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model SystemChangeLog
 * 
 */
export type SystemChangeLog = $Result.DefaultSelection<Prisma.$SystemChangeLogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employeeProfile`: Exposes CRUD operations for the **EmployeeProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeProfiles
    * const employeeProfiles = await prisma.employeeProfile.findMany()
    * ```
    */
  get employeeProfile(): Prisma.EmployeeProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminProfile`: Exposes CRUD operations for the **AdminProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminProfiles
    * const adminProfiles = await prisma.adminProfile.findMany()
    * ```
    */
  get adminProfile(): Prisma.AdminProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.securityLog`: Exposes CRUD operations for the **SecurityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecurityLogs
    * const securityLogs = await prisma.securityLog.findMany()
    * ```
    */
  get securityLog(): Prisma.SecurityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userNotificationPref`: Exposes CRUD operations for the **UserNotificationPref** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNotificationPrefs
    * const userNotificationPrefs = await prisma.userNotificationPref.findMany()
    * ```
    */
  get userNotificationPref(): Prisma.UserNotificationPrefDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAppearancePref`: Exposes CRUD operations for the **UserAppearancePref** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAppearancePrefs
    * const userAppearancePrefs = await prisma.userAppearancePref.findMany()
    * ```
    */
  get userAppearancePref(): Prisma.UserAppearancePrefDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.integrationSMTP`: Exposes CRUD operations for the **IntegrationSMTP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationSMTPS
    * const integrationSMTPS = await prisma.integrationSMTP.findMany()
    * ```
    */
  get integrationSMTP(): Prisma.IntegrationSMTPDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.externalIntegration`: Exposes CRUD operations for the **ExternalIntegration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExternalIntegrations
    * const externalIntegrations = await prisma.externalIntegration.findMany()
    * ```
    */
  get externalIntegration(): Prisma.ExternalIntegrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webhookConfig`: Exposes CRUD operations for the **WebhookConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookConfigs
    * const webhookConfigs = await prisma.webhookConfig.findMany()
    * ```
    */
  get webhookConfig(): Prisma.WebhookConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approval`: Exposes CRUD operations for the **Approval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approval.findMany()
    * ```
    */
  get approval(): Prisma.ApprovalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipient`: Exposes CRUD operations for the **Recipient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipients
    * const recipients = await prisma.recipient.findMany()
    * ```
    */
  get recipient(): Prisma.RecipientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationAttachment`: Exposes CRUD operations for the **NotificationAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationAttachments
    * const notificationAttachments = await prisma.notificationAttachment.findMany()
    * ```
    */
  get notificationAttachment(): Prisma.NotificationAttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employeeAnalytics`: Exposes CRUD operations for the **EmployeeAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeAnalytics
    * const employeeAnalytics = await prisma.employeeAnalytics.findMany()
    * ```
    */
  get employeeAnalytics(): Prisma.EmployeeAnalyticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fileStorage`: Exposes CRUD operations for the **FileStorage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileStorages
    * const fileStorages = await prisma.fileStorage.findMany()
    * ```
    */
  get fileStorage(): Prisma.FileStorageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemChangeLog`: Exposes CRUD operations for the **SystemChangeLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemChangeLogs
    * const systemChangeLogs = await prisma.systemChangeLog.findMany()
    * ```
    */
  get systemChangeLog(): Prisma.SystemChangeLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    EmployeeProfile: 'EmployeeProfile',
    AdminProfile: 'AdminProfile',
    SecurityLog: 'SecurityLog',
    UserNotificationPref: 'UserNotificationPref',
    UserAppearancePref: 'UserAppearancePref',
    SystemSettings: 'SystemSettings',
    IntegrationSMTP: 'IntegrationSMTP',
    ExternalIntegration: 'ExternalIntegration',
    WebhookConfig: 'WebhookConfig',
    Session: 'Session',
    Notification: 'Notification',
    Approval: 'Approval',
    Recipient: 'Recipient',
    NotificationAttachment: 'NotificationAttachment',
    Team: 'Team',
    TeamMember: 'TeamMember',
    EmployeeAnalytics: 'EmployeeAnalytics',
    FileStorage: 'FileStorage',
    AuditLog: 'AuditLog',
    SystemChangeLog: 'SystemChangeLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "employeeProfile" | "adminProfile" | "securityLog" | "userNotificationPref" | "userAppearancePref" | "systemSettings" | "integrationSMTP" | "externalIntegration" | "webhookConfig" | "session" | "notification" | "approval" | "recipient" | "notificationAttachment" | "team" | "teamMember" | "employeeAnalytics" | "fileStorage" | "auditLog" | "systemChangeLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EmployeeProfile: {
        payload: Prisma.$EmployeeProfilePayload<ExtArgs>
        fields: Prisma.EmployeeProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          findFirst: {
            args: Prisma.EmployeeProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          findMany: {
            args: Prisma.EmployeeProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>[]
          }
          create: {
            args: Prisma.EmployeeProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          createMany: {
            args: Prisma.EmployeeProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          update: {
            args: Prisma.EmployeeProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeProfilePayload>
          }
          aggregate: {
            args: Prisma.EmployeeProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeProfile>
          }
          groupBy: {
            args: Prisma.EmployeeProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeProfileCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeProfileCountAggregateOutputType> | number
          }
        }
      }
      AdminProfile: {
        payload: Prisma.$AdminProfilePayload<ExtArgs>
        fields: Prisma.AdminProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          findFirst: {
            args: Prisma.AdminProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          findMany: {
            args: Prisma.AdminProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>[]
          }
          create: {
            args: Prisma.AdminProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          createMany: {
            args: Prisma.AdminProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          update: {
            args: Prisma.AdminProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          deleteMany: {
            args: Prisma.AdminProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminProfilePayload>
          }
          aggregate: {
            args: Prisma.AdminProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminProfile>
          }
          groupBy: {
            args: Prisma.AdminProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminProfileCountArgs<ExtArgs>
            result: $Utils.Optional<AdminProfileCountAggregateOutputType> | number
          }
        }
      }
      SecurityLog: {
        payload: Prisma.$SecurityLogPayload<ExtArgs>
        fields: Prisma.SecurityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecurityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecurityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          findFirst: {
            args: Prisma.SecurityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecurityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          findMany: {
            args: Prisma.SecurityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>[]
          }
          create: {
            args: Prisma.SecurityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          createMany: {
            args: Prisma.SecurityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SecurityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          update: {
            args: Prisma.SecurityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          deleteMany: {
            args: Prisma.SecurityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecurityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SecurityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityLogPayload>
          }
          aggregate: {
            args: Prisma.SecurityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecurityLog>
          }
          groupBy: {
            args: Prisma.SecurityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecurityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecurityLogCountArgs<ExtArgs>
            result: $Utils.Optional<SecurityLogCountAggregateOutputType> | number
          }
        }
      }
      UserNotificationPref: {
        payload: Prisma.$UserNotificationPrefPayload<ExtArgs>
        fields: Prisma.UserNotificationPrefFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNotificationPrefFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNotificationPrefFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          findFirst: {
            args: Prisma.UserNotificationPrefFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNotificationPrefFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          findMany: {
            args: Prisma.UserNotificationPrefFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>[]
          }
          create: {
            args: Prisma.UserNotificationPrefCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          createMany: {
            args: Prisma.UserNotificationPrefCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserNotificationPrefDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          update: {
            args: Prisma.UserNotificationPrefUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          deleteMany: {
            args: Prisma.UserNotificationPrefDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNotificationPrefUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserNotificationPrefUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPrefPayload>
          }
          aggregate: {
            args: Prisma.UserNotificationPrefAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNotificationPref>
          }
          groupBy: {
            args: Prisma.UserNotificationPrefGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationPrefGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserNotificationPrefCountArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationPrefCountAggregateOutputType> | number
          }
        }
      }
      UserAppearancePref: {
        payload: Prisma.$UserAppearancePrefPayload<ExtArgs>
        fields: Prisma.UserAppearancePrefFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAppearancePrefFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAppearancePrefFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          findFirst: {
            args: Prisma.UserAppearancePrefFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAppearancePrefFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          findMany: {
            args: Prisma.UserAppearancePrefFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>[]
          }
          create: {
            args: Prisma.UserAppearancePrefCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          createMany: {
            args: Prisma.UserAppearancePrefCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserAppearancePrefDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          update: {
            args: Prisma.UserAppearancePrefUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          deleteMany: {
            args: Prisma.UserAppearancePrefDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAppearancePrefUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAppearancePrefUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppearancePrefPayload>
          }
          aggregate: {
            args: Prisma.UserAppearancePrefAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAppearancePref>
          }
          groupBy: {
            args: Prisma.UserAppearancePrefGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAppearancePrefGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAppearancePrefCountArgs<ExtArgs>
            result: $Utils.Optional<UserAppearancePrefCountAggregateOutputType> | number
          }
        }
      }
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      IntegrationSMTP: {
        payload: Prisma.$IntegrationSMTPPayload<ExtArgs>
        fields: Prisma.IntegrationSMTPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationSMTPFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationSMTPFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          findFirst: {
            args: Prisma.IntegrationSMTPFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationSMTPFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          findMany: {
            args: Prisma.IntegrationSMTPFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>[]
          }
          create: {
            args: Prisma.IntegrationSMTPCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          createMany: {
            args: Prisma.IntegrationSMTPCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.IntegrationSMTPDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          update: {
            args: Prisma.IntegrationSMTPUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationSMTPDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationSMTPUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IntegrationSMTPUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSMTPPayload>
          }
          aggregate: {
            args: Prisma.IntegrationSMTPAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationSMTP>
          }
          groupBy: {
            args: Prisma.IntegrationSMTPGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSMTPGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationSMTPCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSMTPCountAggregateOutputType> | number
          }
        }
      }
      ExternalIntegration: {
        payload: Prisma.$ExternalIntegrationPayload<ExtArgs>
        fields: Prisma.ExternalIntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExternalIntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExternalIntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          findFirst: {
            args: Prisma.ExternalIntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExternalIntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          findMany: {
            args: Prisma.ExternalIntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>[]
          }
          create: {
            args: Prisma.ExternalIntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          createMany: {
            args: Prisma.ExternalIntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExternalIntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          update: {
            args: Prisma.ExternalIntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          deleteMany: {
            args: Prisma.ExternalIntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExternalIntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExternalIntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalIntegrationPayload>
          }
          aggregate: {
            args: Prisma.ExternalIntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExternalIntegration>
          }
          groupBy: {
            args: Prisma.ExternalIntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExternalIntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExternalIntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<ExternalIntegrationCountAggregateOutputType> | number
          }
        }
      }
      WebhookConfig: {
        payload: Prisma.$WebhookConfigPayload<ExtArgs>
        fields: Prisma.WebhookConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          findFirst: {
            args: Prisma.WebhookConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          findMany: {
            args: Prisma.WebhookConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>[]
          }
          create: {
            args: Prisma.WebhookConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          createMany: {
            args: Prisma.WebhookConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WebhookConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          update: {
            args: Prisma.WebhookConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          deleteMany: {
            args: Prisma.WebhookConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookConfigPayload>
          }
          aggregate: {
            args: Prisma.WebhookConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookConfig>
          }
          groupBy: {
            args: Prisma.WebhookConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookConfigCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookConfigCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Approval: {
        payload: Prisma.$ApprovalPayload<ExtArgs>
        fields: Prisma.ApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findFirst: {
            args: Prisma.ApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findMany: {
            args: Prisma.ApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          create: {
            args: Prisma.ApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          createMany: {
            args: Prisma.ApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          update: {
            args: Prisma.ApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          aggregate: {
            args: Prisma.ApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApproval>
          }
          groupBy: {
            args: Prisma.ApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalCountAggregateOutputType> | number
          }
        }
      }
      Recipient: {
        payload: Prisma.$RecipientPayload<ExtArgs>
        fields: Prisma.RecipientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          findFirst: {
            args: Prisma.RecipientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          findMany: {
            args: Prisma.RecipientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>[]
          }
          create: {
            args: Prisma.RecipientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          createMany: {
            args: Prisma.RecipientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RecipientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          update: {
            args: Prisma.RecipientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          deleteMany: {
            args: Prisma.RecipientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipientPayload>
          }
          aggregate: {
            args: Prisma.RecipientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipient>
          }
          groupBy: {
            args: Prisma.RecipientGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipientGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipientCountArgs<ExtArgs>
            result: $Utils.Optional<RecipientCountAggregateOutputType> | number
          }
        }
      }
      NotificationAttachment: {
        payload: Prisma.$NotificationAttachmentPayload<ExtArgs>
        fields: Prisma.NotificationAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          findFirst: {
            args: Prisma.NotificationAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          findMany: {
            args: Prisma.NotificationAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>[]
          }
          create: {
            args: Prisma.NotificationAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          createMany: {
            args: Prisma.NotificationAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          update: {
            args: Prisma.NotificationAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.NotificationAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationAttachmentPayload>
          }
          aggregate: {
            args: Prisma.NotificationAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationAttachment>
          }
          groupBy: {
            args: Prisma.NotificationAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationAttachmentCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
      EmployeeAnalytics: {
        payload: Prisma.$EmployeeAnalyticsPayload<ExtArgs>
        fields: Prisma.EmployeeAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.EmployeeAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          findMany: {
            args: Prisma.EmployeeAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>[]
          }
          create: {
            args: Prisma.EmployeeAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          createMany: {
            args: Prisma.EmployeeAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          update: {
            args: Prisma.EmployeeAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.EmployeeAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeAnalytics>
          }
          groupBy: {
            args: Prisma.EmployeeAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      FileStorage: {
        payload: Prisma.$FileStoragePayload<ExtArgs>
        fields: Prisma.FileStorageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileStorageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileStorageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          findFirst: {
            args: Prisma.FileStorageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileStorageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          findMany: {
            args: Prisma.FileStorageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>[]
          }
          create: {
            args: Prisma.FileStorageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          createMany: {
            args: Prisma.FileStorageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FileStorageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          update: {
            args: Prisma.FileStorageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          deleteMany: {
            args: Prisma.FileStorageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileStorageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileStorageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStoragePayload>
          }
          aggregate: {
            args: Prisma.FileStorageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileStorage>
          }
          groupBy: {
            args: Prisma.FileStorageGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileStorageGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileStorageCountArgs<ExtArgs>
            result: $Utils.Optional<FileStorageCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      SystemChangeLog: {
        payload: Prisma.$SystemChangeLogPayload<ExtArgs>
        fields: Prisma.SystemChangeLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemChangeLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemChangeLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          findFirst: {
            args: Prisma.SystemChangeLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemChangeLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          findMany: {
            args: Prisma.SystemChangeLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>[]
          }
          create: {
            args: Prisma.SystemChangeLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          createMany: {
            args: Prisma.SystemChangeLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemChangeLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          update: {
            args: Prisma.SystemChangeLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          deleteMany: {
            args: Prisma.SystemChangeLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemChangeLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemChangeLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemChangeLogPayload>
          }
          aggregate: {
            args: Prisma.SystemChangeLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemChangeLog>
          }
          groupBy: {
            args: Prisma.SystemChangeLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemChangeLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemChangeLogCountArgs<ExtArgs>
            result: $Utils.Optional<SystemChangeLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    employeeProfile?: EmployeeProfileOmit
    adminProfile?: AdminProfileOmit
    securityLog?: SecurityLogOmit
    userNotificationPref?: UserNotificationPrefOmit
    userAppearancePref?: UserAppearancePrefOmit
    systemSettings?: SystemSettingsOmit
    integrationSMTP?: IntegrationSMTPOmit
    externalIntegration?: ExternalIntegrationOmit
    webhookConfig?: WebhookConfigOmit
    session?: SessionOmit
    notification?: NotificationOmit
    approval?: ApprovalOmit
    recipient?: RecipientOmit
    notificationAttachment?: NotificationAttachmentOmit
    team?: TeamOmit
    teamMember?: TeamMemberOmit
    employeeAnalytics?: EmployeeAnalyticsOmit
    fileStorage?: FileStorageOmit
    auditLog?: AuditLogOmit
    systemChangeLog?: SystemChangeLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    approvals: number
    securityLogs: number
    teamMemberships: number
    analytics: number
    uploadedFiles: number
    auditLogs: number
    systemChanges: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    approvals?: boolean | UserCountOutputTypeCountApprovalsArgs
    securityLogs?: boolean | UserCountOutputTypeCountSecurityLogsArgs
    teamMemberships?: boolean | UserCountOutputTypeCountTeamMembershipsArgs
    analytics?: boolean | UserCountOutputTypeCountAnalyticsArgs
    uploadedFiles?: boolean | UserCountOutputTypeCountUploadedFilesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    systemChanges?: boolean | UserCountOutputTypeCountSystemChangesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSecurityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeAnalyticsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStorageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSystemChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemChangeLogWhereInput
  }


  /**
   * Count Type NotificationCountOutputType
   */

  export type NotificationCountOutputType = {
    approvals: number
    recipients: number
    attachments: number
  }

  export type NotificationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | NotificationCountOutputTypeCountApprovalsArgs
    recipients?: boolean | NotificationCountOutputTypeCountRecipientsArgs
    attachments?: boolean | NotificationCountOutputTypeCountAttachmentsArgs
  }

  // Custom InputTypes
  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountRecipientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipientWhereInput
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationAttachmentWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    members: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    loginFailCount: number | null
  }

  export type UserSumAggregateOutputType = {
    loginFailCount: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    status: string | null
    lastLoginAt: Date | null
    lastLoginIp: string | null
    loginFailCount: number | null
    twoFaSecret: string | null
    deviceFingerprint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    status: string | null
    lastLoginAt: Date | null
    lastLoginIp: string | null
    loginFailCount: number | null
    twoFaSecret: string | null
    deviceFingerprint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    status: number
    lastLoginAt: number
    lastLoginIp: number
    loginFailCount: number
    twoFaSecret: number
    deviceFingerprint: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    loginFailCount?: true
  }

  export type UserSumAggregateInputType = {
    loginFailCount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    lastLoginAt?: true
    lastLoginIp?: true
    loginFailCount?: true
    twoFaSecret?: true
    deviceFingerprint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    lastLoginAt?: true
    lastLoginIp?: true
    loginFailCount?: true
    twoFaSecret?: true
    deviceFingerprint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    lastLoginAt?: true
    lastLoginIp?: true
    loginFailCount?: true
    twoFaSecret?: true
    deviceFingerprint?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: string
    status: string
    lastLoginAt: Date | null
    lastLoginIp: string | null
    loginFailCount: number
    twoFaSecret: string | null
    deviceFingerprint: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    lastLoginAt?: boolean
    lastLoginIp?: boolean
    loginFailCount?: boolean
    twoFaSecret?: boolean
    deviceFingerprint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    employeeProfile?: boolean | User$employeeProfileArgs<ExtArgs>
    adminProfile?: boolean | User$adminProfileArgs<ExtArgs>
    notificationPref?: boolean | User$notificationPrefArgs<ExtArgs>
    appearancePref?: boolean | User$appearancePrefArgs<ExtArgs>
    securityLogs?: boolean | User$securityLogsArgs<ExtArgs>
    teamMemberships?: boolean | User$teamMembershipsArgs<ExtArgs>
    analytics?: boolean | User$analyticsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    systemChanges?: boolean | User$systemChangesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    lastLoginAt?: boolean
    lastLoginIp?: boolean
    loginFailCount?: boolean
    twoFaSecret?: boolean
    deviceFingerprint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "role" | "status" | "lastLoginAt" | "lastLoginIp" | "loginFailCount" | "twoFaSecret" | "deviceFingerprint" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    employeeProfile?: boolean | User$employeeProfileArgs<ExtArgs>
    adminProfile?: boolean | User$adminProfileArgs<ExtArgs>
    notificationPref?: boolean | User$notificationPrefArgs<ExtArgs>
    appearancePref?: boolean | User$appearancePrefArgs<ExtArgs>
    securityLogs?: boolean | User$securityLogsArgs<ExtArgs>
    teamMemberships?: boolean | User$teamMembershipsArgs<ExtArgs>
    analytics?: boolean | User$analyticsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    systemChanges?: boolean | User$systemChangesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
      employeeProfile: Prisma.$EmployeeProfilePayload<ExtArgs> | null
      adminProfile: Prisma.$AdminProfilePayload<ExtArgs> | null
      notificationPref: Prisma.$UserNotificationPrefPayload<ExtArgs> | null
      appearancePref: Prisma.$UserAppearancePrefPayload<ExtArgs> | null
      securityLogs: Prisma.$SecurityLogPayload<ExtArgs>[]
      teamMemberships: Prisma.$TeamMemberPayload<ExtArgs>[]
      analytics: Prisma.$EmployeeAnalyticsPayload<ExtArgs>[]
      uploadedFiles: Prisma.$FileStoragePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      systemChanges: Prisma.$SystemChangeLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: string
      status: string
      lastLoginAt: Date | null
      lastLoginIp: string | null
      loginFailCount: number
      twoFaSecret: string | null
      deviceFingerprint: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvals<T extends User$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employeeProfile<T extends User$employeeProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeProfileArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    adminProfile<T extends User$adminProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$adminProfileArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notificationPref<T extends User$notificationPrefArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationPrefArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    appearancePref<T extends User$appearancePrefArgs<ExtArgs> = {}>(args?: Subset<T, User$appearancePrefArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    securityLogs<T extends User$securityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$securityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamMemberships<T extends User$teamMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    analytics<T extends User$analyticsArgs<ExtArgs> = {}>(args?: Subset<T, User$analyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedFiles<T extends User$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    systemChanges<T extends User$systemChangesArgs<ExtArgs> = {}>(args?: Subset<T, User$systemChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginIp: FieldRef<"User", 'String'>
    readonly loginFailCount: FieldRef<"User", 'Int'>
    readonly twoFaSecret: FieldRef<"User", 'String'>
    readonly deviceFingerprint: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.approvals
   */
  export type User$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * User.employeeProfile
   */
  export type User$employeeProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    where?: EmployeeProfileWhereInput
  }

  /**
   * User.adminProfile
   */
  export type User$adminProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    where?: AdminProfileWhereInput
  }

  /**
   * User.notificationPref
   */
  export type User$notificationPrefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    where?: UserNotificationPrefWhereInput
  }

  /**
   * User.appearancePref
   */
  export type User$appearancePrefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    where?: UserAppearancePrefWhereInput
  }

  /**
   * User.securityLogs
   */
  export type User$securityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    where?: SecurityLogWhereInput
    orderBy?: SecurityLogOrderByWithRelationInput | SecurityLogOrderByWithRelationInput[]
    cursor?: SecurityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SecurityLogScalarFieldEnum | SecurityLogScalarFieldEnum[]
  }

  /**
   * User.teamMemberships
   */
  export type User$teamMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * User.analytics
   */
  export type User$analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    where?: EmployeeAnalyticsWhereInput
    orderBy?: EmployeeAnalyticsOrderByWithRelationInput | EmployeeAnalyticsOrderByWithRelationInput[]
    cursor?: EmployeeAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeAnalyticsScalarFieldEnum | EmployeeAnalyticsScalarFieldEnum[]
  }

  /**
   * User.uploadedFiles
   */
  export type User$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    where?: FileStorageWhereInput
    orderBy?: FileStorageOrderByWithRelationInput | FileStorageOrderByWithRelationInput[]
    cursor?: FileStorageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileStorageScalarFieldEnum | FileStorageScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.systemChanges
   */
  export type User$systemChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    where?: SystemChangeLogWhereInput
    orderBy?: SystemChangeLogOrderByWithRelationInput | SystemChangeLogOrderByWithRelationInput[]
    cursor?: SystemChangeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemChangeLogScalarFieldEnum | SystemChangeLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeProfile
   */

  export type AggregateEmployeeProfile = {
    _count: EmployeeProfileCountAggregateOutputType | null
    _min: EmployeeProfileMinAggregateOutputType | null
    _max: EmployeeProfileMaxAggregateOutputType | null
  }

  export type EmployeeProfileMinAggregateOutputType = {
    userId: string | null
    companyCode: string | null
    employeeCode: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
    lineToken: string | null
  }

  export type EmployeeProfileMaxAggregateOutputType = {
    userId: string | null
    companyCode: string | null
    employeeCode: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
    lineToken: string | null
  }

  export type EmployeeProfileCountAggregateOutputType = {
    userId: number
    companyCode: number
    employeeCode: number
    firstName: number
    lastName: number
    nickname: number
    position: number
    profileImageUrl: number
    lineToken: number
    _all: number
  }


  export type EmployeeProfileMinAggregateInputType = {
    userId?: true
    companyCode?: true
    employeeCode?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
    lineToken?: true
  }

  export type EmployeeProfileMaxAggregateInputType = {
    userId?: true
    companyCode?: true
    employeeCode?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
    lineToken?: true
  }

  export type EmployeeProfileCountAggregateInputType = {
    userId?: true
    companyCode?: true
    employeeCode?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
    lineToken?: true
    _all?: true
  }

  export type EmployeeProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeProfile to aggregate.
     */
    where?: EmployeeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeProfiles to fetch.
     */
    orderBy?: EmployeeProfileOrderByWithRelationInput | EmployeeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeProfiles
    **/
    _count?: true | EmployeeProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeProfileMaxAggregateInputType
  }

  export type GetEmployeeProfileAggregateType<T extends EmployeeProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeProfile[P]>
      : GetScalarType<T[P], AggregateEmployeeProfile[P]>
  }




  export type EmployeeProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeProfileWhereInput
    orderBy?: EmployeeProfileOrderByWithAggregationInput | EmployeeProfileOrderByWithAggregationInput[]
    by: EmployeeProfileScalarFieldEnum[] | EmployeeProfileScalarFieldEnum
    having?: EmployeeProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeProfileCountAggregateInputType | true
    _min?: EmployeeProfileMinAggregateInputType
    _max?: EmployeeProfileMaxAggregateInputType
  }

  export type EmployeeProfileGroupByOutputType = {
    userId: string
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
    lineToken: string | null
    _count: EmployeeProfileCountAggregateOutputType | null
    _min: EmployeeProfileMinAggregateOutputType | null
    _max: EmployeeProfileMaxAggregateOutputType | null
  }

  type GetEmployeeProfileGroupByPayload<T extends EmployeeProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeProfileGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeProfileGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    companyCode?: boolean
    employeeCode?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    position?: boolean
    profileImageUrl?: boolean
    lineToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeProfile"]>



  export type EmployeeProfileSelectScalar = {
    userId?: boolean
    companyCode?: boolean
    employeeCode?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    position?: boolean
    profileImageUrl?: boolean
    lineToken?: boolean
  }

  export type EmployeeProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "companyCode" | "employeeCode" | "firstName" | "lastName" | "nickname" | "position" | "profileImageUrl" | "lineToken", ExtArgs["result"]["employeeProfile"]>
  export type EmployeeProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmployeeProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      companyCode: string
      employeeCode: string
      firstName: string
      lastName: string
      nickname: string | null
      position: string | null
      profileImageUrl: string | null
      lineToken: string | null
    }, ExtArgs["result"]["employeeProfile"]>
    composites: {}
  }

  type EmployeeProfileGetPayload<S extends boolean | null | undefined | EmployeeProfileDefaultArgs> = $Result.GetResult<Prisma.$EmployeeProfilePayload, S>

  type EmployeeProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeProfileCountAggregateInputType | true
    }

  export interface EmployeeProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeProfile'], meta: { name: 'EmployeeProfile' } }
    /**
     * Find zero or one EmployeeProfile that matches the filter.
     * @param {EmployeeProfileFindUniqueArgs} args - Arguments to find a EmployeeProfile
     * @example
     * // Get one EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeProfileFindUniqueArgs>(args: SelectSubset<T, EmployeeProfileFindUniqueArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmployeeProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeProfileFindUniqueOrThrowArgs} args - Arguments to find a EmployeeProfile
     * @example
     * // Get one EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileFindFirstArgs} args - Arguments to find a EmployeeProfile
     * @example
     * // Get one EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeProfileFindFirstArgs>(args?: SelectSubset<T, EmployeeProfileFindFirstArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileFindFirstOrThrowArgs} args - Arguments to find a EmployeeProfile
     * @example
     * // Get one EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmployeeProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeProfiles
     * const employeeProfiles = await prisma.employeeProfile.findMany()
     * 
     * // Get first 10 EmployeeProfiles
     * const employeeProfiles = await prisma.employeeProfile.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const employeeProfileWithUserIdOnly = await prisma.employeeProfile.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends EmployeeProfileFindManyArgs>(args?: SelectSubset<T, EmployeeProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmployeeProfile.
     * @param {EmployeeProfileCreateArgs} args - Arguments to create a EmployeeProfile.
     * @example
     * // Create one EmployeeProfile
     * const EmployeeProfile = await prisma.employeeProfile.create({
     *   data: {
     *     // ... data to create a EmployeeProfile
     *   }
     * })
     * 
     */
    create<T extends EmployeeProfileCreateArgs>(args: SelectSubset<T, EmployeeProfileCreateArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmployeeProfiles.
     * @param {EmployeeProfileCreateManyArgs} args - Arguments to create many EmployeeProfiles.
     * @example
     * // Create many EmployeeProfiles
     * const employeeProfile = await prisma.employeeProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeProfileCreateManyArgs>(args?: SelectSubset<T, EmployeeProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeProfile.
     * @param {EmployeeProfileDeleteArgs} args - Arguments to delete one EmployeeProfile.
     * @example
     * // Delete one EmployeeProfile
     * const EmployeeProfile = await prisma.employeeProfile.delete({
     *   where: {
     *     // ... filter to delete one EmployeeProfile
     *   }
     * })
     * 
     */
    delete<T extends EmployeeProfileDeleteArgs>(args: SelectSubset<T, EmployeeProfileDeleteArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmployeeProfile.
     * @param {EmployeeProfileUpdateArgs} args - Arguments to update one EmployeeProfile.
     * @example
     * // Update one EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeProfileUpdateArgs>(args: SelectSubset<T, EmployeeProfileUpdateArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmployeeProfiles.
     * @param {EmployeeProfileDeleteManyArgs} args - Arguments to filter EmployeeProfiles to delete.
     * @example
     * // Delete a few EmployeeProfiles
     * const { count } = await prisma.employeeProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeProfileDeleteManyArgs>(args?: SelectSubset<T, EmployeeProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeProfiles
     * const employeeProfile = await prisma.employeeProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeProfileUpdateManyArgs>(args: SelectSubset<T, EmployeeProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeProfile.
     * @param {EmployeeProfileUpsertArgs} args - Arguments to update or create a EmployeeProfile.
     * @example
     * // Update or create a EmployeeProfile
     * const employeeProfile = await prisma.employeeProfile.upsert({
     *   create: {
     *     // ... data to create a EmployeeProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeProfile we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeProfileUpsertArgs>(args: SelectSubset<T, EmployeeProfileUpsertArgs<ExtArgs>>): Prisma__EmployeeProfileClient<$Result.GetResult<Prisma.$EmployeeProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmployeeProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileCountArgs} args - Arguments to filter EmployeeProfiles to count.
     * @example
     * // Count the number of EmployeeProfiles
     * const count = await prisma.employeeProfile.count({
     *   where: {
     *     // ... the filter for the EmployeeProfiles we want to count
     *   }
     * })
    **/
    count<T extends EmployeeProfileCountArgs>(
      args?: Subset<T, EmployeeProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeProfileAggregateArgs>(args: Subset<T, EmployeeProfileAggregateArgs>): Prisma.PrismaPromise<GetEmployeeProfileAggregateType<T>>

    /**
     * Group by EmployeeProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeProfileGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeProfile model
   */
  readonly fields: EmployeeProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeProfile model
   */
  interface EmployeeProfileFieldRefs {
    readonly userId: FieldRef<"EmployeeProfile", 'String'>
    readonly companyCode: FieldRef<"EmployeeProfile", 'String'>
    readonly employeeCode: FieldRef<"EmployeeProfile", 'String'>
    readonly firstName: FieldRef<"EmployeeProfile", 'String'>
    readonly lastName: FieldRef<"EmployeeProfile", 'String'>
    readonly nickname: FieldRef<"EmployeeProfile", 'String'>
    readonly position: FieldRef<"EmployeeProfile", 'String'>
    readonly profileImageUrl: FieldRef<"EmployeeProfile", 'String'>
    readonly lineToken: FieldRef<"EmployeeProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeProfile findUnique
   */
  export type EmployeeProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeProfile to fetch.
     */
    where: EmployeeProfileWhereUniqueInput
  }

  /**
   * EmployeeProfile findUniqueOrThrow
   */
  export type EmployeeProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeProfile to fetch.
     */
    where: EmployeeProfileWhereUniqueInput
  }

  /**
   * EmployeeProfile findFirst
   */
  export type EmployeeProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeProfile to fetch.
     */
    where?: EmployeeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeProfiles to fetch.
     */
    orderBy?: EmployeeProfileOrderByWithRelationInput | EmployeeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeProfiles.
     */
    cursor?: EmployeeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeProfiles.
     */
    distinct?: EmployeeProfileScalarFieldEnum | EmployeeProfileScalarFieldEnum[]
  }

  /**
   * EmployeeProfile findFirstOrThrow
   */
  export type EmployeeProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeProfile to fetch.
     */
    where?: EmployeeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeProfiles to fetch.
     */
    orderBy?: EmployeeProfileOrderByWithRelationInput | EmployeeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeProfiles.
     */
    cursor?: EmployeeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeProfiles.
     */
    distinct?: EmployeeProfileScalarFieldEnum | EmployeeProfileScalarFieldEnum[]
  }

  /**
   * EmployeeProfile findMany
   */
  export type EmployeeProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeProfiles to fetch.
     */
    where?: EmployeeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeProfiles to fetch.
     */
    orderBy?: EmployeeProfileOrderByWithRelationInput | EmployeeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeProfiles.
     */
    cursor?: EmployeeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeProfiles.
     */
    skip?: number
    distinct?: EmployeeProfileScalarFieldEnum | EmployeeProfileScalarFieldEnum[]
  }

  /**
   * EmployeeProfile create
   */
  export type EmployeeProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeProfile.
     */
    data: XOR<EmployeeProfileCreateInput, EmployeeProfileUncheckedCreateInput>
  }

  /**
   * EmployeeProfile createMany
   */
  export type EmployeeProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeProfiles.
     */
    data: EmployeeProfileCreateManyInput | EmployeeProfileCreateManyInput[]
  }

  /**
   * EmployeeProfile update
   */
  export type EmployeeProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeProfile.
     */
    data: XOR<EmployeeProfileUpdateInput, EmployeeProfileUncheckedUpdateInput>
    /**
     * Choose, which EmployeeProfile to update.
     */
    where: EmployeeProfileWhereUniqueInput
  }

  /**
   * EmployeeProfile updateMany
   */
  export type EmployeeProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeProfiles.
     */
    data: XOR<EmployeeProfileUpdateManyMutationInput, EmployeeProfileUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeProfiles to update
     */
    where?: EmployeeProfileWhereInput
    /**
     * Limit how many EmployeeProfiles to update.
     */
    limit?: number
  }

  /**
   * EmployeeProfile upsert
   */
  export type EmployeeProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeProfile to update in case it exists.
     */
    where: EmployeeProfileWhereUniqueInput
    /**
     * In case the EmployeeProfile found by the `where` argument doesn't exist, create a new EmployeeProfile with this data.
     */
    create: XOR<EmployeeProfileCreateInput, EmployeeProfileUncheckedCreateInput>
    /**
     * In case the EmployeeProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeProfileUpdateInput, EmployeeProfileUncheckedUpdateInput>
  }

  /**
   * EmployeeProfile delete
   */
  export type EmployeeProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
    /**
     * Filter which EmployeeProfile to delete.
     */
    where: EmployeeProfileWhereUniqueInput
  }

  /**
   * EmployeeProfile deleteMany
   */
  export type EmployeeProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeProfiles to delete
     */
    where?: EmployeeProfileWhereInput
    /**
     * Limit how many EmployeeProfiles to delete.
     */
    limit?: number
  }

  /**
   * EmployeeProfile without action
   */
  export type EmployeeProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeProfile
     */
    select?: EmployeeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeProfile
     */
    omit?: EmployeeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeProfileInclude<ExtArgs> | null
  }


  /**
   * Model AdminProfile
   */

  export type AggregateAdminProfile = {
    _count: AdminProfileCountAggregateOutputType | null
    _min: AdminProfileMinAggregateOutputType | null
    _max: AdminProfileMaxAggregateOutputType | null
  }

  export type AdminProfileMinAggregateOutputType = {
    userId: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
  }

  export type AdminProfileMaxAggregateOutputType = {
    userId: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
  }

  export type AdminProfileCountAggregateOutputType = {
    userId: number
    firstName: number
    lastName: number
    nickname: number
    position: number
    profileImageUrl: number
    _all: number
  }


  export type AdminProfileMinAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
  }

  export type AdminProfileMaxAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
  }

  export type AdminProfileCountAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    nickname?: true
    position?: true
    profileImageUrl?: true
    _all?: true
  }

  export type AdminProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminProfile to aggregate.
     */
    where?: AdminProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminProfiles to fetch.
     */
    orderBy?: AdminProfileOrderByWithRelationInput | AdminProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminProfiles
    **/
    _count?: true | AdminProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminProfileMaxAggregateInputType
  }

  export type GetAdminProfileAggregateType<T extends AdminProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminProfile[P]>
      : GetScalarType<T[P], AggregateAdminProfile[P]>
  }




  export type AdminProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminProfileWhereInput
    orderBy?: AdminProfileOrderByWithAggregationInput | AdminProfileOrderByWithAggregationInput[]
    by: AdminProfileScalarFieldEnum[] | AdminProfileScalarFieldEnum
    having?: AdminProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminProfileCountAggregateInputType | true
    _min?: AdminProfileMinAggregateInputType
    _max?: AdminProfileMaxAggregateInputType
  }

  export type AdminProfileGroupByOutputType = {
    userId: string
    firstName: string
    lastName: string
    nickname: string | null
    position: string | null
    profileImageUrl: string | null
    _count: AdminProfileCountAggregateOutputType | null
    _min: AdminProfileMinAggregateOutputType | null
    _max: AdminProfileMaxAggregateOutputType | null
  }

  type GetAdminProfileGroupByPayload<T extends AdminProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminProfileGroupByOutputType[P]>
            : GetScalarType<T[P], AdminProfileGroupByOutputType[P]>
        }
      >
    >


  export type AdminProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    position?: boolean
    profileImageUrl?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminProfile"]>



  export type AdminProfileSelectScalar = {
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    position?: boolean
    profileImageUrl?: boolean
  }

  export type AdminProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "firstName" | "lastName" | "nickname" | "position" | "profileImageUrl", ExtArgs["result"]["adminProfile"]>
  export type AdminProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      firstName: string
      lastName: string
      nickname: string | null
      position: string | null
      profileImageUrl: string | null
    }, ExtArgs["result"]["adminProfile"]>
    composites: {}
  }

  type AdminProfileGetPayload<S extends boolean | null | undefined | AdminProfileDefaultArgs> = $Result.GetResult<Prisma.$AdminProfilePayload, S>

  type AdminProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminProfileCountAggregateInputType | true
    }

  export interface AdminProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminProfile'], meta: { name: 'AdminProfile' } }
    /**
     * Find zero or one AdminProfile that matches the filter.
     * @param {AdminProfileFindUniqueArgs} args - Arguments to find a AdminProfile
     * @example
     * // Get one AdminProfile
     * const adminProfile = await prisma.adminProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminProfileFindUniqueArgs>(args: SelectSubset<T, AdminProfileFindUniqueArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminProfileFindUniqueOrThrowArgs} args - Arguments to find a AdminProfile
     * @example
     * // Get one AdminProfile
     * const adminProfile = await prisma.adminProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileFindFirstArgs} args - Arguments to find a AdminProfile
     * @example
     * // Get one AdminProfile
     * const adminProfile = await prisma.adminProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminProfileFindFirstArgs>(args?: SelectSubset<T, AdminProfileFindFirstArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileFindFirstOrThrowArgs} args - Arguments to find a AdminProfile
     * @example
     * // Get one AdminProfile
     * const adminProfile = await prisma.adminProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminProfiles
     * const adminProfiles = await prisma.adminProfile.findMany()
     * 
     * // Get first 10 AdminProfiles
     * const adminProfiles = await prisma.adminProfile.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const adminProfileWithUserIdOnly = await prisma.adminProfile.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AdminProfileFindManyArgs>(args?: SelectSubset<T, AdminProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminProfile.
     * @param {AdminProfileCreateArgs} args - Arguments to create a AdminProfile.
     * @example
     * // Create one AdminProfile
     * const AdminProfile = await prisma.adminProfile.create({
     *   data: {
     *     // ... data to create a AdminProfile
     *   }
     * })
     * 
     */
    create<T extends AdminProfileCreateArgs>(args: SelectSubset<T, AdminProfileCreateArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminProfiles.
     * @param {AdminProfileCreateManyArgs} args - Arguments to create many AdminProfiles.
     * @example
     * // Create many AdminProfiles
     * const adminProfile = await prisma.adminProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminProfileCreateManyArgs>(args?: SelectSubset<T, AdminProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminProfile.
     * @param {AdminProfileDeleteArgs} args - Arguments to delete one AdminProfile.
     * @example
     * // Delete one AdminProfile
     * const AdminProfile = await prisma.adminProfile.delete({
     *   where: {
     *     // ... filter to delete one AdminProfile
     *   }
     * })
     * 
     */
    delete<T extends AdminProfileDeleteArgs>(args: SelectSubset<T, AdminProfileDeleteArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminProfile.
     * @param {AdminProfileUpdateArgs} args - Arguments to update one AdminProfile.
     * @example
     * // Update one AdminProfile
     * const adminProfile = await prisma.adminProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminProfileUpdateArgs>(args: SelectSubset<T, AdminProfileUpdateArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminProfiles.
     * @param {AdminProfileDeleteManyArgs} args - Arguments to filter AdminProfiles to delete.
     * @example
     * // Delete a few AdminProfiles
     * const { count } = await prisma.adminProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminProfileDeleteManyArgs>(args?: SelectSubset<T, AdminProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminProfiles
     * const adminProfile = await prisma.adminProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminProfileUpdateManyArgs>(args: SelectSubset<T, AdminProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminProfile.
     * @param {AdminProfileUpsertArgs} args - Arguments to update or create a AdminProfile.
     * @example
     * // Update or create a AdminProfile
     * const adminProfile = await prisma.adminProfile.upsert({
     *   create: {
     *     // ... data to create a AdminProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminProfile we want to update
     *   }
     * })
     */
    upsert<T extends AdminProfileUpsertArgs>(args: SelectSubset<T, AdminProfileUpsertArgs<ExtArgs>>): Prisma__AdminProfileClient<$Result.GetResult<Prisma.$AdminProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileCountArgs} args - Arguments to filter AdminProfiles to count.
     * @example
     * // Count the number of AdminProfiles
     * const count = await prisma.adminProfile.count({
     *   where: {
     *     // ... the filter for the AdminProfiles we want to count
     *   }
     * })
    **/
    count<T extends AdminProfileCountArgs>(
      args?: Subset<T, AdminProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminProfileAggregateArgs>(args: Subset<T, AdminProfileAggregateArgs>): Prisma.PrismaPromise<GetAdminProfileAggregateType<T>>

    /**
     * Group by AdminProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminProfileGroupByArgs['orderBy'] }
        : { orderBy?: AdminProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminProfile model
   */
  readonly fields: AdminProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminProfile model
   */
  interface AdminProfileFieldRefs {
    readonly userId: FieldRef<"AdminProfile", 'String'>
    readonly firstName: FieldRef<"AdminProfile", 'String'>
    readonly lastName: FieldRef<"AdminProfile", 'String'>
    readonly nickname: FieldRef<"AdminProfile", 'String'>
    readonly position: FieldRef<"AdminProfile", 'String'>
    readonly profileImageUrl: FieldRef<"AdminProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdminProfile findUnique
   */
  export type AdminProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter, which AdminProfile to fetch.
     */
    where: AdminProfileWhereUniqueInput
  }

  /**
   * AdminProfile findUniqueOrThrow
   */
  export type AdminProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter, which AdminProfile to fetch.
     */
    where: AdminProfileWhereUniqueInput
  }

  /**
   * AdminProfile findFirst
   */
  export type AdminProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter, which AdminProfile to fetch.
     */
    where?: AdminProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminProfiles to fetch.
     */
    orderBy?: AdminProfileOrderByWithRelationInput | AdminProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminProfiles.
     */
    cursor?: AdminProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminProfiles.
     */
    distinct?: AdminProfileScalarFieldEnum | AdminProfileScalarFieldEnum[]
  }

  /**
   * AdminProfile findFirstOrThrow
   */
  export type AdminProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter, which AdminProfile to fetch.
     */
    where?: AdminProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminProfiles to fetch.
     */
    orderBy?: AdminProfileOrderByWithRelationInput | AdminProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminProfiles.
     */
    cursor?: AdminProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminProfiles.
     */
    distinct?: AdminProfileScalarFieldEnum | AdminProfileScalarFieldEnum[]
  }

  /**
   * AdminProfile findMany
   */
  export type AdminProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter, which AdminProfiles to fetch.
     */
    where?: AdminProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminProfiles to fetch.
     */
    orderBy?: AdminProfileOrderByWithRelationInput | AdminProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminProfiles.
     */
    cursor?: AdminProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminProfiles.
     */
    skip?: number
    distinct?: AdminProfileScalarFieldEnum | AdminProfileScalarFieldEnum[]
  }

  /**
   * AdminProfile create
   */
  export type AdminProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminProfile.
     */
    data: XOR<AdminProfileCreateInput, AdminProfileUncheckedCreateInput>
  }

  /**
   * AdminProfile createMany
   */
  export type AdminProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminProfiles.
     */
    data: AdminProfileCreateManyInput | AdminProfileCreateManyInput[]
  }

  /**
   * AdminProfile update
   */
  export type AdminProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminProfile.
     */
    data: XOR<AdminProfileUpdateInput, AdminProfileUncheckedUpdateInput>
    /**
     * Choose, which AdminProfile to update.
     */
    where: AdminProfileWhereUniqueInput
  }

  /**
   * AdminProfile updateMany
   */
  export type AdminProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminProfiles.
     */
    data: XOR<AdminProfileUpdateManyMutationInput, AdminProfileUncheckedUpdateManyInput>
    /**
     * Filter which AdminProfiles to update
     */
    where?: AdminProfileWhereInput
    /**
     * Limit how many AdminProfiles to update.
     */
    limit?: number
  }

  /**
   * AdminProfile upsert
   */
  export type AdminProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminProfile to update in case it exists.
     */
    where: AdminProfileWhereUniqueInput
    /**
     * In case the AdminProfile found by the `where` argument doesn't exist, create a new AdminProfile with this data.
     */
    create: XOR<AdminProfileCreateInput, AdminProfileUncheckedCreateInput>
    /**
     * In case the AdminProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminProfileUpdateInput, AdminProfileUncheckedUpdateInput>
  }

  /**
   * AdminProfile delete
   */
  export type AdminProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
    /**
     * Filter which AdminProfile to delete.
     */
    where: AdminProfileWhereUniqueInput
  }

  /**
   * AdminProfile deleteMany
   */
  export type AdminProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminProfiles to delete
     */
    where?: AdminProfileWhereInput
    /**
     * Limit how many AdminProfiles to delete.
     */
    limit?: number
  }

  /**
   * AdminProfile without action
   */
  export type AdminProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminProfile
     */
    select?: AdminProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminProfile
     */
    omit?: AdminProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminProfileInclude<ExtArgs> | null
  }


  /**
   * Model SecurityLog
   */

  export type AggregateSecurityLog = {
    _count: SecurityLogCountAggregateOutputType | null
    _min: SecurityLogMinAggregateOutputType | null
    _max: SecurityLogMaxAggregateOutputType | null
  }

  export type SecurityLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type SecurityLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type SecurityLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type SecurityLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type SecurityLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type SecurityLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type SecurityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityLog to aggregate.
     */
    where?: SecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityLogs to fetch.
     */
    orderBy?: SecurityLogOrderByWithRelationInput | SecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecurityLogs
    **/
    _count?: true | SecurityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecurityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecurityLogMaxAggregateInputType
  }

  export type GetSecurityLogAggregateType<T extends SecurityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSecurityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecurityLog[P]>
      : GetScalarType<T[P], AggregateSecurityLog[P]>
  }




  export type SecurityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityLogWhereInput
    orderBy?: SecurityLogOrderByWithAggregationInput | SecurityLogOrderByWithAggregationInput[]
    by: SecurityLogScalarFieldEnum[] | SecurityLogScalarFieldEnum
    having?: SecurityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecurityLogCountAggregateInputType | true
    _min?: SecurityLogMinAggregateInputType
    _max?: SecurityLogMaxAggregateInputType
  }

  export type SecurityLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt: Date
    _count: SecurityLogCountAggregateOutputType | null
    _min: SecurityLogMinAggregateOutputType | null
    _max: SecurityLogMaxAggregateOutputType | null
  }

  type GetSecurityLogGroupByPayload<T extends SecurityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecurityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecurityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecurityLogGroupByOutputType[P]>
            : GetScalarType<T[P], SecurityLogGroupByOutputType[P]>
        }
      >
    >


  export type SecurityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityLog"]>



  export type SecurityLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type SecurityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["securityLog"]>
  export type SecurityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SecurityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecurityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      ipAddress: string
      userAgent: string
      createdAt: Date
    }, ExtArgs["result"]["securityLog"]>
    composites: {}
  }

  type SecurityLogGetPayload<S extends boolean | null | undefined | SecurityLogDefaultArgs> = $Result.GetResult<Prisma.$SecurityLogPayload, S>

  type SecurityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SecurityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SecurityLogCountAggregateInputType | true
    }

  export interface SecurityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecurityLog'], meta: { name: 'SecurityLog' } }
    /**
     * Find zero or one SecurityLog that matches the filter.
     * @param {SecurityLogFindUniqueArgs} args - Arguments to find a SecurityLog
     * @example
     * // Get one SecurityLog
     * const securityLog = await prisma.securityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecurityLogFindUniqueArgs>(args: SelectSubset<T, SecurityLogFindUniqueArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SecurityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SecurityLogFindUniqueOrThrowArgs} args - Arguments to find a SecurityLog
     * @example
     * // Get one SecurityLog
     * const securityLog = await prisma.securityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecurityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SecurityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogFindFirstArgs} args - Arguments to find a SecurityLog
     * @example
     * // Get one SecurityLog
     * const securityLog = await prisma.securityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecurityLogFindFirstArgs>(args?: SelectSubset<T, SecurityLogFindFirstArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogFindFirstOrThrowArgs} args - Arguments to find a SecurityLog
     * @example
     * // Get one SecurityLog
     * const securityLog = await prisma.securityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecurityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SecurityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SecurityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecurityLogs
     * const securityLogs = await prisma.securityLog.findMany()
     * 
     * // Get first 10 SecurityLogs
     * const securityLogs = await prisma.securityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securityLogWithIdOnly = await prisma.securityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecurityLogFindManyArgs>(args?: SelectSubset<T, SecurityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SecurityLog.
     * @param {SecurityLogCreateArgs} args - Arguments to create a SecurityLog.
     * @example
     * // Create one SecurityLog
     * const SecurityLog = await prisma.securityLog.create({
     *   data: {
     *     // ... data to create a SecurityLog
     *   }
     * })
     * 
     */
    create<T extends SecurityLogCreateArgs>(args: SelectSubset<T, SecurityLogCreateArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SecurityLogs.
     * @param {SecurityLogCreateManyArgs} args - Arguments to create many SecurityLogs.
     * @example
     * // Create many SecurityLogs
     * const securityLog = await prisma.securityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecurityLogCreateManyArgs>(args?: SelectSubset<T, SecurityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SecurityLog.
     * @param {SecurityLogDeleteArgs} args - Arguments to delete one SecurityLog.
     * @example
     * // Delete one SecurityLog
     * const SecurityLog = await prisma.securityLog.delete({
     *   where: {
     *     // ... filter to delete one SecurityLog
     *   }
     * })
     * 
     */
    delete<T extends SecurityLogDeleteArgs>(args: SelectSubset<T, SecurityLogDeleteArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SecurityLog.
     * @param {SecurityLogUpdateArgs} args - Arguments to update one SecurityLog.
     * @example
     * // Update one SecurityLog
     * const securityLog = await prisma.securityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecurityLogUpdateArgs>(args: SelectSubset<T, SecurityLogUpdateArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SecurityLogs.
     * @param {SecurityLogDeleteManyArgs} args - Arguments to filter SecurityLogs to delete.
     * @example
     * // Delete a few SecurityLogs
     * const { count } = await prisma.securityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecurityLogDeleteManyArgs>(args?: SelectSubset<T, SecurityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecurityLogs
     * const securityLog = await prisma.securityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecurityLogUpdateManyArgs>(args: SelectSubset<T, SecurityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SecurityLog.
     * @param {SecurityLogUpsertArgs} args - Arguments to update or create a SecurityLog.
     * @example
     * // Update or create a SecurityLog
     * const securityLog = await prisma.securityLog.upsert({
     *   create: {
     *     // ... data to create a SecurityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecurityLog we want to update
     *   }
     * })
     */
    upsert<T extends SecurityLogUpsertArgs>(args: SelectSubset<T, SecurityLogUpsertArgs<ExtArgs>>): Prisma__SecurityLogClient<$Result.GetResult<Prisma.$SecurityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SecurityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogCountArgs} args - Arguments to filter SecurityLogs to count.
     * @example
     * // Count the number of SecurityLogs
     * const count = await prisma.securityLog.count({
     *   where: {
     *     // ... the filter for the SecurityLogs we want to count
     *   }
     * })
    **/
    count<T extends SecurityLogCountArgs>(
      args?: Subset<T, SecurityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecurityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecurityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecurityLogAggregateArgs>(args: Subset<T, SecurityLogAggregateArgs>): Prisma.PrismaPromise<GetSecurityLogAggregateType<T>>

    /**
     * Group by SecurityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecurityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecurityLogGroupByArgs['orderBy'] }
        : { orderBy?: SecurityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecurityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecurityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecurityLog model
   */
  readonly fields: SecurityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecurityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecurityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecurityLog model
   */
  interface SecurityLogFieldRefs {
    readonly id: FieldRef<"SecurityLog", 'String'>
    readonly userId: FieldRef<"SecurityLog", 'String'>
    readonly action: FieldRef<"SecurityLog", 'String'>
    readonly ipAddress: FieldRef<"SecurityLog", 'String'>
    readonly userAgent: FieldRef<"SecurityLog", 'String'>
    readonly createdAt: FieldRef<"SecurityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SecurityLog findUnique
   */
  export type SecurityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityLog to fetch.
     */
    where: SecurityLogWhereUniqueInput
  }

  /**
   * SecurityLog findUniqueOrThrow
   */
  export type SecurityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityLog to fetch.
     */
    where: SecurityLogWhereUniqueInput
  }

  /**
   * SecurityLog findFirst
   */
  export type SecurityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityLog to fetch.
     */
    where?: SecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityLogs to fetch.
     */
    orderBy?: SecurityLogOrderByWithRelationInput | SecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityLogs.
     */
    cursor?: SecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityLogs.
     */
    distinct?: SecurityLogScalarFieldEnum | SecurityLogScalarFieldEnum[]
  }

  /**
   * SecurityLog findFirstOrThrow
   */
  export type SecurityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityLog to fetch.
     */
    where?: SecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityLogs to fetch.
     */
    orderBy?: SecurityLogOrderByWithRelationInput | SecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityLogs.
     */
    cursor?: SecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityLogs.
     */
    distinct?: SecurityLogScalarFieldEnum | SecurityLogScalarFieldEnum[]
  }

  /**
   * SecurityLog findMany
   */
  export type SecurityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityLogs to fetch.
     */
    where?: SecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityLogs to fetch.
     */
    orderBy?: SecurityLogOrderByWithRelationInput | SecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecurityLogs.
     */
    cursor?: SecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityLogs.
     */
    skip?: number
    distinct?: SecurityLogScalarFieldEnum | SecurityLogScalarFieldEnum[]
  }

  /**
   * SecurityLog create
   */
  export type SecurityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SecurityLog.
     */
    data: XOR<SecurityLogCreateInput, SecurityLogUncheckedCreateInput>
  }

  /**
   * SecurityLog createMany
   */
  export type SecurityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecurityLogs.
     */
    data: SecurityLogCreateManyInput | SecurityLogCreateManyInput[]
  }

  /**
   * SecurityLog update
   */
  export type SecurityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SecurityLog.
     */
    data: XOR<SecurityLogUpdateInput, SecurityLogUncheckedUpdateInput>
    /**
     * Choose, which SecurityLog to update.
     */
    where: SecurityLogWhereUniqueInput
  }

  /**
   * SecurityLog updateMany
   */
  export type SecurityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecurityLogs.
     */
    data: XOR<SecurityLogUpdateManyMutationInput, SecurityLogUncheckedUpdateManyInput>
    /**
     * Filter which SecurityLogs to update
     */
    where?: SecurityLogWhereInput
    /**
     * Limit how many SecurityLogs to update.
     */
    limit?: number
  }

  /**
   * SecurityLog upsert
   */
  export type SecurityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SecurityLog to update in case it exists.
     */
    where: SecurityLogWhereUniqueInput
    /**
     * In case the SecurityLog found by the `where` argument doesn't exist, create a new SecurityLog with this data.
     */
    create: XOR<SecurityLogCreateInput, SecurityLogUncheckedCreateInput>
    /**
     * In case the SecurityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecurityLogUpdateInput, SecurityLogUncheckedUpdateInput>
  }

  /**
   * SecurityLog delete
   */
  export type SecurityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
    /**
     * Filter which SecurityLog to delete.
     */
    where: SecurityLogWhereUniqueInput
  }

  /**
   * SecurityLog deleteMany
   */
  export type SecurityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityLogs to delete
     */
    where?: SecurityLogWhereInput
    /**
     * Limit how many SecurityLogs to delete.
     */
    limit?: number
  }

  /**
   * SecurityLog without action
   */
  export type SecurityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityLog
     */
    select?: SecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityLog
     */
    omit?: SecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityLogInclude<ExtArgs> | null
  }


  /**
   * Model UserNotificationPref
   */

  export type AggregateUserNotificationPref = {
    _count: UserNotificationPrefCountAggregateOutputType | null
    _min: UserNotificationPrefMinAggregateOutputType | null
    _max: UserNotificationPrefMaxAggregateOutputType | null
  }

  export type UserNotificationPrefMinAggregateOutputType = {
    userId: string | null
    emailEnabled: boolean | null
    pushEnabled: boolean | null
    smsEnabled: boolean | null
    digestFreq: string | null
    sound: string | null
    quietHoursStart: Date | null
    quietHoursEnd: Date | null
  }

  export type UserNotificationPrefMaxAggregateOutputType = {
    userId: string | null
    emailEnabled: boolean | null
    pushEnabled: boolean | null
    smsEnabled: boolean | null
    digestFreq: string | null
    sound: string | null
    quietHoursStart: Date | null
    quietHoursEnd: Date | null
  }

  export type UserNotificationPrefCountAggregateOutputType = {
    userId: number
    emailEnabled: number
    pushEnabled: number
    smsEnabled: number
    digestFreq: number
    sound: number
    quietHoursStart: number
    quietHoursEnd: number
    _all: number
  }


  export type UserNotificationPrefMinAggregateInputType = {
    userId?: true
    emailEnabled?: true
    pushEnabled?: true
    smsEnabled?: true
    digestFreq?: true
    sound?: true
    quietHoursStart?: true
    quietHoursEnd?: true
  }

  export type UserNotificationPrefMaxAggregateInputType = {
    userId?: true
    emailEnabled?: true
    pushEnabled?: true
    smsEnabled?: true
    digestFreq?: true
    sound?: true
    quietHoursStart?: true
    quietHoursEnd?: true
  }

  export type UserNotificationPrefCountAggregateInputType = {
    userId?: true
    emailEnabled?: true
    pushEnabled?: true
    smsEnabled?: true
    digestFreq?: true
    sound?: true
    quietHoursStart?: true
    quietHoursEnd?: true
    _all?: true
  }

  export type UserNotificationPrefAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotificationPref to aggregate.
     */
    where?: UserNotificationPrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotificationPrefs to fetch.
     */
    orderBy?: UserNotificationPrefOrderByWithRelationInput | UserNotificationPrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNotificationPrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotificationPrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotificationPrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNotificationPrefs
    **/
    _count?: true | UserNotificationPrefCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNotificationPrefMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNotificationPrefMaxAggregateInputType
  }

  export type GetUserNotificationPrefAggregateType<T extends UserNotificationPrefAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNotificationPref]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNotificationPref[P]>
      : GetScalarType<T[P], AggregateUserNotificationPref[P]>
  }




  export type UserNotificationPrefGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationPrefWhereInput
    orderBy?: UserNotificationPrefOrderByWithAggregationInput | UserNotificationPrefOrderByWithAggregationInput[]
    by: UserNotificationPrefScalarFieldEnum[] | UserNotificationPrefScalarFieldEnum
    having?: UserNotificationPrefScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNotificationPrefCountAggregateInputType | true
    _min?: UserNotificationPrefMinAggregateInputType
    _max?: UserNotificationPrefMaxAggregateInputType
  }

  export type UserNotificationPrefGroupByOutputType = {
    userId: string
    emailEnabled: boolean
    pushEnabled: boolean
    smsEnabled: boolean
    digestFreq: string
    sound: string
    quietHoursStart: Date | null
    quietHoursEnd: Date | null
    _count: UserNotificationPrefCountAggregateOutputType | null
    _min: UserNotificationPrefMinAggregateOutputType | null
    _max: UserNotificationPrefMaxAggregateOutputType | null
  }

  type GetUserNotificationPrefGroupByPayload<T extends UserNotificationPrefGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNotificationPrefGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNotificationPrefGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNotificationPrefGroupByOutputType[P]>
            : GetScalarType<T[P], UserNotificationPrefGroupByOutputType[P]>
        }
      >
    >


  export type UserNotificationPrefSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq?: boolean
    sound?: boolean
    quietHoursStart?: boolean
    quietHoursEnd?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotificationPref"]>



  export type UserNotificationPrefSelectScalar = {
    userId?: boolean
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq?: boolean
    sound?: boolean
    quietHoursStart?: boolean
    quietHoursEnd?: boolean
  }

  export type UserNotificationPrefOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "emailEnabled" | "pushEnabled" | "smsEnabled" | "digestFreq" | "sound" | "quietHoursStart" | "quietHoursEnd", ExtArgs["result"]["userNotificationPref"]>
  export type UserNotificationPrefInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserNotificationPrefPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNotificationPref"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      emailEnabled: boolean
      pushEnabled: boolean
      smsEnabled: boolean
      digestFreq: string
      sound: string
      quietHoursStart: Date | null
      quietHoursEnd: Date | null
    }, ExtArgs["result"]["userNotificationPref"]>
    composites: {}
  }

  type UserNotificationPrefGetPayload<S extends boolean | null | undefined | UserNotificationPrefDefaultArgs> = $Result.GetResult<Prisma.$UserNotificationPrefPayload, S>

  type UserNotificationPrefCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserNotificationPrefFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserNotificationPrefCountAggregateInputType | true
    }

  export interface UserNotificationPrefDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNotificationPref'], meta: { name: 'UserNotificationPref' } }
    /**
     * Find zero or one UserNotificationPref that matches the filter.
     * @param {UserNotificationPrefFindUniqueArgs} args - Arguments to find a UserNotificationPref
     * @example
     * // Get one UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNotificationPrefFindUniqueArgs>(args: SelectSubset<T, UserNotificationPrefFindUniqueArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserNotificationPref that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserNotificationPrefFindUniqueOrThrowArgs} args - Arguments to find a UserNotificationPref
     * @example
     * // Get one UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNotificationPrefFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNotificationPrefFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserNotificationPref that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefFindFirstArgs} args - Arguments to find a UserNotificationPref
     * @example
     * // Get one UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNotificationPrefFindFirstArgs>(args?: SelectSubset<T, UserNotificationPrefFindFirstArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserNotificationPref that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefFindFirstOrThrowArgs} args - Arguments to find a UserNotificationPref
     * @example
     * // Get one UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNotificationPrefFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNotificationPrefFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserNotificationPrefs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNotificationPrefs
     * const userNotificationPrefs = await prisma.userNotificationPref.findMany()
     * 
     * // Get first 10 UserNotificationPrefs
     * const userNotificationPrefs = await prisma.userNotificationPref.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userNotificationPrefWithUserIdOnly = await prisma.userNotificationPref.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserNotificationPrefFindManyArgs>(args?: SelectSubset<T, UserNotificationPrefFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserNotificationPref.
     * @param {UserNotificationPrefCreateArgs} args - Arguments to create a UserNotificationPref.
     * @example
     * // Create one UserNotificationPref
     * const UserNotificationPref = await prisma.userNotificationPref.create({
     *   data: {
     *     // ... data to create a UserNotificationPref
     *   }
     * })
     * 
     */
    create<T extends UserNotificationPrefCreateArgs>(args: SelectSubset<T, UserNotificationPrefCreateArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserNotificationPrefs.
     * @param {UserNotificationPrefCreateManyArgs} args - Arguments to create many UserNotificationPrefs.
     * @example
     * // Create many UserNotificationPrefs
     * const userNotificationPref = await prisma.userNotificationPref.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNotificationPrefCreateManyArgs>(args?: SelectSubset<T, UserNotificationPrefCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserNotificationPref.
     * @param {UserNotificationPrefDeleteArgs} args - Arguments to delete one UserNotificationPref.
     * @example
     * // Delete one UserNotificationPref
     * const UserNotificationPref = await prisma.userNotificationPref.delete({
     *   where: {
     *     // ... filter to delete one UserNotificationPref
     *   }
     * })
     * 
     */
    delete<T extends UserNotificationPrefDeleteArgs>(args: SelectSubset<T, UserNotificationPrefDeleteArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserNotificationPref.
     * @param {UserNotificationPrefUpdateArgs} args - Arguments to update one UserNotificationPref.
     * @example
     * // Update one UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNotificationPrefUpdateArgs>(args: SelectSubset<T, UserNotificationPrefUpdateArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserNotificationPrefs.
     * @param {UserNotificationPrefDeleteManyArgs} args - Arguments to filter UserNotificationPrefs to delete.
     * @example
     * // Delete a few UserNotificationPrefs
     * const { count } = await prisma.userNotificationPref.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNotificationPrefDeleteManyArgs>(args?: SelectSubset<T, UserNotificationPrefDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNotificationPrefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNotificationPrefs
     * const userNotificationPref = await prisma.userNotificationPref.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNotificationPrefUpdateManyArgs>(args: SelectSubset<T, UserNotificationPrefUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserNotificationPref.
     * @param {UserNotificationPrefUpsertArgs} args - Arguments to update or create a UserNotificationPref.
     * @example
     * // Update or create a UserNotificationPref
     * const userNotificationPref = await prisma.userNotificationPref.upsert({
     *   create: {
     *     // ... data to create a UserNotificationPref
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNotificationPref we want to update
     *   }
     * })
     */
    upsert<T extends UserNotificationPrefUpsertArgs>(args: SelectSubset<T, UserNotificationPrefUpsertArgs<ExtArgs>>): Prisma__UserNotificationPrefClient<$Result.GetResult<Prisma.$UserNotificationPrefPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserNotificationPrefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefCountArgs} args - Arguments to filter UserNotificationPrefs to count.
     * @example
     * // Count the number of UserNotificationPrefs
     * const count = await prisma.userNotificationPref.count({
     *   where: {
     *     // ... the filter for the UserNotificationPrefs we want to count
     *   }
     * })
    **/
    count<T extends UserNotificationPrefCountArgs>(
      args?: Subset<T, UserNotificationPrefCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNotificationPrefCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNotificationPref.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNotificationPrefAggregateArgs>(args: Subset<T, UserNotificationPrefAggregateArgs>): Prisma.PrismaPromise<GetUserNotificationPrefAggregateType<T>>

    /**
     * Group by UserNotificationPref.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationPrefGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNotificationPrefGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNotificationPrefGroupByArgs['orderBy'] }
        : { orderBy?: UserNotificationPrefGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNotificationPrefGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNotificationPrefGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNotificationPref model
   */
  readonly fields: UserNotificationPrefFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNotificationPref.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNotificationPrefClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNotificationPref model
   */
  interface UserNotificationPrefFieldRefs {
    readonly userId: FieldRef<"UserNotificationPref", 'String'>
    readonly emailEnabled: FieldRef<"UserNotificationPref", 'Boolean'>
    readonly pushEnabled: FieldRef<"UserNotificationPref", 'Boolean'>
    readonly smsEnabled: FieldRef<"UserNotificationPref", 'Boolean'>
    readonly digestFreq: FieldRef<"UserNotificationPref", 'String'>
    readonly sound: FieldRef<"UserNotificationPref", 'String'>
    readonly quietHoursStart: FieldRef<"UserNotificationPref", 'DateTime'>
    readonly quietHoursEnd: FieldRef<"UserNotificationPref", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserNotificationPref findUnique
   */
  export type UserNotificationPrefFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter, which UserNotificationPref to fetch.
     */
    where: UserNotificationPrefWhereUniqueInput
  }

  /**
   * UserNotificationPref findUniqueOrThrow
   */
  export type UserNotificationPrefFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter, which UserNotificationPref to fetch.
     */
    where: UserNotificationPrefWhereUniqueInput
  }

  /**
   * UserNotificationPref findFirst
   */
  export type UserNotificationPrefFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter, which UserNotificationPref to fetch.
     */
    where?: UserNotificationPrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotificationPrefs to fetch.
     */
    orderBy?: UserNotificationPrefOrderByWithRelationInput | UserNotificationPrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotificationPrefs.
     */
    cursor?: UserNotificationPrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotificationPrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotificationPrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotificationPrefs.
     */
    distinct?: UserNotificationPrefScalarFieldEnum | UserNotificationPrefScalarFieldEnum[]
  }

  /**
   * UserNotificationPref findFirstOrThrow
   */
  export type UserNotificationPrefFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter, which UserNotificationPref to fetch.
     */
    where?: UserNotificationPrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotificationPrefs to fetch.
     */
    orderBy?: UserNotificationPrefOrderByWithRelationInput | UserNotificationPrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotificationPrefs.
     */
    cursor?: UserNotificationPrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotificationPrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotificationPrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotificationPrefs.
     */
    distinct?: UserNotificationPrefScalarFieldEnum | UserNotificationPrefScalarFieldEnum[]
  }

  /**
   * UserNotificationPref findMany
   */
  export type UserNotificationPrefFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter, which UserNotificationPrefs to fetch.
     */
    where?: UserNotificationPrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotificationPrefs to fetch.
     */
    orderBy?: UserNotificationPrefOrderByWithRelationInput | UserNotificationPrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNotificationPrefs.
     */
    cursor?: UserNotificationPrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotificationPrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotificationPrefs.
     */
    skip?: number
    distinct?: UserNotificationPrefScalarFieldEnum | UserNotificationPrefScalarFieldEnum[]
  }

  /**
   * UserNotificationPref create
   */
  export type UserNotificationPrefCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNotificationPref.
     */
    data: XOR<UserNotificationPrefCreateInput, UserNotificationPrefUncheckedCreateInput>
  }

  /**
   * UserNotificationPref createMany
   */
  export type UserNotificationPrefCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNotificationPrefs.
     */
    data: UserNotificationPrefCreateManyInput | UserNotificationPrefCreateManyInput[]
  }

  /**
   * UserNotificationPref update
   */
  export type UserNotificationPrefUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNotificationPref.
     */
    data: XOR<UserNotificationPrefUpdateInput, UserNotificationPrefUncheckedUpdateInput>
    /**
     * Choose, which UserNotificationPref to update.
     */
    where: UserNotificationPrefWhereUniqueInput
  }

  /**
   * UserNotificationPref updateMany
   */
  export type UserNotificationPrefUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNotificationPrefs.
     */
    data: XOR<UserNotificationPrefUpdateManyMutationInput, UserNotificationPrefUncheckedUpdateManyInput>
    /**
     * Filter which UserNotificationPrefs to update
     */
    where?: UserNotificationPrefWhereInput
    /**
     * Limit how many UserNotificationPrefs to update.
     */
    limit?: number
  }

  /**
   * UserNotificationPref upsert
   */
  export type UserNotificationPrefUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNotificationPref to update in case it exists.
     */
    where: UserNotificationPrefWhereUniqueInput
    /**
     * In case the UserNotificationPref found by the `where` argument doesn't exist, create a new UserNotificationPref with this data.
     */
    create: XOR<UserNotificationPrefCreateInput, UserNotificationPrefUncheckedCreateInput>
    /**
     * In case the UserNotificationPref was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNotificationPrefUpdateInput, UserNotificationPrefUncheckedUpdateInput>
  }

  /**
   * UserNotificationPref delete
   */
  export type UserNotificationPrefDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
    /**
     * Filter which UserNotificationPref to delete.
     */
    where: UserNotificationPrefWhereUniqueInput
  }

  /**
   * UserNotificationPref deleteMany
   */
  export type UserNotificationPrefDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotificationPrefs to delete
     */
    where?: UserNotificationPrefWhereInput
    /**
     * Limit how many UserNotificationPrefs to delete.
     */
    limit?: number
  }

  /**
   * UserNotificationPref without action
   */
  export type UserNotificationPrefDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotificationPref
     */
    select?: UserNotificationPrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotificationPref
     */
    omit?: UserNotificationPrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationPrefInclude<ExtArgs> | null
  }


  /**
   * Model UserAppearancePref
   */

  export type AggregateUserAppearancePref = {
    _count: UserAppearancePrefCountAggregateOutputType | null
    _min: UserAppearancePrefMinAggregateOutputType | null
    _max: UserAppearancePrefMaxAggregateOutputType | null
  }

  export type UserAppearancePrefMinAggregateOutputType = {
    userId: string | null
    theme: string | null
    accentColor: string | null
    density: string | null
  }

  export type UserAppearancePrefMaxAggregateOutputType = {
    userId: string | null
    theme: string | null
    accentColor: string | null
    density: string | null
  }

  export type UserAppearancePrefCountAggregateOutputType = {
    userId: number
    theme: number
    accentColor: number
    density: number
    _all: number
  }


  export type UserAppearancePrefMinAggregateInputType = {
    userId?: true
    theme?: true
    accentColor?: true
    density?: true
  }

  export type UserAppearancePrefMaxAggregateInputType = {
    userId?: true
    theme?: true
    accentColor?: true
    density?: true
  }

  export type UserAppearancePrefCountAggregateInputType = {
    userId?: true
    theme?: true
    accentColor?: true
    density?: true
    _all?: true
  }

  export type UserAppearancePrefAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAppearancePref to aggregate.
     */
    where?: UserAppearancePrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppearancePrefs to fetch.
     */
    orderBy?: UserAppearancePrefOrderByWithRelationInput | UserAppearancePrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAppearancePrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppearancePrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppearancePrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAppearancePrefs
    **/
    _count?: true | UserAppearancePrefCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAppearancePrefMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAppearancePrefMaxAggregateInputType
  }

  export type GetUserAppearancePrefAggregateType<T extends UserAppearancePrefAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAppearancePref]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAppearancePref[P]>
      : GetScalarType<T[P], AggregateUserAppearancePref[P]>
  }




  export type UserAppearancePrefGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAppearancePrefWhereInput
    orderBy?: UserAppearancePrefOrderByWithAggregationInput | UserAppearancePrefOrderByWithAggregationInput[]
    by: UserAppearancePrefScalarFieldEnum[] | UserAppearancePrefScalarFieldEnum
    having?: UserAppearancePrefScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAppearancePrefCountAggregateInputType | true
    _min?: UserAppearancePrefMinAggregateInputType
    _max?: UserAppearancePrefMaxAggregateInputType
  }

  export type UserAppearancePrefGroupByOutputType = {
    userId: string
    theme: string
    accentColor: string
    density: string
    _count: UserAppearancePrefCountAggregateOutputType | null
    _min: UserAppearancePrefMinAggregateOutputType | null
    _max: UserAppearancePrefMaxAggregateOutputType | null
  }

  type GetUserAppearancePrefGroupByPayload<T extends UserAppearancePrefGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAppearancePrefGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAppearancePrefGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAppearancePrefGroupByOutputType[P]>
            : GetScalarType<T[P], UserAppearancePrefGroupByOutputType[P]>
        }
      >
    >


  export type UserAppearancePrefSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    theme?: boolean
    accentColor?: boolean
    density?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAppearancePref"]>



  export type UserAppearancePrefSelectScalar = {
    userId?: boolean
    theme?: boolean
    accentColor?: boolean
    density?: boolean
  }

  export type UserAppearancePrefOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "theme" | "accentColor" | "density", ExtArgs["result"]["userAppearancePref"]>
  export type UserAppearancePrefInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserAppearancePrefPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAppearancePref"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      theme: string
      accentColor: string
      density: string
    }, ExtArgs["result"]["userAppearancePref"]>
    composites: {}
  }

  type UserAppearancePrefGetPayload<S extends boolean | null | undefined | UserAppearancePrefDefaultArgs> = $Result.GetResult<Prisma.$UserAppearancePrefPayload, S>

  type UserAppearancePrefCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAppearancePrefFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAppearancePrefCountAggregateInputType | true
    }

  export interface UserAppearancePrefDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAppearancePref'], meta: { name: 'UserAppearancePref' } }
    /**
     * Find zero or one UserAppearancePref that matches the filter.
     * @param {UserAppearancePrefFindUniqueArgs} args - Arguments to find a UserAppearancePref
     * @example
     * // Get one UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAppearancePrefFindUniqueArgs>(args: SelectSubset<T, UserAppearancePrefFindUniqueArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAppearancePref that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAppearancePrefFindUniqueOrThrowArgs} args - Arguments to find a UserAppearancePref
     * @example
     * // Get one UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAppearancePrefFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAppearancePrefFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAppearancePref that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefFindFirstArgs} args - Arguments to find a UserAppearancePref
     * @example
     * // Get one UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAppearancePrefFindFirstArgs>(args?: SelectSubset<T, UserAppearancePrefFindFirstArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAppearancePref that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefFindFirstOrThrowArgs} args - Arguments to find a UserAppearancePref
     * @example
     * // Get one UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAppearancePrefFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAppearancePrefFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAppearancePrefs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAppearancePrefs
     * const userAppearancePrefs = await prisma.userAppearancePref.findMany()
     * 
     * // Get first 10 UserAppearancePrefs
     * const userAppearancePrefs = await prisma.userAppearancePref.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userAppearancePrefWithUserIdOnly = await prisma.userAppearancePref.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserAppearancePrefFindManyArgs>(args?: SelectSubset<T, UserAppearancePrefFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAppearancePref.
     * @param {UserAppearancePrefCreateArgs} args - Arguments to create a UserAppearancePref.
     * @example
     * // Create one UserAppearancePref
     * const UserAppearancePref = await prisma.userAppearancePref.create({
     *   data: {
     *     // ... data to create a UserAppearancePref
     *   }
     * })
     * 
     */
    create<T extends UserAppearancePrefCreateArgs>(args: SelectSubset<T, UserAppearancePrefCreateArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAppearancePrefs.
     * @param {UserAppearancePrefCreateManyArgs} args - Arguments to create many UserAppearancePrefs.
     * @example
     * // Create many UserAppearancePrefs
     * const userAppearancePref = await prisma.userAppearancePref.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAppearancePrefCreateManyArgs>(args?: SelectSubset<T, UserAppearancePrefCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserAppearancePref.
     * @param {UserAppearancePrefDeleteArgs} args - Arguments to delete one UserAppearancePref.
     * @example
     * // Delete one UserAppearancePref
     * const UserAppearancePref = await prisma.userAppearancePref.delete({
     *   where: {
     *     // ... filter to delete one UserAppearancePref
     *   }
     * })
     * 
     */
    delete<T extends UserAppearancePrefDeleteArgs>(args: SelectSubset<T, UserAppearancePrefDeleteArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAppearancePref.
     * @param {UserAppearancePrefUpdateArgs} args - Arguments to update one UserAppearancePref.
     * @example
     * // Update one UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAppearancePrefUpdateArgs>(args: SelectSubset<T, UserAppearancePrefUpdateArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAppearancePrefs.
     * @param {UserAppearancePrefDeleteManyArgs} args - Arguments to filter UserAppearancePrefs to delete.
     * @example
     * // Delete a few UserAppearancePrefs
     * const { count } = await prisma.userAppearancePref.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAppearancePrefDeleteManyArgs>(args?: SelectSubset<T, UserAppearancePrefDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAppearancePrefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAppearancePrefs
     * const userAppearancePref = await prisma.userAppearancePref.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAppearancePrefUpdateManyArgs>(args: SelectSubset<T, UserAppearancePrefUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAppearancePref.
     * @param {UserAppearancePrefUpsertArgs} args - Arguments to update or create a UserAppearancePref.
     * @example
     * // Update or create a UserAppearancePref
     * const userAppearancePref = await prisma.userAppearancePref.upsert({
     *   create: {
     *     // ... data to create a UserAppearancePref
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAppearancePref we want to update
     *   }
     * })
     */
    upsert<T extends UserAppearancePrefUpsertArgs>(args: SelectSubset<T, UserAppearancePrefUpsertArgs<ExtArgs>>): Prisma__UserAppearancePrefClient<$Result.GetResult<Prisma.$UserAppearancePrefPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAppearancePrefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefCountArgs} args - Arguments to filter UserAppearancePrefs to count.
     * @example
     * // Count the number of UserAppearancePrefs
     * const count = await prisma.userAppearancePref.count({
     *   where: {
     *     // ... the filter for the UserAppearancePrefs we want to count
     *   }
     * })
    **/
    count<T extends UserAppearancePrefCountArgs>(
      args?: Subset<T, UserAppearancePrefCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAppearancePrefCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAppearancePref.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAppearancePrefAggregateArgs>(args: Subset<T, UserAppearancePrefAggregateArgs>): Prisma.PrismaPromise<GetUserAppearancePrefAggregateType<T>>

    /**
     * Group by UserAppearancePref.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppearancePrefGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAppearancePrefGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAppearancePrefGroupByArgs['orderBy'] }
        : { orderBy?: UserAppearancePrefGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAppearancePrefGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAppearancePrefGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAppearancePref model
   */
  readonly fields: UserAppearancePrefFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAppearancePref.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAppearancePrefClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAppearancePref model
   */
  interface UserAppearancePrefFieldRefs {
    readonly userId: FieldRef<"UserAppearancePref", 'String'>
    readonly theme: FieldRef<"UserAppearancePref", 'String'>
    readonly accentColor: FieldRef<"UserAppearancePref", 'String'>
    readonly density: FieldRef<"UserAppearancePref", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAppearancePref findUnique
   */
  export type UserAppearancePrefFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter, which UserAppearancePref to fetch.
     */
    where: UserAppearancePrefWhereUniqueInput
  }

  /**
   * UserAppearancePref findUniqueOrThrow
   */
  export type UserAppearancePrefFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter, which UserAppearancePref to fetch.
     */
    where: UserAppearancePrefWhereUniqueInput
  }

  /**
   * UserAppearancePref findFirst
   */
  export type UserAppearancePrefFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter, which UserAppearancePref to fetch.
     */
    where?: UserAppearancePrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppearancePrefs to fetch.
     */
    orderBy?: UserAppearancePrefOrderByWithRelationInput | UserAppearancePrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAppearancePrefs.
     */
    cursor?: UserAppearancePrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppearancePrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppearancePrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAppearancePrefs.
     */
    distinct?: UserAppearancePrefScalarFieldEnum | UserAppearancePrefScalarFieldEnum[]
  }

  /**
   * UserAppearancePref findFirstOrThrow
   */
  export type UserAppearancePrefFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter, which UserAppearancePref to fetch.
     */
    where?: UserAppearancePrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppearancePrefs to fetch.
     */
    orderBy?: UserAppearancePrefOrderByWithRelationInput | UserAppearancePrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAppearancePrefs.
     */
    cursor?: UserAppearancePrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppearancePrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppearancePrefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAppearancePrefs.
     */
    distinct?: UserAppearancePrefScalarFieldEnum | UserAppearancePrefScalarFieldEnum[]
  }

  /**
   * UserAppearancePref findMany
   */
  export type UserAppearancePrefFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter, which UserAppearancePrefs to fetch.
     */
    where?: UserAppearancePrefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppearancePrefs to fetch.
     */
    orderBy?: UserAppearancePrefOrderByWithRelationInput | UserAppearancePrefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAppearancePrefs.
     */
    cursor?: UserAppearancePrefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppearancePrefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppearancePrefs.
     */
    skip?: number
    distinct?: UserAppearancePrefScalarFieldEnum | UserAppearancePrefScalarFieldEnum[]
  }

  /**
   * UserAppearancePref create
   */
  export type UserAppearancePrefCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAppearancePref.
     */
    data: XOR<UserAppearancePrefCreateInput, UserAppearancePrefUncheckedCreateInput>
  }

  /**
   * UserAppearancePref createMany
   */
  export type UserAppearancePrefCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAppearancePrefs.
     */
    data: UserAppearancePrefCreateManyInput | UserAppearancePrefCreateManyInput[]
  }

  /**
   * UserAppearancePref update
   */
  export type UserAppearancePrefUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAppearancePref.
     */
    data: XOR<UserAppearancePrefUpdateInput, UserAppearancePrefUncheckedUpdateInput>
    /**
     * Choose, which UserAppearancePref to update.
     */
    where: UserAppearancePrefWhereUniqueInput
  }

  /**
   * UserAppearancePref updateMany
   */
  export type UserAppearancePrefUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAppearancePrefs.
     */
    data: XOR<UserAppearancePrefUpdateManyMutationInput, UserAppearancePrefUncheckedUpdateManyInput>
    /**
     * Filter which UserAppearancePrefs to update
     */
    where?: UserAppearancePrefWhereInput
    /**
     * Limit how many UserAppearancePrefs to update.
     */
    limit?: number
  }

  /**
   * UserAppearancePref upsert
   */
  export type UserAppearancePrefUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAppearancePref to update in case it exists.
     */
    where: UserAppearancePrefWhereUniqueInput
    /**
     * In case the UserAppearancePref found by the `where` argument doesn't exist, create a new UserAppearancePref with this data.
     */
    create: XOR<UserAppearancePrefCreateInput, UserAppearancePrefUncheckedCreateInput>
    /**
     * In case the UserAppearancePref was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAppearancePrefUpdateInput, UserAppearancePrefUncheckedUpdateInput>
  }

  /**
   * UserAppearancePref delete
   */
  export type UserAppearancePrefDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
    /**
     * Filter which UserAppearancePref to delete.
     */
    where: UserAppearancePrefWhereUniqueInput
  }

  /**
   * UserAppearancePref deleteMany
   */
  export type UserAppearancePrefDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAppearancePrefs to delete
     */
    where?: UserAppearancePrefWhereInput
    /**
     * Limit how many UserAppearancePrefs to delete.
     */
    limit?: number
  }

  /**
   * UserAppearancePref without action
   */
  export type UserAppearancePrefDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppearancePref
     */
    select?: UserAppearancePrefSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppearancePref
     */
    omit?: UserAppearancePrefOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppearancePrefInclude<ExtArgs> | null
  }


  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsAvgAggregateOutputType = {
    id: number | null
    autoLogoutMinutes: number | null
  }

  export type SystemSettingsSumAggregateOutputType = {
    id: number | null
    autoLogoutMinutes: number | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: number | null
    systemName: string | null
    defaultLanguage: string | null
    dateFormat: string | null
    timeFormat: string | null
    timezone: string | null
    autoLogoutMinutes: number | null
    enableAuditLogging: boolean | null
    enableAnalytics: boolean | null
    updatedAt: Date | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: number | null
    systemName: string | null
    defaultLanguage: string | null
    dateFormat: string | null
    timeFormat: string | null
    timezone: string | null
    autoLogoutMinutes: number | null
    enableAuditLogging: boolean | null
    enableAnalytics: boolean | null
    updatedAt: Date | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    systemName: number
    defaultLanguage: number
    dateFormat: number
    timeFormat: number
    timezone: number
    autoLogoutMinutes: number
    enableAuditLogging: number
    enableAnalytics: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingsAvgAggregateInputType = {
    id?: true
    autoLogoutMinutes?: true
  }

  export type SystemSettingsSumAggregateInputType = {
    id?: true
    autoLogoutMinutes?: true
  }

  export type SystemSettingsMinAggregateInputType = {
    id?: true
    systemName?: true
    defaultLanguage?: true
    dateFormat?: true
    timeFormat?: true
    timezone?: true
    autoLogoutMinutes?: true
    enableAuditLogging?: true
    enableAnalytics?: true
    updatedAt?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    systemName?: true
    defaultLanguage?: true
    dateFormat?: true
    timeFormat?: true
    timezone?: true
    autoLogoutMinutes?: true
    enableAuditLogging?: true
    enableAnalytics?: true
    updatedAt?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    systemName?: true
    defaultLanguage?: true
    dateFormat?: true
    timeFormat?: true
    timezone?: true
    autoLogoutMinutes?: true
    enableAuditLogging?: true
    enableAnalytics?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _avg?: SystemSettingsAvgAggregateInputType
    _sum?: SystemSettingsSumAggregateInputType
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: number
    systemName: string
    defaultLanguage: string
    dateFormat: string
    timeFormat: string
    timezone: string
    autoLogoutMinutes: number
    enableAuditLogging: boolean
    enableAnalytics: boolean
    updatedAt: Date
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemName?: boolean
    defaultLanguage?: boolean
    dateFormat?: boolean
    timeFormat?: boolean
    timezone?: boolean
    autoLogoutMinutes?: boolean
    enableAuditLogging?: boolean
    enableAnalytics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>



  export type SystemSettingsSelectScalar = {
    id?: boolean
    systemName?: boolean
    defaultLanguage?: boolean
    dateFormat?: boolean
    timeFormat?: boolean
    timezone?: boolean
    autoLogoutMinutes?: boolean
    enableAuditLogging?: boolean
    enableAnalytics?: boolean
    updatedAt?: boolean
  }

  export type SystemSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "systemName" | "defaultLanguage" | "dateFormat" | "timeFormat" | "timezone" | "autoLogoutMinutes" | "enableAuditLogging" | "enableAnalytics" | "updatedAt", ExtArgs["result"]["systemSettings"]>

  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      systemName: string
      defaultLanguage: string
      dateFormat: string
      timeFormat: string
      timezone: string
      autoLogoutMinutes: number
      enableAuditLogging: boolean
      enableAnalytics: boolean
      updatedAt: Date
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'Int'>
    readonly systemName: FieldRef<"SystemSettings", 'String'>
    readonly defaultLanguage: FieldRef<"SystemSettings", 'String'>
    readonly dateFormat: FieldRef<"SystemSettings", 'String'>
    readonly timeFormat: FieldRef<"SystemSettings", 'String'>
    readonly timezone: FieldRef<"SystemSettings", 'String'>
    readonly autoLogoutMinutes: FieldRef<"SystemSettings", 'Int'>
    readonly enableAuditLogging: FieldRef<"SystemSettings", 'Boolean'>
    readonly enableAnalytics: FieldRef<"SystemSettings", 'Boolean'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
  }


  /**
   * Model IntegrationSMTP
   */

  export type AggregateIntegrationSMTP = {
    _count: IntegrationSMTPCountAggregateOutputType | null
    _avg: IntegrationSMTPAvgAggregateOutputType | null
    _sum: IntegrationSMTPSumAggregateOutputType | null
    _min: IntegrationSMTPMinAggregateOutputType | null
    _max: IntegrationSMTPMaxAggregateOutputType | null
  }

  export type IntegrationSMTPAvgAggregateOutputType = {
    id: number | null
    port: number | null
  }

  export type IntegrationSMTPSumAggregateOutputType = {
    id: number | null
    port: number | null
  }

  export type IntegrationSMTPMinAggregateOutputType = {
    id: number | null
    server: string | null
    port: number | null
    username: string | null
    passwordEnc: string | null
    useTls: boolean | null
    lastTestedAt: Date | null
  }

  export type IntegrationSMTPMaxAggregateOutputType = {
    id: number | null
    server: string | null
    port: number | null
    username: string | null
    passwordEnc: string | null
    useTls: boolean | null
    lastTestedAt: Date | null
  }

  export type IntegrationSMTPCountAggregateOutputType = {
    id: number
    server: number
    port: number
    username: number
    passwordEnc: number
    useTls: number
    lastTestedAt: number
    _all: number
  }


  export type IntegrationSMTPAvgAggregateInputType = {
    id?: true
    port?: true
  }

  export type IntegrationSMTPSumAggregateInputType = {
    id?: true
    port?: true
  }

  export type IntegrationSMTPMinAggregateInputType = {
    id?: true
    server?: true
    port?: true
    username?: true
    passwordEnc?: true
    useTls?: true
    lastTestedAt?: true
  }

  export type IntegrationSMTPMaxAggregateInputType = {
    id?: true
    server?: true
    port?: true
    username?: true
    passwordEnc?: true
    useTls?: true
    lastTestedAt?: true
  }

  export type IntegrationSMTPCountAggregateInputType = {
    id?: true
    server?: true
    port?: true
    username?: true
    passwordEnc?: true
    useTls?: true
    lastTestedAt?: true
    _all?: true
  }

  export type IntegrationSMTPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSMTP to aggregate.
     */
    where?: IntegrationSMTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSMTPS to fetch.
     */
    orderBy?: IntegrationSMTPOrderByWithRelationInput | IntegrationSMTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationSMTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSMTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSMTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationSMTPS
    **/
    _count?: true | IntegrationSMTPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationSMTPAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationSMTPSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationSMTPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationSMTPMaxAggregateInputType
  }

  export type GetIntegrationSMTPAggregateType<T extends IntegrationSMTPAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationSMTP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationSMTP[P]>
      : GetScalarType<T[P], AggregateIntegrationSMTP[P]>
  }




  export type IntegrationSMTPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationSMTPWhereInput
    orderBy?: IntegrationSMTPOrderByWithAggregationInput | IntegrationSMTPOrderByWithAggregationInput[]
    by: IntegrationSMTPScalarFieldEnum[] | IntegrationSMTPScalarFieldEnum
    having?: IntegrationSMTPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationSMTPCountAggregateInputType | true
    _avg?: IntegrationSMTPAvgAggregateInputType
    _sum?: IntegrationSMTPSumAggregateInputType
    _min?: IntegrationSMTPMinAggregateInputType
    _max?: IntegrationSMTPMaxAggregateInputType
  }

  export type IntegrationSMTPGroupByOutputType = {
    id: number
    server: string
    port: number
    username: string
    passwordEnc: string
    useTls: boolean
    lastTestedAt: Date | null
    _count: IntegrationSMTPCountAggregateOutputType | null
    _avg: IntegrationSMTPAvgAggregateOutputType | null
    _sum: IntegrationSMTPSumAggregateOutputType | null
    _min: IntegrationSMTPMinAggregateOutputType | null
    _max: IntegrationSMTPMaxAggregateOutputType | null
  }

  type GetIntegrationSMTPGroupByPayload<T extends IntegrationSMTPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationSMTPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationSMTPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationSMTPGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationSMTPGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSMTPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    server?: boolean
    port?: boolean
    username?: boolean
    passwordEnc?: boolean
    useTls?: boolean
    lastTestedAt?: boolean
  }, ExtArgs["result"]["integrationSMTP"]>



  export type IntegrationSMTPSelectScalar = {
    id?: boolean
    server?: boolean
    port?: boolean
    username?: boolean
    passwordEnc?: boolean
    useTls?: boolean
    lastTestedAt?: boolean
  }

  export type IntegrationSMTPOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "server" | "port" | "username" | "passwordEnc" | "useTls" | "lastTestedAt", ExtArgs["result"]["integrationSMTP"]>

  export type $IntegrationSMTPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationSMTP"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      server: string
      port: number
      username: string
      passwordEnc: string
      useTls: boolean
      lastTestedAt: Date | null
    }, ExtArgs["result"]["integrationSMTP"]>
    composites: {}
  }

  type IntegrationSMTPGetPayload<S extends boolean | null | undefined | IntegrationSMTPDefaultArgs> = $Result.GetResult<Prisma.$IntegrationSMTPPayload, S>

  type IntegrationSMTPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntegrationSMTPFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntegrationSMTPCountAggregateInputType | true
    }

  export interface IntegrationSMTPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationSMTP'], meta: { name: 'IntegrationSMTP' } }
    /**
     * Find zero or one IntegrationSMTP that matches the filter.
     * @param {IntegrationSMTPFindUniqueArgs} args - Arguments to find a IntegrationSMTP
     * @example
     * // Get one IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationSMTPFindUniqueArgs>(args: SelectSubset<T, IntegrationSMTPFindUniqueArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IntegrationSMTP that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntegrationSMTPFindUniqueOrThrowArgs} args - Arguments to find a IntegrationSMTP
     * @example
     * // Get one IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationSMTPFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationSMTPFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationSMTP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPFindFirstArgs} args - Arguments to find a IntegrationSMTP
     * @example
     * // Get one IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationSMTPFindFirstArgs>(args?: SelectSubset<T, IntegrationSMTPFindFirstArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationSMTP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPFindFirstOrThrowArgs} args - Arguments to find a IntegrationSMTP
     * @example
     * // Get one IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationSMTPFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationSMTPFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IntegrationSMTPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationSMTPS
     * const integrationSMTPS = await prisma.integrationSMTP.findMany()
     * 
     * // Get first 10 IntegrationSMTPS
     * const integrationSMTPS = await prisma.integrationSMTP.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationSMTPWithIdOnly = await prisma.integrationSMTP.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationSMTPFindManyArgs>(args?: SelectSubset<T, IntegrationSMTPFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IntegrationSMTP.
     * @param {IntegrationSMTPCreateArgs} args - Arguments to create a IntegrationSMTP.
     * @example
     * // Create one IntegrationSMTP
     * const IntegrationSMTP = await prisma.integrationSMTP.create({
     *   data: {
     *     // ... data to create a IntegrationSMTP
     *   }
     * })
     * 
     */
    create<T extends IntegrationSMTPCreateArgs>(args: SelectSubset<T, IntegrationSMTPCreateArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IntegrationSMTPS.
     * @param {IntegrationSMTPCreateManyArgs} args - Arguments to create many IntegrationSMTPS.
     * @example
     * // Create many IntegrationSMTPS
     * const integrationSMTP = await prisma.integrationSMTP.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationSMTPCreateManyArgs>(args?: SelectSubset<T, IntegrationSMTPCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a IntegrationSMTP.
     * @param {IntegrationSMTPDeleteArgs} args - Arguments to delete one IntegrationSMTP.
     * @example
     * // Delete one IntegrationSMTP
     * const IntegrationSMTP = await prisma.integrationSMTP.delete({
     *   where: {
     *     // ... filter to delete one IntegrationSMTP
     *   }
     * })
     * 
     */
    delete<T extends IntegrationSMTPDeleteArgs>(args: SelectSubset<T, IntegrationSMTPDeleteArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IntegrationSMTP.
     * @param {IntegrationSMTPUpdateArgs} args - Arguments to update one IntegrationSMTP.
     * @example
     * // Update one IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationSMTPUpdateArgs>(args: SelectSubset<T, IntegrationSMTPUpdateArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IntegrationSMTPS.
     * @param {IntegrationSMTPDeleteManyArgs} args - Arguments to filter IntegrationSMTPS to delete.
     * @example
     * // Delete a few IntegrationSMTPS
     * const { count } = await prisma.integrationSMTP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationSMTPDeleteManyArgs>(args?: SelectSubset<T, IntegrationSMTPDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationSMTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationSMTPS
     * const integrationSMTP = await prisma.integrationSMTP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationSMTPUpdateManyArgs>(args: SelectSubset<T, IntegrationSMTPUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IntegrationSMTP.
     * @param {IntegrationSMTPUpsertArgs} args - Arguments to update or create a IntegrationSMTP.
     * @example
     * // Update or create a IntegrationSMTP
     * const integrationSMTP = await prisma.integrationSMTP.upsert({
     *   create: {
     *     // ... data to create a IntegrationSMTP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationSMTP we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationSMTPUpsertArgs>(args: SelectSubset<T, IntegrationSMTPUpsertArgs<ExtArgs>>): Prisma__IntegrationSMTPClient<$Result.GetResult<Prisma.$IntegrationSMTPPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IntegrationSMTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPCountArgs} args - Arguments to filter IntegrationSMTPS to count.
     * @example
     * // Count the number of IntegrationSMTPS
     * const count = await prisma.integrationSMTP.count({
     *   where: {
     *     // ... the filter for the IntegrationSMTPS we want to count
     *   }
     * })
    **/
    count<T extends IntegrationSMTPCountArgs>(
      args?: Subset<T, IntegrationSMTPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationSMTPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationSMTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationSMTPAggregateArgs>(args: Subset<T, IntegrationSMTPAggregateArgs>): Prisma.PrismaPromise<GetIntegrationSMTPAggregateType<T>>

    /**
     * Group by IntegrationSMTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSMTPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationSMTPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationSMTPGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationSMTPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationSMTPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationSMTPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationSMTP model
   */
  readonly fields: IntegrationSMTPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationSMTP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationSMTPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationSMTP model
   */
  interface IntegrationSMTPFieldRefs {
    readonly id: FieldRef<"IntegrationSMTP", 'Int'>
    readonly server: FieldRef<"IntegrationSMTP", 'String'>
    readonly port: FieldRef<"IntegrationSMTP", 'Int'>
    readonly username: FieldRef<"IntegrationSMTP", 'String'>
    readonly passwordEnc: FieldRef<"IntegrationSMTP", 'String'>
    readonly useTls: FieldRef<"IntegrationSMTP", 'Boolean'>
    readonly lastTestedAt: FieldRef<"IntegrationSMTP", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationSMTP findUnique
   */
  export type IntegrationSMTPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter, which IntegrationSMTP to fetch.
     */
    where: IntegrationSMTPWhereUniqueInput
  }

  /**
   * IntegrationSMTP findUniqueOrThrow
   */
  export type IntegrationSMTPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter, which IntegrationSMTP to fetch.
     */
    where: IntegrationSMTPWhereUniqueInput
  }

  /**
   * IntegrationSMTP findFirst
   */
  export type IntegrationSMTPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter, which IntegrationSMTP to fetch.
     */
    where?: IntegrationSMTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSMTPS to fetch.
     */
    orderBy?: IntegrationSMTPOrderByWithRelationInput | IntegrationSMTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSMTPS.
     */
    cursor?: IntegrationSMTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSMTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSMTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSMTPS.
     */
    distinct?: IntegrationSMTPScalarFieldEnum | IntegrationSMTPScalarFieldEnum[]
  }

  /**
   * IntegrationSMTP findFirstOrThrow
   */
  export type IntegrationSMTPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter, which IntegrationSMTP to fetch.
     */
    where?: IntegrationSMTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSMTPS to fetch.
     */
    orderBy?: IntegrationSMTPOrderByWithRelationInput | IntegrationSMTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSMTPS.
     */
    cursor?: IntegrationSMTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSMTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSMTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSMTPS.
     */
    distinct?: IntegrationSMTPScalarFieldEnum | IntegrationSMTPScalarFieldEnum[]
  }

  /**
   * IntegrationSMTP findMany
   */
  export type IntegrationSMTPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter, which IntegrationSMTPS to fetch.
     */
    where?: IntegrationSMTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSMTPS to fetch.
     */
    orderBy?: IntegrationSMTPOrderByWithRelationInput | IntegrationSMTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationSMTPS.
     */
    cursor?: IntegrationSMTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSMTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSMTPS.
     */
    skip?: number
    distinct?: IntegrationSMTPScalarFieldEnum | IntegrationSMTPScalarFieldEnum[]
  }

  /**
   * IntegrationSMTP create
   */
  export type IntegrationSMTPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * The data needed to create a IntegrationSMTP.
     */
    data: XOR<IntegrationSMTPCreateInput, IntegrationSMTPUncheckedCreateInput>
  }

  /**
   * IntegrationSMTP createMany
   */
  export type IntegrationSMTPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationSMTPS.
     */
    data: IntegrationSMTPCreateManyInput | IntegrationSMTPCreateManyInput[]
  }

  /**
   * IntegrationSMTP update
   */
  export type IntegrationSMTPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * The data needed to update a IntegrationSMTP.
     */
    data: XOR<IntegrationSMTPUpdateInput, IntegrationSMTPUncheckedUpdateInput>
    /**
     * Choose, which IntegrationSMTP to update.
     */
    where: IntegrationSMTPWhereUniqueInput
  }

  /**
   * IntegrationSMTP updateMany
   */
  export type IntegrationSMTPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationSMTPS.
     */
    data: XOR<IntegrationSMTPUpdateManyMutationInput, IntegrationSMTPUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationSMTPS to update
     */
    where?: IntegrationSMTPWhereInput
    /**
     * Limit how many IntegrationSMTPS to update.
     */
    limit?: number
  }

  /**
   * IntegrationSMTP upsert
   */
  export type IntegrationSMTPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * The filter to search for the IntegrationSMTP to update in case it exists.
     */
    where: IntegrationSMTPWhereUniqueInput
    /**
     * In case the IntegrationSMTP found by the `where` argument doesn't exist, create a new IntegrationSMTP with this data.
     */
    create: XOR<IntegrationSMTPCreateInput, IntegrationSMTPUncheckedCreateInput>
    /**
     * In case the IntegrationSMTP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationSMTPUpdateInput, IntegrationSMTPUncheckedUpdateInput>
  }

  /**
   * IntegrationSMTP delete
   */
  export type IntegrationSMTPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
    /**
     * Filter which IntegrationSMTP to delete.
     */
    where: IntegrationSMTPWhereUniqueInput
  }

  /**
   * IntegrationSMTP deleteMany
   */
  export type IntegrationSMTPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSMTPS to delete
     */
    where?: IntegrationSMTPWhereInput
    /**
     * Limit how many IntegrationSMTPS to delete.
     */
    limit?: number
  }

  /**
   * IntegrationSMTP without action
   */
  export type IntegrationSMTPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSMTP
     */
    select?: IntegrationSMTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationSMTP
     */
    omit?: IntegrationSMTPOmit<ExtArgs> | null
  }


  /**
   * Model ExternalIntegration
   */

  export type AggregateExternalIntegration = {
    _count: ExternalIntegrationCountAggregateOutputType | null
    _min: ExternalIntegrationMinAggregateOutputType | null
    _max: ExternalIntegrationMaxAggregateOutputType | null
  }

  export type ExternalIntegrationMinAggregateOutputType = {
    id: string | null
    type: string | null
    displayName: string | null
    active: boolean | null
    configJson: string | null
    lastSyncedAt: Date | null
    status: string | null
  }

  export type ExternalIntegrationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    displayName: string | null
    active: boolean | null
    configJson: string | null
    lastSyncedAt: Date | null
    status: string | null
  }

  export type ExternalIntegrationCountAggregateOutputType = {
    id: number
    type: number
    displayName: number
    active: number
    configJson: number
    lastSyncedAt: number
    status: number
    _all: number
  }


  export type ExternalIntegrationMinAggregateInputType = {
    id?: true
    type?: true
    displayName?: true
    active?: true
    configJson?: true
    lastSyncedAt?: true
    status?: true
  }

  export type ExternalIntegrationMaxAggregateInputType = {
    id?: true
    type?: true
    displayName?: true
    active?: true
    configJson?: true
    lastSyncedAt?: true
    status?: true
  }

  export type ExternalIntegrationCountAggregateInputType = {
    id?: true
    type?: true
    displayName?: true
    active?: true
    configJson?: true
    lastSyncedAt?: true
    status?: true
    _all?: true
  }

  export type ExternalIntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExternalIntegration to aggregate.
     */
    where?: ExternalIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalIntegrations to fetch.
     */
    orderBy?: ExternalIntegrationOrderByWithRelationInput | ExternalIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExternalIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExternalIntegrations
    **/
    _count?: true | ExternalIntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExternalIntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExternalIntegrationMaxAggregateInputType
  }

  export type GetExternalIntegrationAggregateType<T extends ExternalIntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateExternalIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExternalIntegration[P]>
      : GetScalarType<T[P], AggregateExternalIntegration[P]>
  }




  export type ExternalIntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExternalIntegrationWhereInput
    orderBy?: ExternalIntegrationOrderByWithAggregationInput | ExternalIntegrationOrderByWithAggregationInput[]
    by: ExternalIntegrationScalarFieldEnum[] | ExternalIntegrationScalarFieldEnum
    having?: ExternalIntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExternalIntegrationCountAggregateInputType | true
    _min?: ExternalIntegrationMinAggregateInputType
    _max?: ExternalIntegrationMaxAggregateInputType
  }

  export type ExternalIntegrationGroupByOutputType = {
    id: string
    type: string
    displayName: string
    active: boolean
    configJson: string
    lastSyncedAt: Date | null
    status: string
    _count: ExternalIntegrationCountAggregateOutputType | null
    _min: ExternalIntegrationMinAggregateOutputType | null
    _max: ExternalIntegrationMaxAggregateOutputType | null
  }

  type GetExternalIntegrationGroupByPayload<T extends ExternalIntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExternalIntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExternalIntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExternalIntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], ExternalIntegrationGroupByOutputType[P]>
        }
      >
    >


  export type ExternalIntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    displayName?: boolean
    active?: boolean
    configJson?: boolean
    lastSyncedAt?: boolean
    status?: boolean
    webhook?: boolean | ExternalIntegration$webhookArgs<ExtArgs>
  }, ExtArgs["result"]["externalIntegration"]>



  export type ExternalIntegrationSelectScalar = {
    id?: boolean
    type?: boolean
    displayName?: boolean
    active?: boolean
    configJson?: boolean
    lastSyncedAt?: boolean
    status?: boolean
  }

  export type ExternalIntegrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "displayName" | "active" | "configJson" | "lastSyncedAt" | "status", ExtArgs["result"]["externalIntegration"]>
  export type ExternalIntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    webhook?: boolean | ExternalIntegration$webhookArgs<ExtArgs>
  }

  export type $ExternalIntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExternalIntegration"
    objects: {
      webhook: Prisma.$WebhookConfigPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      displayName: string
      active: boolean
      configJson: string
      lastSyncedAt: Date | null
      status: string
    }, ExtArgs["result"]["externalIntegration"]>
    composites: {}
  }

  type ExternalIntegrationGetPayload<S extends boolean | null | undefined | ExternalIntegrationDefaultArgs> = $Result.GetResult<Prisma.$ExternalIntegrationPayload, S>

  type ExternalIntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExternalIntegrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExternalIntegrationCountAggregateInputType | true
    }

  export interface ExternalIntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExternalIntegration'], meta: { name: 'ExternalIntegration' } }
    /**
     * Find zero or one ExternalIntegration that matches the filter.
     * @param {ExternalIntegrationFindUniqueArgs} args - Arguments to find a ExternalIntegration
     * @example
     * // Get one ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExternalIntegrationFindUniqueArgs>(args: SelectSubset<T, ExternalIntegrationFindUniqueArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExternalIntegration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExternalIntegrationFindUniqueOrThrowArgs} args - Arguments to find a ExternalIntegration
     * @example
     * // Get one ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExternalIntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, ExternalIntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExternalIntegration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationFindFirstArgs} args - Arguments to find a ExternalIntegration
     * @example
     * // Get one ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExternalIntegrationFindFirstArgs>(args?: SelectSubset<T, ExternalIntegrationFindFirstArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExternalIntegration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationFindFirstOrThrowArgs} args - Arguments to find a ExternalIntegration
     * @example
     * // Get one ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExternalIntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, ExternalIntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExternalIntegrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExternalIntegrations
     * const externalIntegrations = await prisma.externalIntegration.findMany()
     * 
     * // Get first 10 ExternalIntegrations
     * const externalIntegrations = await prisma.externalIntegration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const externalIntegrationWithIdOnly = await prisma.externalIntegration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExternalIntegrationFindManyArgs>(args?: SelectSubset<T, ExternalIntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExternalIntegration.
     * @param {ExternalIntegrationCreateArgs} args - Arguments to create a ExternalIntegration.
     * @example
     * // Create one ExternalIntegration
     * const ExternalIntegration = await prisma.externalIntegration.create({
     *   data: {
     *     // ... data to create a ExternalIntegration
     *   }
     * })
     * 
     */
    create<T extends ExternalIntegrationCreateArgs>(args: SelectSubset<T, ExternalIntegrationCreateArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExternalIntegrations.
     * @param {ExternalIntegrationCreateManyArgs} args - Arguments to create many ExternalIntegrations.
     * @example
     * // Create many ExternalIntegrations
     * const externalIntegration = await prisma.externalIntegration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExternalIntegrationCreateManyArgs>(args?: SelectSubset<T, ExternalIntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExternalIntegration.
     * @param {ExternalIntegrationDeleteArgs} args - Arguments to delete one ExternalIntegration.
     * @example
     * // Delete one ExternalIntegration
     * const ExternalIntegration = await prisma.externalIntegration.delete({
     *   where: {
     *     // ... filter to delete one ExternalIntegration
     *   }
     * })
     * 
     */
    delete<T extends ExternalIntegrationDeleteArgs>(args: SelectSubset<T, ExternalIntegrationDeleteArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExternalIntegration.
     * @param {ExternalIntegrationUpdateArgs} args - Arguments to update one ExternalIntegration.
     * @example
     * // Update one ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExternalIntegrationUpdateArgs>(args: SelectSubset<T, ExternalIntegrationUpdateArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExternalIntegrations.
     * @param {ExternalIntegrationDeleteManyArgs} args - Arguments to filter ExternalIntegrations to delete.
     * @example
     * // Delete a few ExternalIntegrations
     * const { count } = await prisma.externalIntegration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExternalIntegrationDeleteManyArgs>(args?: SelectSubset<T, ExternalIntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExternalIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExternalIntegrations
     * const externalIntegration = await prisma.externalIntegration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExternalIntegrationUpdateManyArgs>(args: SelectSubset<T, ExternalIntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExternalIntegration.
     * @param {ExternalIntegrationUpsertArgs} args - Arguments to update or create a ExternalIntegration.
     * @example
     * // Update or create a ExternalIntegration
     * const externalIntegration = await prisma.externalIntegration.upsert({
     *   create: {
     *     // ... data to create a ExternalIntegration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExternalIntegration we want to update
     *   }
     * })
     */
    upsert<T extends ExternalIntegrationUpsertArgs>(args: SelectSubset<T, ExternalIntegrationUpsertArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExternalIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationCountArgs} args - Arguments to filter ExternalIntegrations to count.
     * @example
     * // Count the number of ExternalIntegrations
     * const count = await prisma.externalIntegration.count({
     *   where: {
     *     // ... the filter for the ExternalIntegrations we want to count
     *   }
     * })
    **/
    count<T extends ExternalIntegrationCountArgs>(
      args?: Subset<T, ExternalIntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExternalIntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExternalIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExternalIntegrationAggregateArgs>(args: Subset<T, ExternalIntegrationAggregateArgs>): Prisma.PrismaPromise<GetExternalIntegrationAggregateType<T>>

    /**
     * Group by ExternalIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalIntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExternalIntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExternalIntegrationGroupByArgs['orderBy'] }
        : { orderBy?: ExternalIntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExternalIntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExternalIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExternalIntegration model
   */
  readonly fields: ExternalIntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExternalIntegration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExternalIntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    webhook<T extends ExternalIntegration$webhookArgs<ExtArgs> = {}>(args?: Subset<T, ExternalIntegration$webhookArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExternalIntegration model
   */
  interface ExternalIntegrationFieldRefs {
    readonly id: FieldRef<"ExternalIntegration", 'String'>
    readonly type: FieldRef<"ExternalIntegration", 'String'>
    readonly displayName: FieldRef<"ExternalIntegration", 'String'>
    readonly active: FieldRef<"ExternalIntegration", 'Boolean'>
    readonly configJson: FieldRef<"ExternalIntegration", 'String'>
    readonly lastSyncedAt: FieldRef<"ExternalIntegration", 'DateTime'>
    readonly status: FieldRef<"ExternalIntegration", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExternalIntegration findUnique
   */
  export type ExternalIntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which ExternalIntegration to fetch.
     */
    where: ExternalIntegrationWhereUniqueInput
  }

  /**
   * ExternalIntegration findUniqueOrThrow
   */
  export type ExternalIntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which ExternalIntegration to fetch.
     */
    where: ExternalIntegrationWhereUniqueInput
  }

  /**
   * ExternalIntegration findFirst
   */
  export type ExternalIntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which ExternalIntegration to fetch.
     */
    where?: ExternalIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalIntegrations to fetch.
     */
    orderBy?: ExternalIntegrationOrderByWithRelationInput | ExternalIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExternalIntegrations.
     */
    cursor?: ExternalIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExternalIntegrations.
     */
    distinct?: ExternalIntegrationScalarFieldEnum | ExternalIntegrationScalarFieldEnum[]
  }

  /**
   * ExternalIntegration findFirstOrThrow
   */
  export type ExternalIntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which ExternalIntegration to fetch.
     */
    where?: ExternalIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalIntegrations to fetch.
     */
    orderBy?: ExternalIntegrationOrderByWithRelationInput | ExternalIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExternalIntegrations.
     */
    cursor?: ExternalIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExternalIntegrations.
     */
    distinct?: ExternalIntegrationScalarFieldEnum | ExternalIntegrationScalarFieldEnum[]
  }

  /**
   * ExternalIntegration findMany
   */
  export type ExternalIntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which ExternalIntegrations to fetch.
     */
    where?: ExternalIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalIntegrations to fetch.
     */
    orderBy?: ExternalIntegrationOrderByWithRelationInput | ExternalIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExternalIntegrations.
     */
    cursor?: ExternalIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalIntegrations.
     */
    skip?: number
    distinct?: ExternalIntegrationScalarFieldEnum | ExternalIntegrationScalarFieldEnum[]
  }

  /**
   * ExternalIntegration create
   */
  export type ExternalIntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a ExternalIntegration.
     */
    data: XOR<ExternalIntegrationCreateInput, ExternalIntegrationUncheckedCreateInput>
  }

  /**
   * ExternalIntegration createMany
   */
  export type ExternalIntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExternalIntegrations.
     */
    data: ExternalIntegrationCreateManyInput | ExternalIntegrationCreateManyInput[]
  }

  /**
   * ExternalIntegration update
   */
  export type ExternalIntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a ExternalIntegration.
     */
    data: XOR<ExternalIntegrationUpdateInput, ExternalIntegrationUncheckedUpdateInput>
    /**
     * Choose, which ExternalIntegration to update.
     */
    where: ExternalIntegrationWhereUniqueInput
  }

  /**
   * ExternalIntegration updateMany
   */
  export type ExternalIntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExternalIntegrations.
     */
    data: XOR<ExternalIntegrationUpdateManyMutationInput, ExternalIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which ExternalIntegrations to update
     */
    where?: ExternalIntegrationWhereInput
    /**
     * Limit how many ExternalIntegrations to update.
     */
    limit?: number
  }

  /**
   * ExternalIntegration upsert
   */
  export type ExternalIntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the ExternalIntegration to update in case it exists.
     */
    where: ExternalIntegrationWhereUniqueInput
    /**
     * In case the ExternalIntegration found by the `where` argument doesn't exist, create a new ExternalIntegration with this data.
     */
    create: XOR<ExternalIntegrationCreateInput, ExternalIntegrationUncheckedCreateInput>
    /**
     * In case the ExternalIntegration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExternalIntegrationUpdateInput, ExternalIntegrationUncheckedUpdateInput>
  }

  /**
   * ExternalIntegration delete
   */
  export type ExternalIntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
    /**
     * Filter which ExternalIntegration to delete.
     */
    where: ExternalIntegrationWhereUniqueInput
  }

  /**
   * ExternalIntegration deleteMany
   */
  export type ExternalIntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExternalIntegrations to delete
     */
    where?: ExternalIntegrationWhereInput
    /**
     * Limit how many ExternalIntegrations to delete.
     */
    limit?: number
  }

  /**
   * ExternalIntegration.webhook
   */
  export type ExternalIntegration$webhookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    where?: WebhookConfigWhereInput
  }

  /**
   * ExternalIntegration without action
   */
  export type ExternalIntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalIntegration
     */
    select?: ExternalIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalIntegration
     */
    omit?: ExternalIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExternalIntegrationInclude<ExtArgs> | null
  }


  /**
   * Model WebhookConfig
   */

  export type AggregateWebhookConfig = {
    _count: WebhookConfigCountAggregateOutputType | null
    _min: WebhookConfigMinAggregateOutputType | null
    _max: WebhookConfigMaxAggregateOutputType | null
  }

  export type WebhookConfigMinAggregateOutputType = {
    integrationId: string | null
    url: string | null
    secret: string | null
    eventCreated: boolean | null
    eventApproved: boolean | null
    eventUpdated: boolean | null
    eventRejected: boolean | null
  }

  export type WebhookConfigMaxAggregateOutputType = {
    integrationId: string | null
    url: string | null
    secret: string | null
    eventCreated: boolean | null
    eventApproved: boolean | null
    eventUpdated: boolean | null
    eventRejected: boolean | null
  }

  export type WebhookConfigCountAggregateOutputType = {
    integrationId: number
    url: number
    secret: number
    eventCreated: number
    eventApproved: number
    eventUpdated: number
    eventRejected: number
    _all: number
  }


  export type WebhookConfigMinAggregateInputType = {
    integrationId?: true
    url?: true
    secret?: true
    eventCreated?: true
    eventApproved?: true
    eventUpdated?: true
    eventRejected?: true
  }

  export type WebhookConfigMaxAggregateInputType = {
    integrationId?: true
    url?: true
    secret?: true
    eventCreated?: true
    eventApproved?: true
    eventUpdated?: true
    eventRejected?: true
  }

  export type WebhookConfigCountAggregateInputType = {
    integrationId?: true
    url?: true
    secret?: true
    eventCreated?: true
    eventApproved?: true
    eventUpdated?: true
    eventRejected?: true
    _all?: true
  }

  export type WebhookConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookConfig to aggregate.
     */
    where?: WebhookConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookConfigs to fetch.
     */
    orderBy?: WebhookConfigOrderByWithRelationInput | WebhookConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookConfigs
    **/
    _count?: true | WebhookConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookConfigMaxAggregateInputType
  }

  export type GetWebhookConfigAggregateType<T extends WebhookConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookConfig[P]>
      : GetScalarType<T[P], AggregateWebhookConfig[P]>
  }




  export type WebhookConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookConfigWhereInput
    orderBy?: WebhookConfigOrderByWithAggregationInput | WebhookConfigOrderByWithAggregationInput[]
    by: WebhookConfigScalarFieldEnum[] | WebhookConfigScalarFieldEnum
    having?: WebhookConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookConfigCountAggregateInputType | true
    _min?: WebhookConfigMinAggregateInputType
    _max?: WebhookConfigMaxAggregateInputType
  }

  export type WebhookConfigGroupByOutputType = {
    integrationId: string
    url: string
    secret: string
    eventCreated: boolean
    eventApproved: boolean
    eventUpdated: boolean
    eventRejected: boolean
    _count: WebhookConfigCountAggregateOutputType | null
    _min: WebhookConfigMinAggregateOutputType | null
    _max: WebhookConfigMaxAggregateOutputType | null
  }

  type GetWebhookConfigGroupByPayload<T extends WebhookConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookConfigGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookConfigGroupByOutputType[P]>
        }
      >
    >


  export type WebhookConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    integrationId?: boolean
    url?: boolean
    secret?: boolean
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
    integration?: boolean | ExternalIntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhookConfig"]>



  export type WebhookConfigSelectScalar = {
    integrationId?: boolean
    url?: boolean
    secret?: boolean
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
  }

  export type WebhookConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"integrationId" | "url" | "secret" | "eventCreated" | "eventApproved" | "eventUpdated" | "eventRejected", ExtArgs["result"]["webhookConfig"]>
  export type WebhookConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | ExternalIntegrationDefaultArgs<ExtArgs>
  }

  export type $WebhookConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookConfig"
    objects: {
      integration: Prisma.$ExternalIntegrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      integrationId: string
      url: string
      secret: string
      eventCreated: boolean
      eventApproved: boolean
      eventUpdated: boolean
      eventRejected: boolean
    }, ExtArgs["result"]["webhookConfig"]>
    composites: {}
  }

  type WebhookConfigGetPayload<S extends boolean | null | undefined | WebhookConfigDefaultArgs> = $Result.GetResult<Prisma.$WebhookConfigPayload, S>

  type WebhookConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebhookConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebhookConfigCountAggregateInputType | true
    }

  export interface WebhookConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookConfig'], meta: { name: 'WebhookConfig' } }
    /**
     * Find zero or one WebhookConfig that matches the filter.
     * @param {WebhookConfigFindUniqueArgs} args - Arguments to find a WebhookConfig
     * @example
     * // Get one WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookConfigFindUniqueArgs>(args: SelectSubset<T, WebhookConfigFindUniqueArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebhookConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebhookConfigFindUniqueOrThrowArgs} args - Arguments to find a WebhookConfig
     * @example
     * // Get one WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigFindFirstArgs} args - Arguments to find a WebhookConfig
     * @example
     * // Get one WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookConfigFindFirstArgs>(args?: SelectSubset<T, WebhookConfigFindFirstArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigFindFirstOrThrowArgs} args - Arguments to find a WebhookConfig
     * @example
     * // Get one WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebhookConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookConfigs
     * const webhookConfigs = await prisma.webhookConfig.findMany()
     * 
     * // Get first 10 WebhookConfigs
     * const webhookConfigs = await prisma.webhookConfig.findMany({ take: 10 })
     * 
     * // Only select the `integrationId`
     * const webhookConfigWithIntegrationIdOnly = await prisma.webhookConfig.findMany({ select: { integrationId: true } })
     * 
     */
    findMany<T extends WebhookConfigFindManyArgs>(args?: SelectSubset<T, WebhookConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebhookConfig.
     * @param {WebhookConfigCreateArgs} args - Arguments to create a WebhookConfig.
     * @example
     * // Create one WebhookConfig
     * const WebhookConfig = await prisma.webhookConfig.create({
     *   data: {
     *     // ... data to create a WebhookConfig
     *   }
     * })
     * 
     */
    create<T extends WebhookConfigCreateArgs>(args: SelectSubset<T, WebhookConfigCreateArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebhookConfigs.
     * @param {WebhookConfigCreateManyArgs} args - Arguments to create many WebhookConfigs.
     * @example
     * // Create many WebhookConfigs
     * const webhookConfig = await prisma.webhookConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookConfigCreateManyArgs>(args?: SelectSubset<T, WebhookConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WebhookConfig.
     * @param {WebhookConfigDeleteArgs} args - Arguments to delete one WebhookConfig.
     * @example
     * // Delete one WebhookConfig
     * const WebhookConfig = await prisma.webhookConfig.delete({
     *   where: {
     *     // ... filter to delete one WebhookConfig
     *   }
     * })
     * 
     */
    delete<T extends WebhookConfigDeleteArgs>(args: SelectSubset<T, WebhookConfigDeleteArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebhookConfig.
     * @param {WebhookConfigUpdateArgs} args - Arguments to update one WebhookConfig.
     * @example
     * // Update one WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookConfigUpdateArgs>(args: SelectSubset<T, WebhookConfigUpdateArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebhookConfigs.
     * @param {WebhookConfigDeleteManyArgs} args - Arguments to filter WebhookConfigs to delete.
     * @example
     * // Delete a few WebhookConfigs
     * const { count } = await prisma.webhookConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookConfigDeleteManyArgs>(args?: SelectSubset<T, WebhookConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookConfigs
     * const webhookConfig = await prisma.webhookConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookConfigUpdateManyArgs>(args: SelectSubset<T, WebhookConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebhookConfig.
     * @param {WebhookConfigUpsertArgs} args - Arguments to update or create a WebhookConfig.
     * @example
     * // Update or create a WebhookConfig
     * const webhookConfig = await prisma.webhookConfig.upsert({
     *   create: {
     *     // ... data to create a WebhookConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookConfig we want to update
     *   }
     * })
     */
    upsert<T extends WebhookConfigUpsertArgs>(args: SelectSubset<T, WebhookConfigUpsertArgs<ExtArgs>>): Prisma__WebhookConfigClient<$Result.GetResult<Prisma.$WebhookConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebhookConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigCountArgs} args - Arguments to filter WebhookConfigs to count.
     * @example
     * // Count the number of WebhookConfigs
     * const count = await prisma.webhookConfig.count({
     *   where: {
     *     // ... the filter for the WebhookConfigs we want to count
     *   }
     * })
    **/
    count<T extends WebhookConfigCountArgs>(
      args?: Subset<T, WebhookConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookConfigAggregateArgs>(args: Subset<T, WebhookConfigAggregateArgs>): Prisma.PrismaPromise<GetWebhookConfigAggregateType<T>>

    /**
     * Group by WebhookConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookConfigGroupByArgs['orderBy'] }
        : { orderBy?: WebhookConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookConfig model
   */
  readonly fields: WebhookConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integration<T extends ExternalIntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExternalIntegrationDefaultArgs<ExtArgs>>): Prisma__ExternalIntegrationClient<$Result.GetResult<Prisma.$ExternalIntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookConfig model
   */
  interface WebhookConfigFieldRefs {
    readonly integrationId: FieldRef<"WebhookConfig", 'String'>
    readonly url: FieldRef<"WebhookConfig", 'String'>
    readonly secret: FieldRef<"WebhookConfig", 'String'>
    readonly eventCreated: FieldRef<"WebhookConfig", 'Boolean'>
    readonly eventApproved: FieldRef<"WebhookConfig", 'Boolean'>
    readonly eventUpdated: FieldRef<"WebhookConfig", 'Boolean'>
    readonly eventRejected: FieldRef<"WebhookConfig", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * WebhookConfig findUnique
   */
  export type WebhookConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter, which WebhookConfig to fetch.
     */
    where: WebhookConfigWhereUniqueInput
  }

  /**
   * WebhookConfig findUniqueOrThrow
   */
  export type WebhookConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter, which WebhookConfig to fetch.
     */
    where: WebhookConfigWhereUniqueInput
  }

  /**
   * WebhookConfig findFirst
   */
  export type WebhookConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter, which WebhookConfig to fetch.
     */
    where?: WebhookConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookConfigs to fetch.
     */
    orderBy?: WebhookConfigOrderByWithRelationInput | WebhookConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookConfigs.
     */
    cursor?: WebhookConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookConfigs.
     */
    distinct?: WebhookConfigScalarFieldEnum | WebhookConfigScalarFieldEnum[]
  }

  /**
   * WebhookConfig findFirstOrThrow
   */
  export type WebhookConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter, which WebhookConfig to fetch.
     */
    where?: WebhookConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookConfigs to fetch.
     */
    orderBy?: WebhookConfigOrderByWithRelationInput | WebhookConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookConfigs.
     */
    cursor?: WebhookConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookConfigs.
     */
    distinct?: WebhookConfigScalarFieldEnum | WebhookConfigScalarFieldEnum[]
  }

  /**
   * WebhookConfig findMany
   */
  export type WebhookConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter, which WebhookConfigs to fetch.
     */
    where?: WebhookConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookConfigs to fetch.
     */
    orderBy?: WebhookConfigOrderByWithRelationInput | WebhookConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookConfigs.
     */
    cursor?: WebhookConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookConfigs.
     */
    skip?: number
    distinct?: WebhookConfigScalarFieldEnum | WebhookConfigScalarFieldEnum[]
  }

  /**
   * WebhookConfig create
   */
  export type WebhookConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a WebhookConfig.
     */
    data: XOR<WebhookConfigCreateInput, WebhookConfigUncheckedCreateInput>
  }

  /**
   * WebhookConfig createMany
   */
  export type WebhookConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookConfigs.
     */
    data: WebhookConfigCreateManyInput | WebhookConfigCreateManyInput[]
  }

  /**
   * WebhookConfig update
   */
  export type WebhookConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a WebhookConfig.
     */
    data: XOR<WebhookConfigUpdateInput, WebhookConfigUncheckedUpdateInput>
    /**
     * Choose, which WebhookConfig to update.
     */
    where: WebhookConfigWhereUniqueInput
  }

  /**
   * WebhookConfig updateMany
   */
  export type WebhookConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookConfigs.
     */
    data: XOR<WebhookConfigUpdateManyMutationInput, WebhookConfigUncheckedUpdateManyInput>
    /**
     * Filter which WebhookConfigs to update
     */
    where?: WebhookConfigWhereInput
    /**
     * Limit how many WebhookConfigs to update.
     */
    limit?: number
  }

  /**
   * WebhookConfig upsert
   */
  export type WebhookConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the WebhookConfig to update in case it exists.
     */
    where: WebhookConfigWhereUniqueInput
    /**
     * In case the WebhookConfig found by the `where` argument doesn't exist, create a new WebhookConfig with this data.
     */
    create: XOR<WebhookConfigCreateInput, WebhookConfigUncheckedCreateInput>
    /**
     * In case the WebhookConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookConfigUpdateInput, WebhookConfigUncheckedUpdateInput>
  }

  /**
   * WebhookConfig delete
   */
  export type WebhookConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
    /**
     * Filter which WebhookConfig to delete.
     */
    where: WebhookConfigWhereUniqueInput
  }

  /**
   * WebhookConfig deleteMany
   */
  export type WebhookConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookConfigs to delete
     */
    where?: WebhookConfigWhereInput
    /**
     * Limit how many WebhookConfigs to delete.
     */
    limit?: number
  }

  /**
   * WebhookConfig without action
   */
  export type WebhookConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookConfig
     */
    select?: WebhookConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookConfig
     */
    omit?: WebhookConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookConfigInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fingerprint: string | null
    userAgent: string | null
    status: string | null
    createdAt: Date | null
    expiresAt: Date | null
    refreshToken: string | null
    refreshExpires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fingerprint: string | null
    userAgent: string | null
    status: string | null
    createdAt: Date | null
    expiresAt: Date | null
    refreshToken: string | null
    refreshExpires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    fingerprint: number
    userAgent: number
    status: number
    createdAt: number
    expiresAt: number
    refreshToken: number
    refreshExpires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    fingerprint?: true
    userAgent?: true
    status?: true
    createdAt?: true
    expiresAt?: true
    refreshToken?: true
    refreshExpires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    fingerprint?: true
    userAgent?: true
    status?: true
    createdAt?: true
    expiresAt?: true
    refreshToken?: true
    refreshExpires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    fingerprint?: true
    userAgent?: true
    status?: true
    createdAt?: true
    expiresAt?: true
    refreshToken?: true
    refreshExpires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    fingerprint: string | null
    userAgent: string | null
    status: string
    createdAt: Date
    expiresAt: Date
    refreshToken: string | null
    refreshExpires: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fingerprint?: boolean
    userAgent?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    refreshToken?: boolean
    refreshExpires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    fingerprint?: boolean
    userAgent?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    refreshToken?: boolean
    refreshExpires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fingerprint" | "userAgent" | "status" | "createdAt" | "expiresAt" | "refreshToken" | "refreshExpires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fingerprint: string | null
      userAgent: string | null
      status: string
      createdAt: Date
      expiresAt: Date
      refreshToken: string | null
      refreshExpires: Date | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly fingerprint: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly status: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly refreshToken: FieldRef<"Session", 'String'>
    readonly refreshExpires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    urgencyDays: number | null
    repeatIntervalDays: number | null
    postponeCount: number | null
    scheduleMonthDay: number | null
    scheduleWeekDay: number | null
  }

  export type NotificationSumAggregateOutputType = {
    urgencyDays: number | null
    repeatIntervalDays: number | null
    postponeCount: number | null
    scheduleMonthDay: number | null
    scheduleWeekDay: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    scheduledAt: Date | null
    status: string | null
    type: string | null
    category: string | null
    link: string | null
    urgencyDays: number | null
    repeatIntervalDays: number | null
    dueDate: Date | null
    taskStatus: string | null
    taskCompletedAt: Date | null
    taskCompletedBy: string | null
    postponeCount: number | null
    postponeReason: string | null
    lastPostponedAt: Date | null
    originalDueDate: Date | null
    aiGenerated: boolean | null
    aiPrompt: string | null
    scheduleMonthDay: number | null
    scheduleWeekDay: number | null
    scheduleTime: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    scheduledAt: Date | null
    status: string | null
    type: string | null
    category: string | null
    link: string | null
    urgencyDays: number | null
    repeatIntervalDays: number | null
    dueDate: Date | null
    taskStatus: string | null
    taskCompletedAt: Date | null
    taskCompletedBy: string | null
    postponeCount: number | null
    postponeReason: string | null
    lastPostponedAt: Date | null
    originalDueDate: Date | null
    aiGenerated: boolean | null
    aiPrompt: string | null
    scheduleMonthDay: number | null
    scheduleWeekDay: number | null
    scheduleTime: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    scheduledAt: number
    status: number
    type: number
    category: number
    link: number
    urgencyDays: number
    repeatIntervalDays: number
    dueDate: number
    taskStatus: number
    taskCompletedAt: number
    taskCompletedBy: number
    postponeCount: number
    postponeReason: number
    lastPostponedAt: number
    originalDueDate: number
    aiGenerated: number
    aiPrompt: number
    scheduleMonthDay: number
    scheduleWeekDay: number
    scheduleTime: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    urgencyDays?: true
    repeatIntervalDays?: true
    postponeCount?: true
    scheduleMonthDay?: true
    scheduleWeekDay?: true
  }

  export type NotificationSumAggregateInputType = {
    urgencyDays?: true
    repeatIntervalDays?: true
    postponeCount?: true
    scheduleMonthDay?: true
    scheduleWeekDay?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    scheduledAt?: true
    status?: true
    type?: true
    category?: true
    link?: true
    urgencyDays?: true
    repeatIntervalDays?: true
    dueDate?: true
    taskStatus?: true
    taskCompletedAt?: true
    taskCompletedBy?: true
    postponeCount?: true
    postponeReason?: true
    lastPostponedAt?: true
    originalDueDate?: true
    aiGenerated?: true
    aiPrompt?: true
    scheduleMonthDay?: true
    scheduleWeekDay?: true
    scheduleTime?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    scheduledAt?: true
    status?: true
    type?: true
    category?: true
    link?: true
    urgencyDays?: true
    repeatIntervalDays?: true
    dueDate?: true
    taskStatus?: true
    taskCompletedAt?: true
    taskCompletedBy?: true
    postponeCount?: true
    postponeReason?: true
    lastPostponedAt?: true
    originalDueDate?: true
    aiGenerated?: true
    aiPrompt?: true
    scheduleMonthDay?: true
    scheduleWeekDay?: true
    scheduleTime?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    scheduledAt?: true
    status?: true
    type?: true
    category?: true
    link?: true
    urgencyDays?: true
    repeatIntervalDays?: true
    dueDate?: true
    taskStatus?: true
    taskCompletedAt?: true
    taskCompletedBy?: true
    postponeCount?: true
    postponeReason?: true
    lastPostponedAt?: true
    originalDueDate?: true
    aiGenerated?: true
    aiPrompt?: true
    scheduleMonthDay?: true
    scheduleWeekDay?: true
    scheduleTime?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    scheduledAt: Date | null
    status: string
    type: string
    category: string | null
    link: string | null
    urgencyDays: number
    repeatIntervalDays: number
    dueDate: Date | null
    taskStatus: string | null
    taskCompletedAt: Date | null
    taskCompletedBy: string | null
    postponeCount: number
    postponeReason: string | null
    lastPostponedAt: Date | null
    originalDueDate: Date | null
    aiGenerated: boolean
    aiPrompt: string | null
    scheduleMonthDay: number | null
    scheduleWeekDay: number | null
    scheduleTime: Date | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    scheduledAt?: boolean
    status?: boolean
    type?: boolean
    category?: boolean
    link?: boolean
    urgencyDays?: boolean
    repeatIntervalDays?: boolean
    dueDate?: boolean
    taskStatus?: boolean
    taskCompletedAt?: boolean
    taskCompletedBy?: boolean
    postponeCount?: boolean
    postponeReason?: boolean
    lastPostponedAt?: boolean
    originalDueDate?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    scheduleMonthDay?: boolean
    scheduleWeekDay?: boolean
    scheduleTime?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvals?: boolean | Notification$approvalsArgs<ExtArgs>
    recipients?: boolean | Notification$recipientsArgs<ExtArgs>
    attachments?: boolean | Notification$attachmentsArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    scheduledAt?: boolean
    status?: boolean
    type?: boolean
    category?: boolean
    link?: boolean
    urgencyDays?: boolean
    repeatIntervalDays?: boolean
    dueDate?: boolean
    taskStatus?: boolean
    taskCompletedAt?: boolean
    taskCompletedBy?: boolean
    postponeCount?: boolean
    postponeReason?: boolean
    lastPostponedAt?: boolean
    originalDueDate?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    scheduleMonthDay?: boolean
    scheduleWeekDay?: boolean
    scheduleTime?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "message" | "scheduledAt" | "status" | "type" | "category" | "link" | "urgencyDays" | "repeatIntervalDays" | "dueDate" | "taskStatus" | "taskCompletedAt" | "taskCompletedBy" | "postponeCount" | "postponeReason" | "lastPostponedAt" | "originalDueDate" | "aiGenerated" | "aiPrompt" | "scheduleMonthDay" | "scheduleWeekDay" | "scheduleTime" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | Notification$approvalsArgs<ExtArgs>
    recipients?: boolean | Notification$recipientsArgs<ExtArgs>
    attachments?: boolean | Notification$attachmentsArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
      recipients: Prisma.$RecipientPayload<ExtArgs>[]
      attachments: Prisma.$NotificationAttachmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      scheduledAt: Date | null
      status: string
      type: string
      category: string | null
      link: string | null
      urgencyDays: number
      repeatIntervalDays: number
      dueDate: Date | null
      taskStatus: string | null
      taskCompletedAt: Date | null
      taskCompletedBy: string | null
      postponeCount: number
      postponeReason: string | null
      lastPostponedAt: Date | null
      originalDueDate: Date | null
      aiGenerated: boolean
      aiPrompt: string | null
      scheduleMonthDay: number | null
      scheduleWeekDay: number | null
      scheduleTime: Date | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    approvals<T extends Notification$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Notification$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recipients<T extends Notification$recipientsArgs<ExtArgs> = {}>(args?: Subset<T, Notification$recipientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Notification$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Notification$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly scheduledAt: FieldRef<"Notification", 'DateTime'>
    readonly status: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly category: FieldRef<"Notification", 'String'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly urgencyDays: FieldRef<"Notification", 'Int'>
    readonly repeatIntervalDays: FieldRef<"Notification", 'Int'>
    readonly dueDate: FieldRef<"Notification", 'DateTime'>
    readonly taskStatus: FieldRef<"Notification", 'String'>
    readonly taskCompletedAt: FieldRef<"Notification", 'DateTime'>
    readonly taskCompletedBy: FieldRef<"Notification", 'String'>
    readonly postponeCount: FieldRef<"Notification", 'Int'>
    readonly postponeReason: FieldRef<"Notification", 'String'>
    readonly lastPostponedAt: FieldRef<"Notification", 'DateTime'>
    readonly originalDueDate: FieldRef<"Notification", 'DateTime'>
    readonly aiGenerated: FieldRef<"Notification", 'Boolean'>
    readonly aiPrompt: FieldRef<"Notification", 'String'>
    readonly scheduleMonthDay: FieldRef<"Notification", 'Int'>
    readonly scheduleWeekDay: FieldRef<"Notification", 'Int'>
    readonly scheduleTime: FieldRef<"Notification", 'DateTime'>
    readonly createdBy: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.approvals
   */
  export type Notification$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Notification.recipients
   */
  export type Notification$recipientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    where?: RecipientWhereInput
    orderBy?: RecipientOrderByWithRelationInput | RecipientOrderByWithRelationInput[]
    cursor?: RecipientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipientScalarFieldEnum | RecipientScalarFieldEnum[]
  }

  /**
   * Notification.attachments
   */
  export type Notification$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    where?: NotificationAttachmentWhereInput
    orderBy?: NotificationAttachmentOrderByWithRelationInput | NotificationAttachmentOrderByWithRelationInput[]
    cursor?: NotificationAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationAttachmentScalarFieldEnum | NotificationAttachmentScalarFieldEnum[]
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Approval
   */

  export type AggregateApproval = {
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  export type ApprovalMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userId: string | null
    response: string | null
    comment: string | null
    createdAt: Date | null
  }

  export type ApprovalMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userId: string | null
    response: string | null
    comment: string | null
    createdAt: Date | null
  }

  export type ApprovalCountAggregateOutputType = {
    id: number
    notificationId: number
    userId: number
    response: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ApprovalMinAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    response?: true
    comment?: true
    createdAt?: true
  }

  export type ApprovalMaxAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    response?: true
    comment?: true
    createdAt?: true
  }

  export type ApprovalCountAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    response?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approval to aggregate.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalMaxAggregateInputType
  }

  export type GetApprovalAggregateType<T extends ApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApproval[P]>
      : GetScalarType<T[P], AggregateApproval[P]>
  }




  export type ApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithAggregationInput | ApprovalOrderByWithAggregationInput[]
    by: ApprovalScalarFieldEnum[] | ApprovalScalarFieldEnum
    having?: ApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalCountAggregateInputType | true
    _min?: ApprovalMinAggregateInputType
    _max?: ApprovalMaxAggregateInputType
  }

  export type ApprovalGroupByOutputType = {
    id: string
    notificationId: string
    userId: string
    response: string
    comment: string | null
    createdAt: Date
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  type GetApprovalGroupByPayload<T extends ApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    response?: boolean
    comment?: boolean
    createdAt?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>



  export type ApprovalSelectScalar = {
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    response?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ApprovalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "notificationId" | "userId" | "response" | "comment" | "createdAt", ExtArgs["result"]["approval"]>
  export type ApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approval"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      userId: string
      response: string
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["approval"]>
    composites: {}
  }

  type ApprovalGetPayload<S extends boolean | null | undefined | ApprovalDefaultArgs> = $Result.GetResult<Prisma.$ApprovalPayload, S>

  type ApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovalCountAggregateInputType | true
    }

  export interface ApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approval'], meta: { name: 'Approval' } }
    /**
     * Find zero or one Approval that matches the filter.
     * @param {ApprovalFindUniqueArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalFindUniqueArgs>(args: SelectSubset<T, ApprovalFindUniqueArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Approval that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovalFindUniqueOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalFindFirstArgs>(args?: SelectSubset<T, ApprovalFindFirstArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approval.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalWithIdOnly = await prisma.approval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalFindManyArgs>(args?: SelectSubset<T, ApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Approval.
     * @param {ApprovalCreateArgs} args - Arguments to create a Approval.
     * @example
     * // Create one Approval
     * const Approval = await prisma.approval.create({
     *   data: {
     *     // ... data to create a Approval
     *   }
     * })
     * 
     */
    create<T extends ApprovalCreateArgs>(args: SelectSubset<T, ApprovalCreateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Approvals.
     * @param {ApprovalCreateManyArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalCreateManyArgs>(args?: SelectSubset<T, ApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Approval.
     * @param {ApprovalDeleteArgs} args - Arguments to delete one Approval.
     * @example
     * // Delete one Approval
     * const Approval = await prisma.approval.delete({
     *   where: {
     *     // ... filter to delete one Approval
     *   }
     * })
     * 
     */
    delete<T extends ApprovalDeleteArgs>(args: SelectSubset<T, ApprovalDeleteArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Approval.
     * @param {ApprovalUpdateArgs} args - Arguments to update one Approval.
     * @example
     * // Update one Approval
     * const approval = await prisma.approval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalUpdateArgs>(args: SelectSubset<T, ApprovalUpdateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalDeleteManyArgs>(args?: SelectSubset<T, ApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalUpdateManyArgs>(args: SelectSubset<T, ApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Approval.
     * @param {ApprovalUpsertArgs} args - Arguments to update or create a Approval.
     * @example
     * // Update or create a Approval
     * const approval = await prisma.approval.upsert({
     *   create: {
     *     // ... data to create a Approval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approval we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalUpsertArgs>(args: SelectSubset<T, ApprovalUpsertArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approval.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalCountArgs>(
      args?: Subset<T, ApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalAggregateArgs>(args: Subset<T, ApprovalAggregateArgs>): Prisma.PrismaPromise<GetApprovalAggregateType<T>>

    /**
     * Group by Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approval model
   */
  readonly fields: ApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approval model
   */
  interface ApprovalFieldRefs {
    readonly id: FieldRef<"Approval", 'String'>
    readonly notificationId: FieldRef<"Approval", 'String'>
    readonly userId: FieldRef<"Approval", 'String'>
    readonly response: FieldRef<"Approval", 'String'>
    readonly comment: FieldRef<"Approval", 'String'>
    readonly createdAt: FieldRef<"Approval", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Approval findUnique
   */
  export type ApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findUniqueOrThrow
   */
  export type ApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findFirst
   */
  export type ApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findFirstOrThrow
   */
  export type ApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findMany
   */
  export type ApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval create
   */
  export type ApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a Approval.
     */
    data: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
  }

  /**
   * Approval createMany
   */
  export type ApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
  }

  /**
   * Approval update
   */
  export type ApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a Approval.
     */
    data: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
    /**
     * Choose, which Approval to update.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval updateMany
   */
  export type ApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
  }

  /**
   * Approval upsert
   */
  export type ApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the Approval to update in case it exists.
     */
    where: ApprovalWhereUniqueInput
    /**
     * In case the Approval found by the `where` argument doesn't exist, create a new Approval with this data.
     */
    create: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
    /**
     * In case the Approval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
  }

  /**
   * Approval delete
   */
  export type ApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter which Approval to delete.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval deleteMany
   */
  export type ApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to delete
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to delete.
     */
    limit?: number
  }

  /**
   * Approval without action
   */
  export type ApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
  }


  /**
   * Model Recipient
   */

  export type AggregateRecipient = {
    _count: RecipientCountAggregateOutputType | null
    _min: RecipientMinAggregateOutputType | null
    _max: RecipientMaxAggregateOutputType | null
  }

  export type RecipientMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    type: string | null
    userId: string | null
    groupId: string | null
    companyCode: string | null
  }

  export type RecipientMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    type: string | null
    userId: string | null
    groupId: string | null
    companyCode: string | null
  }

  export type RecipientCountAggregateOutputType = {
    id: number
    notificationId: number
    type: number
    userId: number
    groupId: number
    companyCode: number
    _all: number
  }


  export type RecipientMinAggregateInputType = {
    id?: true
    notificationId?: true
    type?: true
    userId?: true
    groupId?: true
    companyCode?: true
  }

  export type RecipientMaxAggregateInputType = {
    id?: true
    notificationId?: true
    type?: true
    userId?: true
    groupId?: true
    companyCode?: true
  }

  export type RecipientCountAggregateInputType = {
    id?: true
    notificationId?: true
    type?: true
    userId?: true
    groupId?: true
    companyCode?: true
    _all?: true
  }

  export type RecipientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipient to aggregate.
     */
    where?: RecipientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipients to fetch.
     */
    orderBy?: RecipientOrderByWithRelationInput | RecipientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipients
    **/
    _count?: true | RecipientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipientMaxAggregateInputType
  }

  export type GetRecipientAggregateType<T extends RecipientAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipient[P]>
      : GetScalarType<T[P], AggregateRecipient[P]>
  }




  export type RecipientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipientWhereInput
    orderBy?: RecipientOrderByWithAggregationInput | RecipientOrderByWithAggregationInput[]
    by: RecipientScalarFieldEnum[] | RecipientScalarFieldEnum
    having?: RecipientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipientCountAggregateInputType | true
    _min?: RecipientMinAggregateInputType
    _max?: RecipientMaxAggregateInputType
  }

  export type RecipientGroupByOutputType = {
    id: string
    notificationId: string
    type: string
    userId: string | null
    groupId: string | null
    companyCode: string | null
    _count: RecipientCountAggregateOutputType | null
    _min: RecipientMinAggregateOutputType | null
    _max: RecipientMaxAggregateOutputType | null
  }

  type GetRecipientGroupByPayload<T extends RecipientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipientGroupByOutputType[P]>
            : GetScalarType<T[P], RecipientGroupByOutputType[P]>
        }
      >
    >


  export type RecipientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    type?: boolean
    userId?: boolean
    groupId?: boolean
    companyCode?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipient"]>



  export type RecipientSelectScalar = {
    id?: boolean
    notificationId?: boolean
    type?: boolean
    userId?: boolean
    groupId?: boolean
    companyCode?: boolean
  }

  export type RecipientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "notificationId" | "type" | "userId" | "groupId" | "companyCode", ExtArgs["result"]["recipient"]>
  export type RecipientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }

  export type $RecipientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipient"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      type: string
      userId: string | null
      groupId: string | null
      companyCode: string | null
    }, ExtArgs["result"]["recipient"]>
    composites: {}
  }

  type RecipientGetPayload<S extends boolean | null | undefined | RecipientDefaultArgs> = $Result.GetResult<Prisma.$RecipientPayload, S>

  type RecipientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipientCountAggregateInputType | true
    }

  export interface RecipientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipient'], meta: { name: 'Recipient' } }
    /**
     * Find zero or one Recipient that matches the filter.
     * @param {RecipientFindUniqueArgs} args - Arguments to find a Recipient
     * @example
     * // Get one Recipient
     * const recipient = await prisma.recipient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipientFindUniqueArgs>(args: SelectSubset<T, RecipientFindUniqueArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recipient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipientFindUniqueOrThrowArgs} args - Arguments to find a Recipient
     * @example
     * // Get one Recipient
     * const recipient = await prisma.recipient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipientFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientFindFirstArgs} args - Arguments to find a Recipient
     * @example
     * // Get one Recipient
     * const recipient = await prisma.recipient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipientFindFirstArgs>(args?: SelectSubset<T, RecipientFindFirstArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientFindFirstOrThrowArgs} args - Arguments to find a Recipient
     * @example
     * // Get one Recipient
     * const recipient = await prisma.recipient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipientFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipientFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recipients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipients
     * const recipients = await prisma.recipient.findMany()
     * 
     * // Get first 10 Recipients
     * const recipients = await prisma.recipient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipientWithIdOnly = await prisma.recipient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipientFindManyArgs>(args?: SelectSubset<T, RecipientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recipient.
     * @param {RecipientCreateArgs} args - Arguments to create a Recipient.
     * @example
     * // Create one Recipient
     * const Recipient = await prisma.recipient.create({
     *   data: {
     *     // ... data to create a Recipient
     *   }
     * })
     * 
     */
    create<T extends RecipientCreateArgs>(args: SelectSubset<T, RecipientCreateArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recipients.
     * @param {RecipientCreateManyArgs} args - Arguments to create many Recipients.
     * @example
     * // Create many Recipients
     * const recipient = await prisma.recipient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipientCreateManyArgs>(args?: SelectSubset<T, RecipientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipient.
     * @param {RecipientDeleteArgs} args - Arguments to delete one Recipient.
     * @example
     * // Delete one Recipient
     * const Recipient = await prisma.recipient.delete({
     *   where: {
     *     // ... filter to delete one Recipient
     *   }
     * })
     * 
     */
    delete<T extends RecipientDeleteArgs>(args: SelectSubset<T, RecipientDeleteArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recipient.
     * @param {RecipientUpdateArgs} args - Arguments to update one Recipient.
     * @example
     * // Update one Recipient
     * const recipient = await prisma.recipient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipientUpdateArgs>(args: SelectSubset<T, RecipientUpdateArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recipients.
     * @param {RecipientDeleteManyArgs} args - Arguments to filter Recipients to delete.
     * @example
     * // Delete a few Recipients
     * const { count } = await prisma.recipient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipientDeleteManyArgs>(args?: SelectSubset<T, RecipientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipients
     * const recipient = await prisma.recipient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipientUpdateManyArgs>(args: SelectSubset<T, RecipientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipient.
     * @param {RecipientUpsertArgs} args - Arguments to update or create a Recipient.
     * @example
     * // Update or create a Recipient
     * const recipient = await prisma.recipient.upsert({
     *   create: {
     *     // ... data to create a Recipient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipient we want to update
     *   }
     * })
     */
    upsert<T extends RecipientUpsertArgs>(args: SelectSubset<T, RecipientUpsertArgs<ExtArgs>>): Prisma__RecipientClient<$Result.GetResult<Prisma.$RecipientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientCountArgs} args - Arguments to filter Recipients to count.
     * @example
     * // Count the number of Recipients
     * const count = await prisma.recipient.count({
     *   where: {
     *     // ... the filter for the Recipients we want to count
     *   }
     * })
    **/
    count<T extends RecipientCountArgs>(
      args?: Subset<T, RecipientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipientAggregateArgs>(args: Subset<T, RecipientAggregateArgs>): Prisma.PrismaPromise<GetRecipientAggregateType<T>>

    /**
     * Group by Recipient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipientGroupByArgs['orderBy'] }
        : { orderBy?: RecipientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipient model
   */
  readonly fields: RecipientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipient model
   */
  interface RecipientFieldRefs {
    readonly id: FieldRef<"Recipient", 'String'>
    readonly notificationId: FieldRef<"Recipient", 'String'>
    readonly type: FieldRef<"Recipient", 'String'>
    readonly userId: FieldRef<"Recipient", 'String'>
    readonly groupId: FieldRef<"Recipient", 'String'>
    readonly companyCode: FieldRef<"Recipient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recipient findUnique
   */
  export type RecipientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter, which Recipient to fetch.
     */
    where: RecipientWhereUniqueInput
  }

  /**
   * Recipient findUniqueOrThrow
   */
  export type RecipientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter, which Recipient to fetch.
     */
    where: RecipientWhereUniqueInput
  }

  /**
   * Recipient findFirst
   */
  export type RecipientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter, which Recipient to fetch.
     */
    where?: RecipientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipients to fetch.
     */
    orderBy?: RecipientOrderByWithRelationInput | RecipientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipients.
     */
    cursor?: RecipientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipients.
     */
    distinct?: RecipientScalarFieldEnum | RecipientScalarFieldEnum[]
  }

  /**
   * Recipient findFirstOrThrow
   */
  export type RecipientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter, which Recipient to fetch.
     */
    where?: RecipientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipients to fetch.
     */
    orderBy?: RecipientOrderByWithRelationInput | RecipientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipients.
     */
    cursor?: RecipientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipients.
     */
    distinct?: RecipientScalarFieldEnum | RecipientScalarFieldEnum[]
  }

  /**
   * Recipient findMany
   */
  export type RecipientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter, which Recipients to fetch.
     */
    where?: RecipientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipients to fetch.
     */
    orderBy?: RecipientOrderByWithRelationInput | RecipientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipients.
     */
    cursor?: RecipientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipients.
     */
    skip?: number
    distinct?: RecipientScalarFieldEnum | RecipientScalarFieldEnum[]
  }

  /**
   * Recipient create
   */
  export type RecipientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipient.
     */
    data: XOR<RecipientCreateInput, RecipientUncheckedCreateInput>
  }

  /**
   * Recipient createMany
   */
  export type RecipientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipients.
     */
    data: RecipientCreateManyInput | RecipientCreateManyInput[]
  }

  /**
   * Recipient update
   */
  export type RecipientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipient.
     */
    data: XOR<RecipientUpdateInput, RecipientUncheckedUpdateInput>
    /**
     * Choose, which Recipient to update.
     */
    where: RecipientWhereUniqueInput
  }

  /**
   * Recipient updateMany
   */
  export type RecipientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipients.
     */
    data: XOR<RecipientUpdateManyMutationInput, RecipientUncheckedUpdateManyInput>
    /**
     * Filter which Recipients to update
     */
    where?: RecipientWhereInput
    /**
     * Limit how many Recipients to update.
     */
    limit?: number
  }

  /**
   * Recipient upsert
   */
  export type RecipientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipient to update in case it exists.
     */
    where: RecipientWhereUniqueInput
    /**
     * In case the Recipient found by the `where` argument doesn't exist, create a new Recipient with this data.
     */
    create: XOR<RecipientCreateInput, RecipientUncheckedCreateInput>
    /**
     * In case the Recipient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipientUpdateInput, RecipientUncheckedUpdateInput>
  }

  /**
   * Recipient delete
   */
  export type RecipientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
    /**
     * Filter which Recipient to delete.
     */
    where: RecipientWhereUniqueInput
  }

  /**
   * Recipient deleteMany
   */
  export type RecipientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipients to delete
     */
    where?: RecipientWhereInput
    /**
     * Limit how many Recipients to delete.
     */
    limit?: number
  }

  /**
   * Recipient without action
   */
  export type RecipientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipient
     */
    select?: RecipientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipient
     */
    omit?: RecipientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipientInclude<ExtArgs> | null
  }


  /**
   * Model NotificationAttachment
   */

  export type AggregateNotificationAttachment = {
    _count: NotificationAttachmentCountAggregateOutputType | null
    _min: NotificationAttachmentMinAggregateOutputType | null
    _max: NotificationAttachmentMaxAggregateOutputType | null
  }

  export type NotificationAttachmentMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    fileName: string | null
    fileUrl: string | null
    mimeType: string | null
  }

  export type NotificationAttachmentMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    fileName: string | null
    fileUrl: string | null
    mimeType: string | null
  }

  export type NotificationAttachmentCountAggregateOutputType = {
    id: number
    notificationId: number
    fileName: number
    fileUrl: number
    mimeType: number
    _all: number
  }


  export type NotificationAttachmentMinAggregateInputType = {
    id?: true
    notificationId?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
  }

  export type NotificationAttachmentMaxAggregateInputType = {
    id?: true
    notificationId?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
  }

  export type NotificationAttachmentCountAggregateInputType = {
    id?: true
    notificationId?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
    _all?: true
  }

  export type NotificationAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationAttachment to aggregate.
     */
    where?: NotificationAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationAttachments to fetch.
     */
    orderBy?: NotificationAttachmentOrderByWithRelationInput | NotificationAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationAttachments
    **/
    _count?: true | NotificationAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationAttachmentMaxAggregateInputType
  }

  export type GetNotificationAttachmentAggregateType<T extends NotificationAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationAttachment[P]>
      : GetScalarType<T[P], AggregateNotificationAttachment[P]>
  }




  export type NotificationAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationAttachmentWhereInput
    orderBy?: NotificationAttachmentOrderByWithAggregationInput | NotificationAttachmentOrderByWithAggregationInput[]
    by: NotificationAttachmentScalarFieldEnum[] | NotificationAttachmentScalarFieldEnum
    having?: NotificationAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationAttachmentCountAggregateInputType | true
    _min?: NotificationAttachmentMinAggregateInputType
    _max?: NotificationAttachmentMaxAggregateInputType
  }

  export type NotificationAttachmentGroupByOutputType = {
    id: string
    notificationId: string
    fileName: string
    fileUrl: string
    mimeType: string
    _count: NotificationAttachmentCountAggregateOutputType | null
    _min: NotificationAttachmentMinAggregateOutputType | null
    _max: NotificationAttachmentMaxAggregateOutputType | null
  }

  type GetNotificationAttachmentGroupByPayload<T extends NotificationAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type NotificationAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    mimeType?: boolean
    Notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationAttachment"]>



  export type NotificationAttachmentSelectScalar = {
    id?: boolean
    notificationId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    mimeType?: boolean
  }

  export type NotificationAttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "notificationId" | "fileName" | "fileUrl" | "mimeType", ExtArgs["result"]["notificationAttachment"]>
  export type NotificationAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }

  export type $NotificationAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationAttachment"
    objects: {
      Notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      fileName: string
      fileUrl: string
      mimeType: string
    }, ExtArgs["result"]["notificationAttachment"]>
    composites: {}
  }

  type NotificationAttachmentGetPayload<S extends boolean | null | undefined | NotificationAttachmentDefaultArgs> = $Result.GetResult<Prisma.$NotificationAttachmentPayload, S>

  type NotificationAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationAttachmentCountAggregateInputType | true
    }

  export interface NotificationAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationAttachment'], meta: { name: 'NotificationAttachment' } }
    /**
     * Find zero or one NotificationAttachment that matches the filter.
     * @param {NotificationAttachmentFindUniqueArgs} args - Arguments to find a NotificationAttachment
     * @example
     * // Get one NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationAttachmentFindUniqueArgs>(args: SelectSubset<T, NotificationAttachmentFindUniqueArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationAttachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationAttachmentFindUniqueOrThrowArgs} args - Arguments to find a NotificationAttachment
     * @example
     * // Get one NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentFindFirstArgs} args - Arguments to find a NotificationAttachment
     * @example
     * // Get one NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationAttachmentFindFirstArgs>(args?: SelectSubset<T, NotificationAttachmentFindFirstArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentFindFirstOrThrowArgs} args - Arguments to find a NotificationAttachment
     * @example
     * // Get one NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationAttachments
     * const notificationAttachments = await prisma.notificationAttachment.findMany()
     * 
     * // Get first 10 NotificationAttachments
     * const notificationAttachments = await prisma.notificationAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationAttachmentWithIdOnly = await prisma.notificationAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationAttachmentFindManyArgs>(args?: SelectSubset<T, NotificationAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationAttachment.
     * @param {NotificationAttachmentCreateArgs} args - Arguments to create a NotificationAttachment.
     * @example
     * // Create one NotificationAttachment
     * const NotificationAttachment = await prisma.notificationAttachment.create({
     *   data: {
     *     // ... data to create a NotificationAttachment
     *   }
     * })
     * 
     */
    create<T extends NotificationAttachmentCreateArgs>(args: SelectSubset<T, NotificationAttachmentCreateArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationAttachments.
     * @param {NotificationAttachmentCreateManyArgs} args - Arguments to create many NotificationAttachments.
     * @example
     * // Create many NotificationAttachments
     * const notificationAttachment = await prisma.notificationAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationAttachmentCreateManyArgs>(args?: SelectSubset<T, NotificationAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationAttachment.
     * @param {NotificationAttachmentDeleteArgs} args - Arguments to delete one NotificationAttachment.
     * @example
     * // Delete one NotificationAttachment
     * const NotificationAttachment = await prisma.notificationAttachment.delete({
     *   where: {
     *     // ... filter to delete one NotificationAttachment
     *   }
     * })
     * 
     */
    delete<T extends NotificationAttachmentDeleteArgs>(args: SelectSubset<T, NotificationAttachmentDeleteArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationAttachment.
     * @param {NotificationAttachmentUpdateArgs} args - Arguments to update one NotificationAttachment.
     * @example
     * // Update one NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationAttachmentUpdateArgs>(args: SelectSubset<T, NotificationAttachmentUpdateArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationAttachments.
     * @param {NotificationAttachmentDeleteManyArgs} args - Arguments to filter NotificationAttachments to delete.
     * @example
     * // Delete a few NotificationAttachments
     * const { count } = await prisma.notificationAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationAttachmentDeleteManyArgs>(args?: SelectSubset<T, NotificationAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationAttachments
     * const notificationAttachment = await prisma.notificationAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationAttachmentUpdateManyArgs>(args: SelectSubset<T, NotificationAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationAttachment.
     * @param {NotificationAttachmentUpsertArgs} args - Arguments to update or create a NotificationAttachment.
     * @example
     * // Update or create a NotificationAttachment
     * const notificationAttachment = await prisma.notificationAttachment.upsert({
     *   create: {
     *     // ... data to create a NotificationAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationAttachment we want to update
     *   }
     * })
     */
    upsert<T extends NotificationAttachmentUpsertArgs>(args: SelectSubset<T, NotificationAttachmentUpsertArgs<ExtArgs>>): Prisma__NotificationAttachmentClient<$Result.GetResult<Prisma.$NotificationAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentCountArgs} args - Arguments to filter NotificationAttachments to count.
     * @example
     * // Count the number of NotificationAttachments
     * const count = await prisma.notificationAttachment.count({
     *   where: {
     *     // ... the filter for the NotificationAttachments we want to count
     *   }
     * })
    **/
    count<T extends NotificationAttachmentCountArgs>(
      args?: Subset<T, NotificationAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAttachmentAggregateArgs>(args: Subset<T, NotificationAttachmentAggregateArgs>): Prisma.PrismaPromise<GetNotificationAttachmentAggregateType<T>>

    /**
     * Group by NotificationAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: NotificationAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationAttachment model
   */
  readonly fields: NotificationAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationAttachment model
   */
  interface NotificationAttachmentFieldRefs {
    readonly id: FieldRef<"NotificationAttachment", 'String'>
    readonly notificationId: FieldRef<"NotificationAttachment", 'String'>
    readonly fileName: FieldRef<"NotificationAttachment", 'String'>
    readonly fileUrl: FieldRef<"NotificationAttachment", 'String'>
    readonly mimeType: FieldRef<"NotificationAttachment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationAttachment findUnique
   */
  export type NotificationAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationAttachment to fetch.
     */
    where: NotificationAttachmentWhereUniqueInput
  }

  /**
   * NotificationAttachment findUniqueOrThrow
   */
  export type NotificationAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationAttachment to fetch.
     */
    where: NotificationAttachmentWhereUniqueInput
  }

  /**
   * NotificationAttachment findFirst
   */
  export type NotificationAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationAttachment to fetch.
     */
    where?: NotificationAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationAttachments to fetch.
     */
    orderBy?: NotificationAttachmentOrderByWithRelationInput | NotificationAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationAttachments.
     */
    cursor?: NotificationAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationAttachments.
     */
    distinct?: NotificationAttachmentScalarFieldEnum | NotificationAttachmentScalarFieldEnum[]
  }

  /**
   * NotificationAttachment findFirstOrThrow
   */
  export type NotificationAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationAttachment to fetch.
     */
    where?: NotificationAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationAttachments to fetch.
     */
    orderBy?: NotificationAttachmentOrderByWithRelationInput | NotificationAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationAttachments.
     */
    cursor?: NotificationAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationAttachments.
     */
    distinct?: NotificationAttachmentScalarFieldEnum | NotificationAttachmentScalarFieldEnum[]
  }

  /**
   * NotificationAttachment findMany
   */
  export type NotificationAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationAttachments to fetch.
     */
    where?: NotificationAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationAttachments to fetch.
     */
    orderBy?: NotificationAttachmentOrderByWithRelationInput | NotificationAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationAttachments.
     */
    cursor?: NotificationAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationAttachments.
     */
    skip?: number
    distinct?: NotificationAttachmentScalarFieldEnum | NotificationAttachmentScalarFieldEnum[]
  }

  /**
   * NotificationAttachment create
   */
  export type NotificationAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationAttachment.
     */
    data: XOR<NotificationAttachmentCreateInput, NotificationAttachmentUncheckedCreateInput>
  }

  /**
   * NotificationAttachment createMany
   */
  export type NotificationAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationAttachments.
     */
    data: NotificationAttachmentCreateManyInput | NotificationAttachmentCreateManyInput[]
  }

  /**
   * NotificationAttachment update
   */
  export type NotificationAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationAttachment.
     */
    data: XOR<NotificationAttachmentUpdateInput, NotificationAttachmentUncheckedUpdateInput>
    /**
     * Choose, which NotificationAttachment to update.
     */
    where: NotificationAttachmentWhereUniqueInput
  }

  /**
   * NotificationAttachment updateMany
   */
  export type NotificationAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationAttachments.
     */
    data: XOR<NotificationAttachmentUpdateManyMutationInput, NotificationAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which NotificationAttachments to update
     */
    where?: NotificationAttachmentWhereInput
    /**
     * Limit how many NotificationAttachments to update.
     */
    limit?: number
  }

  /**
   * NotificationAttachment upsert
   */
  export type NotificationAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationAttachment to update in case it exists.
     */
    where: NotificationAttachmentWhereUniqueInput
    /**
     * In case the NotificationAttachment found by the `where` argument doesn't exist, create a new NotificationAttachment with this data.
     */
    create: XOR<NotificationAttachmentCreateInput, NotificationAttachmentUncheckedCreateInput>
    /**
     * In case the NotificationAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationAttachmentUpdateInput, NotificationAttachmentUncheckedUpdateInput>
  }

  /**
   * NotificationAttachment delete
   */
  export type NotificationAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
    /**
     * Filter which NotificationAttachment to delete.
     */
    where: NotificationAttachmentWhereUniqueInput
  }

  /**
   * NotificationAttachment deleteMany
   */
  export type NotificationAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationAttachments to delete
     */
    where?: NotificationAttachmentWhereInput
    /**
     * Limit how many NotificationAttachments to delete.
     */
    limit?: number
  }

  /**
   * NotificationAttachment without action
   */
  export type NotificationAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationAttachment
     */
    select?: NotificationAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationAttachment
     */
    omit?: NotificationAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
    leaderId: string | null
    createdAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    leaderId: string | null
    createdAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    leaderId: number
    createdAt: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    leaderId?: true
    createdAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    name: string
    leaderId: string | null
    createdAt: Date
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdAt?: boolean
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>



  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    leaderId?: boolean
    createdAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "leaderId" | "createdAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      members: Prisma.$TeamMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      leaderId: string | null
      createdAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly leaderId: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    employeeId: string | null
    role: string | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    employeeId: string | null
    role: string | null
  }

  export type TeamMemberCountAggregateOutputType = {
    id: number
    teamId: number
    employeeId: number
    role: number
    _all: number
  }


  export type TeamMemberMinAggregateInputType = {
    id?: true
    teamId?: true
    employeeId?: true
    role?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    id?: true
    teamId?: true
    employeeId?: true
    role?: true
  }

  export type TeamMemberCountAggregateInputType = {
    id?: true
    teamId?: true
    employeeId?: true
    role?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    id: string
    teamId: string
    employeeId: string
    role: string
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    employeeId?: boolean
    role?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>



  export type TeamMemberSelectScalar = {
    id?: boolean
    teamId?: boolean
    employeeId?: boolean
    role?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "employeeId" | "role", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      employeeId: string
      role: string
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly id: FieldRef<"TeamMember", 'String'>
    readonly teamId: FieldRef<"TeamMember", 'String'>
    readonly employeeId: FieldRef<"TeamMember", 'String'>
    readonly role: FieldRef<"TeamMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeAnalytics
   */

  export type AggregateEmployeeAnalytics = {
    _count: EmployeeAnalyticsCountAggregateOutputType | null
    _avg: EmployeeAnalyticsAvgAggregateOutputType | null
    _sum: EmployeeAnalyticsSumAggregateOutputType | null
    _min: EmployeeAnalyticsMinAggregateOutputType | null
    _max: EmployeeAnalyticsMaxAggregateOutputType | null
  }

  export type EmployeeAnalyticsAvgAggregateOutputType = {
    totalTasks: number | null
    completedTasks: number | null
    completedOnTime: number | null
    completedLate: number | null
    postponedTasks: number | null
    avgPostponeDays: number | null
    avgCompletionTime: number | null
    urgentTasksCount: number | null
    urgentTasksOnTime: number | null
    workloadScore: number | null
    timeManagementScore: number | null
  }

  export type EmployeeAnalyticsSumAggregateOutputType = {
    totalTasks: number | null
    completedTasks: number | null
    completedOnTime: number | null
    completedLate: number | null
    postponedTasks: number | null
    avgPostponeDays: number | null
    avgCompletionTime: number | null
    urgentTasksCount: number | null
    urgentTasksOnTime: number | null
    workloadScore: number | null
    timeManagementScore: number | null
  }

  export type EmployeeAnalyticsMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    period: string | null
    totalTasks: number | null
    completedTasks: number | null
    completedOnTime: number | null
    completedLate: number | null
    postponedTasks: number | null
    avgPostponeDays: number | null
    avgCompletionTime: number | null
    urgentTasksCount: number | null
    urgentTasksOnTime: number | null
    commonPostponeReason: string | null
    workloadScore: number | null
    timeManagementScore: number | null
    aiAnalysis: string | null
    recommendations: string | null
    alertLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeAnalyticsMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    period: string | null
    totalTasks: number | null
    completedTasks: number | null
    completedOnTime: number | null
    completedLate: number | null
    postponedTasks: number | null
    avgPostponeDays: number | null
    avgCompletionTime: number | null
    urgentTasksCount: number | null
    urgentTasksOnTime: number | null
    commonPostponeReason: string | null
    workloadScore: number | null
    timeManagementScore: number | null
    aiAnalysis: string | null
    recommendations: string | null
    alertLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeAnalyticsCountAggregateOutputType = {
    id: number
    employeeId: number
    period: number
    totalTasks: number
    completedTasks: number
    completedOnTime: number
    completedLate: number
    postponedTasks: number
    avgPostponeDays: number
    avgCompletionTime: number
    urgentTasksCount: number
    urgentTasksOnTime: number
    commonPostponeReason: number
    workloadScore: number
    timeManagementScore: number
    aiAnalysis: number
    recommendations: number
    alertLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeAnalyticsAvgAggregateInputType = {
    totalTasks?: true
    completedTasks?: true
    completedOnTime?: true
    completedLate?: true
    postponedTasks?: true
    avgPostponeDays?: true
    avgCompletionTime?: true
    urgentTasksCount?: true
    urgentTasksOnTime?: true
    workloadScore?: true
    timeManagementScore?: true
  }

  export type EmployeeAnalyticsSumAggregateInputType = {
    totalTasks?: true
    completedTasks?: true
    completedOnTime?: true
    completedLate?: true
    postponedTasks?: true
    avgPostponeDays?: true
    avgCompletionTime?: true
    urgentTasksCount?: true
    urgentTasksOnTime?: true
    workloadScore?: true
    timeManagementScore?: true
  }

  export type EmployeeAnalyticsMinAggregateInputType = {
    id?: true
    employeeId?: true
    period?: true
    totalTasks?: true
    completedTasks?: true
    completedOnTime?: true
    completedLate?: true
    postponedTasks?: true
    avgPostponeDays?: true
    avgCompletionTime?: true
    urgentTasksCount?: true
    urgentTasksOnTime?: true
    commonPostponeReason?: true
    workloadScore?: true
    timeManagementScore?: true
    aiAnalysis?: true
    recommendations?: true
    alertLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeAnalyticsMaxAggregateInputType = {
    id?: true
    employeeId?: true
    period?: true
    totalTasks?: true
    completedTasks?: true
    completedOnTime?: true
    completedLate?: true
    postponedTasks?: true
    avgPostponeDays?: true
    avgCompletionTime?: true
    urgentTasksCount?: true
    urgentTasksOnTime?: true
    commonPostponeReason?: true
    workloadScore?: true
    timeManagementScore?: true
    aiAnalysis?: true
    recommendations?: true
    alertLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeAnalyticsCountAggregateInputType = {
    id?: true
    employeeId?: true
    period?: true
    totalTasks?: true
    completedTasks?: true
    completedOnTime?: true
    completedLate?: true
    postponedTasks?: true
    avgPostponeDays?: true
    avgCompletionTime?: true
    urgentTasksCount?: true
    urgentTasksOnTime?: true
    commonPostponeReason?: true
    workloadScore?: true
    timeManagementScore?: true
    aiAnalysis?: true
    recommendations?: true
    alertLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeAnalytics to aggregate.
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeAnalytics to fetch.
     */
    orderBy?: EmployeeAnalyticsOrderByWithRelationInput | EmployeeAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeAnalytics
    **/
    _count?: true | EmployeeAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeAnalyticsMaxAggregateInputType
  }

  export type GetEmployeeAnalyticsAggregateType<T extends EmployeeAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeAnalytics[P]>
      : GetScalarType<T[P], AggregateEmployeeAnalytics[P]>
  }




  export type EmployeeAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeAnalyticsWhereInput
    orderBy?: EmployeeAnalyticsOrderByWithAggregationInput | EmployeeAnalyticsOrderByWithAggregationInput[]
    by: EmployeeAnalyticsScalarFieldEnum[] | EmployeeAnalyticsScalarFieldEnum
    having?: EmployeeAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeAnalyticsCountAggregateInputType | true
    _avg?: EmployeeAnalyticsAvgAggregateInputType
    _sum?: EmployeeAnalyticsSumAggregateInputType
    _min?: EmployeeAnalyticsMinAggregateInputType
    _max?: EmployeeAnalyticsMaxAggregateInputType
  }

  export type EmployeeAnalyticsGroupByOutputType = {
    id: string
    employeeId: string
    period: string
    totalTasks: number
    completedTasks: number
    completedOnTime: number
    completedLate: number
    postponedTasks: number
    avgPostponeDays: number
    avgCompletionTime: number
    urgentTasksCount: number
    urgentTasksOnTime: number
    commonPostponeReason: string | null
    workloadScore: number
    timeManagementScore: number
    aiAnalysis: string | null
    recommendations: string | null
    alertLevel: string
    createdAt: Date
    updatedAt: Date
    _count: EmployeeAnalyticsCountAggregateOutputType | null
    _avg: EmployeeAnalyticsAvgAggregateOutputType | null
    _sum: EmployeeAnalyticsSumAggregateOutputType | null
    _min: EmployeeAnalyticsMinAggregateOutputType | null
    _max: EmployeeAnalyticsMaxAggregateOutputType | null
  }

  type GetEmployeeAnalyticsGroupByPayload<T extends EmployeeAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    period?: boolean
    totalTasks?: boolean
    completedTasks?: boolean
    completedOnTime?: boolean
    completedLate?: boolean
    postponedTasks?: boolean
    avgPostponeDays?: boolean
    avgCompletionTime?: boolean
    urgentTasksCount?: boolean
    urgentTasksOnTime?: boolean
    commonPostponeReason?: boolean
    workloadScore?: boolean
    timeManagementScore?: boolean
    aiAnalysis?: boolean
    recommendations?: boolean
    alertLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeAnalytics"]>



  export type EmployeeAnalyticsSelectScalar = {
    id?: boolean
    employeeId?: boolean
    period?: boolean
    totalTasks?: boolean
    completedTasks?: boolean
    completedOnTime?: boolean
    completedLate?: boolean
    postponedTasks?: boolean
    avgPostponeDays?: boolean
    avgCompletionTime?: boolean
    urgentTasksCount?: boolean
    urgentTasksOnTime?: boolean
    commonPostponeReason?: boolean
    workloadScore?: boolean
    timeManagementScore?: boolean
    aiAnalysis?: boolean
    recommendations?: boolean
    alertLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeAnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "period" | "totalTasks" | "completedTasks" | "completedOnTime" | "completedLate" | "postponedTasks" | "avgPostponeDays" | "avgCompletionTime" | "urgentTasksCount" | "urgentTasksOnTime" | "commonPostponeReason" | "workloadScore" | "timeManagementScore" | "aiAnalysis" | "recommendations" | "alertLevel" | "createdAt" | "updatedAt", ExtArgs["result"]["employeeAnalytics"]>
  export type EmployeeAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmployeeAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeAnalytics"
    objects: {
      employee: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      period: string
      totalTasks: number
      completedTasks: number
      completedOnTime: number
      completedLate: number
      postponedTasks: number
      avgPostponeDays: number
      avgCompletionTime: number
      urgentTasksCount: number
      urgentTasksOnTime: number
      commonPostponeReason: string | null
      workloadScore: number
      timeManagementScore: number
      aiAnalysis: string | null
      recommendations: string | null
      alertLevel: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employeeAnalytics"]>
    composites: {}
  }

  type EmployeeAnalyticsGetPayload<S extends boolean | null | undefined | EmployeeAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$EmployeeAnalyticsPayload, S>

  type EmployeeAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeAnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeAnalyticsCountAggregateInputType | true
    }

  export interface EmployeeAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeAnalytics'], meta: { name: 'EmployeeAnalytics' } }
    /**
     * Find zero or one EmployeeAnalytics that matches the filter.
     * @param {EmployeeAnalyticsFindUniqueArgs} args - Arguments to find a EmployeeAnalytics
     * @example
     * // Get one EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeAnalyticsFindUniqueArgs>(args: SelectSubset<T, EmployeeAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmployeeAnalytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a EmployeeAnalytics
     * @example
     * // Get one EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsFindFirstArgs} args - Arguments to find a EmployeeAnalytics
     * @example
     * // Get one EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeAnalyticsFindFirstArgs>(args?: SelectSubset<T, EmployeeAnalyticsFindFirstArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsFindFirstOrThrowArgs} args - Arguments to find a EmployeeAnalytics
     * @example
     * // Get one EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmployeeAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findMany()
     * 
     * // Get first 10 EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeAnalyticsWithIdOnly = await prisma.employeeAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeAnalyticsFindManyArgs>(args?: SelectSubset<T, EmployeeAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmployeeAnalytics.
     * @param {EmployeeAnalyticsCreateArgs} args - Arguments to create a EmployeeAnalytics.
     * @example
     * // Create one EmployeeAnalytics
     * const EmployeeAnalytics = await prisma.employeeAnalytics.create({
     *   data: {
     *     // ... data to create a EmployeeAnalytics
     *   }
     * })
     * 
     */
    create<T extends EmployeeAnalyticsCreateArgs>(args: SelectSubset<T, EmployeeAnalyticsCreateArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmployeeAnalytics.
     * @param {EmployeeAnalyticsCreateManyArgs} args - Arguments to create many EmployeeAnalytics.
     * @example
     * // Create many EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeAnalyticsCreateManyArgs>(args?: SelectSubset<T, EmployeeAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeAnalytics.
     * @param {EmployeeAnalyticsDeleteArgs} args - Arguments to delete one EmployeeAnalytics.
     * @example
     * // Delete one EmployeeAnalytics
     * const EmployeeAnalytics = await prisma.employeeAnalytics.delete({
     *   where: {
     *     // ... filter to delete one EmployeeAnalytics
     *   }
     * })
     * 
     */
    delete<T extends EmployeeAnalyticsDeleteArgs>(args: SelectSubset<T, EmployeeAnalyticsDeleteArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmployeeAnalytics.
     * @param {EmployeeAnalyticsUpdateArgs} args - Arguments to update one EmployeeAnalytics.
     * @example
     * // Update one EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeAnalyticsUpdateArgs>(args: SelectSubset<T, EmployeeAnalyticsUpdateArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmployeeAnalytics.
     * @param {EmployeeAnalyticsDeleteManyArgs} args - Arguments to filter EmployeeAnalytics to delete.
     * @example
     * // Delete a few EmployeeAnalytics
     * const { count } = await prisma.employeeAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeAnalyticsDeleteManyArgs>(args?: SelectSubset<T, EmployeeAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeAnalyticsUpdateManyArgs>(args: SelectSubset<T, EmployeeAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeAnalytics.
     * @param {EmployeeAnalyticsUpsertArgs} args - Arguments to update or create a EmployeeAnalytics.
     * @example
     * // Update or create a EmployeeAnalytics
     * const employeeAnalytics = await prisma.employeeAnalytics.upsert({
     *   create: {
     *     // ... data to create a EmployeeAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeAnalyticsUpsertArgs>(args: SelectSubset<T, EmployeeAnalyticsUpsertArgs<ExtArgs>>): Prisma__EmployeeAnalyticsClient<$Result.GetResult<Prisma.$EmployeeAnalyticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmployeeAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsCountArgs} args - Arguments to filter EmployeeAnalytics to count.
     * @example
     * // Count the number of EmployeeAnalytics
     * const count = await prisma.employeeAnalytics.count({
     *   where: {
     *     // ... the filter for the EmployeeAnalytics we want to count
     *   }
     * })
    **/
    count<T extends EmployeeAnalyticsCountArgs>(
      args?: Subset<T, EmployeeAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAnalyticsAggregateArgs>(args: Subset<T, EmployeeAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAnalyticsAggregateType<T>>

    /**
     * Group by EmployeeAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeAnalytics model
   */
  readonly fields: EmployeeAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeAnalytics model
   */
  interface EmployeeAnalyticsFieldRefs {
    readonly id: FieldRef<"EmployeeAnalytics", 'String'>
    readonly employeeId: FieldRef<"EmployeeAnalytics", 'String'>
    readonly period: FieldRef<"EmployeeAnalytics", 'String'>
    readonly totalTasks: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly completedTasks: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly completedOnTime: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly completedLate: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly postponedTasks: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly avgPostponeDays: FieldRef<"EmployeeAnalytics", 'Float'>
    readonly avgCompletionTime: FieldRef<"EmployeeAnalytics", 'Float'>
    readonly urgentTasksCount: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly urgentTasksOnTime: FieldRef<"EmployeeAnalytics", 'Int'>
    readonly commonPostponeReason: FieldRef<"EmployeeAnalytics", 'String'>
    readonly workloadScore: FieldRef<"EmployeeAnalytics", 'Float'>
    readonly timeManagementScore: FieldRef<"EmployeeAnalytics", 'Float'>
    readonly aiAnalysis: FieldRef<"EmployeeAnalytics", 'String'>
    readonly recommendations: FieldRef<"EmployeeAnalytics", 'String'>
    readonly alertLevel: FieldRef<"EmployeeAnalytics", 'String'>
    readonly createdAt: FieldRef<"EmployeeAnalytics", 'DateTime'>
    readonly updatedAt: FieldRef<"EmployeeAnalytics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeAnalytics findUnique
   */
  export type EmployeeAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeAnalytics to fetch.
     */
    where: EmployeeAnalyticsWhereUniqueInput
  }

  /**
   * EmployeeAnalytics findUniqueOrThrow
   */
  export type EmployeeAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeAnalytics to fetch.
     */
    where: EmployeeAnalyticsWhereUniqueInput
  }

  /**
   * EmployeeAnalytics findFirst
   */
  export type EmployeeAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeAnalytics to fetch.
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeAnalytics to fetch.
     */
    orderBy?: EmployeeAnalyticsOrderByWithRelationInput | EmployeeAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeAnalytics.
     */
    cursor?: EmployeeAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeAnalytics.
     */
    distinct?: EmployeeAnalyticsScalarFieldEnum | EmployeeAnalyticsScalarFieldEnum[]
  }

  /**
   * EmployeeAnalytics findFirstOrThrow
   */
  export type EmployeeAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeAnalytics to fetch.
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeAnalytics to fetch.
     */
    orderBy?: EmployeeAnalyticsOrderByWithRelationInput | EmployeeAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeAnalytics.
     */
    cursor?: EmployeeAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeAnalytics.
     */
    distinct?: EmployeeAnalyticsScalarFieldEnum | EmployeeAnalyticsScalarFieldEnum[]
  }

  /**
   * EmployeeAnalytics findMany
   */
  export type EmployeeAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeAnalytics to fetch.
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeAnalytics to fetch.
     */
    orderBy?: EmployeeAnalyticsOrderByWithRelationInput | EmployeeAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeAnalytics.
     */
    cursor?: EmployeeAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeAnalytics.
     */
    skip?: number
    distinct?: EmployeeAnalyticsScalarFieldEnum | EmployeeAnalyticsScalarFieldEnum[]
  }

  /**
   * EmployeeAnalytics create
   */
  export type EmployeeAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeAnalytics.
     */
    data: XOR<EmployeeAnalyticsCreateInput, EmployeeAnalyticsUncheckedCreateInput>
  }

  /**
   * EmployeeAnalytics createMany
   */
  export type EmployeeAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeAnalytics.
     */
    data: EmployeeAnalyticsCreateManyInput | EmployeeAnalyticsCreateManyInput[]
  }

  /**
   * EmployeeAnalytics update
   */
  export type EmployeeAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeAnalytics.
     */
    data: XOR<EmployeeAnalyticsUpdateInput, EmployeeAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which EmployeeAnalytics to update.
     */
    where: EmployeeAnalyticsWhereUniqueInput
  }

  /**
   * EmployeeAnalytics updateMany
   */
  export type EmployeeAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeAnalytics.
     */
    data: XOR<EmployeeAnalyticsUpdateManyMutationInput, EmployeeAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeAnalytics to update
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * Limit how many EmployeeAnalytics to update.
     */
    limit?: number
  }

  /**
   * EmployeeAnalytics upsert
   */
  export type EmployeeAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeAnalytics to update in case it exists.
     */
    where: EmployeeAnalyticsWhereUniqueInput
    /**
     * In case the EmployeeAnalytics found by the `where` argument doesn't exist, create a new EmployeeAnalytics with this data.
     */
    create: XOR<EmployeeAnalyticsCreateInput, EmployeeAnalyticsUncheckedCreateInput>
    /**
     * In case the EmployeeAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeAnalyticsUpdateInput, EmployeeAnalyticsUncheckedUpdateInput>
  }

  /**
   * EmployeeAnalytics delete
   */
  export type EmployeeAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which EmployeeAnalytics to delete.
     */
    where: EmployeeAnalyticsWhereUniqueInput
  }

  /**
   * EmployeeAnalytics deleteMany
   */
  export type EmployeeAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeAnalytics to delete
     */
    where?: EmployeeAnalyticsWhereInput
    /**
     * Limit how many EmployeeAnalytics to delete.
     */
    limit?: number
  }

  /**
   * EmployeeAnalytics without action
   */
  export type EmployeeAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeAnalytics
     */
    select?: EmployeeAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeAnalytics
     */
    omit?: EmployeeAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model FileStorage
   */

  export type AggregateFileStorage = {
    _count: FileStorageCountAggregateOutputType | null
    _avg: FileStorageAvgAggregateOutputType | null
    _sum: FileStorageSumAggregateOutputType | null
    _min: FileStorageMinAggregateOutputType | null
    _max: FileStorageMaxAggregateOutputType | null
  }

  export type FileStorageAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FileStorageSumAggregateOutputType = {
    fileSize: number | null
  }

  export type FileStorageMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    mimeType: string | null
    fileSize: number | null
    bucket: string | null
    path: string | null
    uploadedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type FileStorageMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    mimeType: string | null
    fileSize: number | null
    bucket: string | null
    path: string | null
    uploadedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type FileStorageCountAggregateOutputType = {
    id: number
    fileName: number
    fileUrl: number
    mimeType: number
    fileSize: number
    bucket: number
    path: number
    uploadedBy: number
    createdAt: number
    updatedAt: number
    deleted: number
    deletedAt: number
    _all: number
  }


  export type FileStorageAvgAggregateInputType = {
    fileSize?: true
  }

  export type FileStorageSumAggregateInputType = {
    fileSize?: true
  }

  export type FileStorageMinAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
    fileSize?: true
    bucket?: true
    path?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
  }

  export type FileStorageMaxAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
    fileSize?: true
    bucket?: true
    path?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
  }

  export type FileStorageCountAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    mimeType?: true
    fileSize?: true
    bucket?: true
    path?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
    _all?: true
  }

  export type FileStorageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileStorage to aggregate.
     */
    where?: FileStorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStorages to fetch.
     */
    orderBy?: FileStorageOrderByWithRelationInput | FileStorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileStorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStorages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStorages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileStorages
    **/
    _count?: true | FileStorageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileStorageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileStorageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileStorageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileStorageMaxAggregateInputType
  }

  export type GetFileStorageAggregateType<T extends FileStorageAggregateArgs> = {
        [P in keyof T & keyof AggregateFileStorage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileStorage[P]>
      : GetScalarType<T[P], AggregateFileStorage[P]>
  }




  export type FileStorageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStorageWhereInput
    orderBy?: FileStorageOrderByWithAggregationInput | FileStorageOrderByWithAggregationInput[]
    by: FileStorageScalarFieldEnum[] | FileStorageScalarFieldEnum
    having?: FileStorageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileStorageCountAggregateInputType | true
    _avg?: FileStorageAvgAggregateInputType
    _sum?: FileStorageSumAggregateInputType
    _min?: FileStorageMinAggregateInputType
    _max?: FileStorageMaxAggregateInputType
  }

  export type FileStorageGroupByOutputType = {
    id: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    uploadedBy: string
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    deletedAt: Date | null
    _count: FileStorageCountAggregateOutputType | null
    _avg: FileStorageAvgAggregateOutputType | null
    _sum: FileStorageSumAggregateOutputType | null
    _min: FileStorageMinAggregateOutputType | null
    _max: FileStorageMaxAggregateOutputType | null
  }

  type GetFileStorageGroupByPayload<T extends FileStorageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileStorageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileStorageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileStorageGroupByOutputType[P]>
            : GetScalarType<T[P], FileStorageGroupByOutputType[P]>
        }
      >
    >


  export type FileStorageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    mimeType?: boolean
    fileSize?: boolean
    bucket?: boolean
    path?: boolean
    uploadedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileStorage"]>



  export type FileStorageSelectScalar = {
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    mimeType?: boolean
    fileSize?: boolean
    bucket?: boolean
    path?: boolean
    uploadedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
  }

  export type FileStorageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileName" | "fileUrl" | "mimeType" | "fileSize" | "bucket" | "path" | "uploadedBy" | "createdAt" | "updatedAt" | "deleted" | "deletedAt", ExtArgs["result"]["fileStorage"]>
  export type FileStorageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FileStoragePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileStorage"
    objects: {
      uploader: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      fileUrl: string
      mimeType: string
      fileSize: number
      bucket: string
      path: string
      uploadedBy: string
      createdAt: Date
      updatedAt: Date
      deleted: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["fileStorage"]>
    composites: {}
  }

  type FileStorageGetPayload<S extends boolean | null | undefined | FileStorageDefaultArgs> = $Result.GetResult<Prisma.$FileStoragePayload, S>

  type FileStorageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileStorageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileStorageCountAggregateInputType | true
    }

  export interface FileStorageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileStorage'], meta: { name: 'FileStorage' } }
    /**
     * Find zero or one FileStorage that matches the filter.
     * @param {FileStorageFindUniqueArgs} args - Arguments to find a FileStorage
     * @example
     * // Get one FileStorage
     * const fileStorage = await prisma.fileStorage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileStorageFindUniqueArgs>(args: SelectSubset<T, FileStorageFindUniqueArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FileStorage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileStorageFindUniqueOrThrowArgs} args - Arguments to find a FileStorage
     * @example
     * // Get one FileStorage
     * const fileStorage = await prisma.fileStorage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileStorageFindUniqueOrThrowArgs>(args: SelectSubset<T, FileStorageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileStorage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageFindFirstArgs} args - Arguments to find a FileStorage
     * @example
     * // Get one FileStorage
     * const fileStorage = await prisma.fileStorage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileStorageFindFirstArgs>(args?: SelectSubset<T, FileStorageFindFirstArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileStorage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageFindFirstOrThrowArgs} args - Arguments to find a FileStorage
     * @example
     * // Get one FileStorage
     * const fileStorage = await prisma.fileStorage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileStorageFindFirstOrThrowArgs>(args?: SelectSubset<T, FileStorageFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FileStorages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileStorages
     * const fileStorages = await prisma.fileStorage.findMany()
     * 
     * // Get first 10 FileStorages
     * const fileStorages = await prisma.fileStorage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileStorageWithIdOnly = await prisma.fileStorage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileStorageFindManyArgs>(args?: SelectSubset<T, FileStorageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FileStorage.
     * @param {FileStorageCreateArgs} args - Arguments to create a FileStorage.
     * @example
     * // Create one FileStorage
     * const FileStorage = await prisma.fileStorage.create({
     *   data: {
     *     // ... data to create a FileStorage
     *   }
     * })
     * 
     */
    create<T extends FileStorageCreateArgs>(args: SelectSubset<T, FileStorageCreateArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FileStorages.
     * @param {FileStorageCreateManyArgs} args - Arguments to create many FileStorages.
     * @example
     * // Create many FileStorages
     * const fileStorage = await prisma.fileStorage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileStorageCreateManyArgs>(args?: SelectSubset<T, FileStorageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FileStorage.
     * @param {FileStorageDeleteArgs} args - Arguments to delete one FileStorage.
     * @example
     * // Delete one FileStorage
     * const FileStorage = await prisma.fileStorage.delete({
     *   where: {
     *     // ... filter to delete one FileStorage
     *   }
     * })
     * 
     */
    delete<T extends FileStorageDeleteArgs>(args: SelectSubset<T, FileStorageDeleteArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FileStorage.
     * @param {FileStorageUpdateArgs} args - Arguments to update one FileStorage.
     * @example
     * // Update one FileStorage
     * const fileStorage = await prisma.fileStorage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileStorageUpdateArgs>(args: SelectSubset<T, FileStorageUpdateArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FileStorages.
     * @param {FileStorageDeleteManyArgs} args - Arguments to filter FileStorages to delete.
     * @example
     * // Delete a few FileStorages
     * const { count } = await prisma.fileStorage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileStorageDeleteManyArgs>(args?: SelectSubset<T, FileStorageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileStorages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileStorages
     * const fileStorage = await prisma.fileStorage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileStorageUpdateManyArgs>(args: SelectSubset<T, FileStorageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FileStorage.
     * @param {FileStorageUpsertArgs} args - Arguments to update or create a FileStorage.
     * @example
     * // Update or create a FileStorage
     * const fileStorage = await prisma.fileStorage.upsert({
     *   create: {
     *     // ... data to create a FileStorage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileStorage we want to update
     *   }
     * })
     */
    upsert<T extends FileStorageUpsertArgs>(args: SelectSubset<T, FileStorageUpsertArgs<ExtArgs>>): Prisma__FileStorageClient<$Result.GetResult<Prisma.$FileStoragePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FileStorages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageCountArgs} args - Arguments to filter FileStorages to count.
     * @example
     * // Count the number of FileStorages
     * const count = await prisma.fileStorage.count({
     *   where: {
     *     // ... the filter for the FileStorages we want to count
     *   }
     * })
    **/
    count<T extends FileStorageCountArgs>(
      args?: Subset<T, FileStorageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileStorageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileStorage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileStorageAggregateArgs>(args: Subset<T, FileStorageAggregateArgs>): Prisma.PrismaPromise<GetFileStorageAggregateType<T>>

    /**
     * Group by FileStorage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStorageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileStorageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileStorageGroupByArgs['orderBy'] }
        : { orderBy?: FileStorageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileStorageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileStorageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileStorage model
   */
  readonly fields: FileStorageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileStorage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileStorageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileStorage model
   */
  interface FileStorageFieldRefs {
    readonly id: FieldRef<"FileStorage", 'String'>
    readonly fileName: FieldRef<"FileStorage", 'String'>
    readonly fileUrl: FieldRef<"FileStorage", 'String'>
    readonly mimeType: FieldRef<"FileStorage", 'String'>
    readonly fileSize: FieldRef<"FileStorage", 'Int'>
    readonly bucket: FieldRef<"FileStorage", 'String'>
    readonly path: FieldRef<"FileStorage", 'String'>
    readonly uploadedBy: FieldRef<"FileStorage", 'String'>
    readonly createdAt: FieldRef<"FileStorage", 'DateTime'>
    readonly updatedAt: FieldRef<"FileStorage", 'DateTime'>
    readonly deleted: FieldRef<"FileStorage", 'Boolean'>
    readonly deletedAt: FieldRef<"FileStorage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FileStorage findUnique
   */
  export type FileStorageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter, which FileStorage to fetch.
     */
    where: FileStorageWhereUniqueInput
  }

  /**
   * FileStorage findUniqueOrThrow
   */
  export type FileStorageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter, which FileStorage to fetch.
     */
    where: FileStorageWhereUniqueInput
  }

  /**
   * FileStorage findFirst
   */
  export type FileStorageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter, which FileStorage to fetch.
     */
    where?: FileStorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStorages to fetch.
     */
    orderBy?: FileStorageOrderByWithRelationInput | FileStorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileStorages.
     */
    cursor?: FileStorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStorages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStorages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileStorages.
     */
    distinct?: FileStorageScalarFieldEnum | FileStorageScalarFieldEnum[]
  }

  /**
   * FileStorage findFirstOrThrow
   */
  export type FileStorageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter, which FileStorage to fetch.
     */
    where?: FileStorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStorages to fetch.
     */
    orderBy?: FileStorageOrderByWithRelationInput | FileStorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileStorages.
     */
    cursor?: FileStorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStorages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStorages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileStorages.
     */
    distinct?: FileStorageScalarFieldEnum | FileStorageScalarFieldEnum[]
  }

  /**
   * FileStorage findMany
   */
  export type FileStorageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter, which FileStorages to fetch.
     */
    where?: FileStorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStorages to fetch.
     */
    orderBy?: FileStorageOrderByWithRelationInput | FileStorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileStorages.
     */
    cursor?: FileStorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStorages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStorages.
     */
    skip?: number
    distinct?: FileStorageScalarFieldEnum | FileStorageScalarFieldEnum[]
  }

  /**
   * FileStorage create
   */
  export type FileStorageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * The data needed to create a FileStorage.
     */
    data: XOR<FileStorageCreateInput, FileStorageUncheckedCreateInput>
  }

  /**
   * FileStorage createMany
   */
  export type FileStorageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileStorages.
     */
    data: FileStorageCreateManyInput | FileStorageCreateManyInput[]
  }

  /**
   * FileStorage update
   */
  export type FileStorageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * The data needed to update a FileStorage.
     */
    data: XOR<FileStorageUpdateInput, FileStorageUncheckedUpdateInput>
    /**
     * Choose, which FileStorage to update.
     */
    where: FileStorageWhereUniqueInput
  }

  /**
   * FileStorage updateMany
   */
  export type FileStorageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileStorages.
     */
    data: XOR<FileStorageUpdateManyMutationInput, FileStorageUncheckedUpdateManyInput>
    /**
     * Filter which FileStorages to update
     */
    where?: FileStorageWhereInput
    /**
     * Limit how many FileStorages to update.
     */
    limit?: number
  }

  /**
   * FileStorage upsert
   */
  export type FileStorageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * The filter to search for the FileStorage to update in case it exists.
     */
    where: FileStorageWhereUniqueInput
    /**
     * In case the FileStorage found by the `where` argument doesn't exist, create a new FileStorage with this data.
     */
    create: XOR<FileStorageCreateInput, FileStorageUncheckedCreateInput>
    /**
     * In case the FileStorage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileStorageUpdateInput, FileStorageUncheckedUpdateInput>
  }

  /**
   * FileStorage delete
   */
  export type FileStorageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
    /**
     * Filter which FileStorage to delete.
     */
    where: FileStorageWhereUniqueInput
  }

  /**
   * FileStorage deleteMany
   */
  export type FileStorageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileStorages to delete
     */
    where?: FileStorageWhereInput
    /**
     * Limit how many FileStorages to delete.
     */
    limit?: number
  }

  /**
   * FileStorage without action
   */
  export type FileStorageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStorage
     */
    select?: FileStorageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStorage
     */
    omit?: FileStorageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStorageInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    module: string | null
    targetType: string | null
    targetId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    module: string | null
    targetType: string | null
    targetId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    adminId: number
    action: number
    module: number
    targetType: number
    targetId: number
    oldValue: number
    newValue: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    module?: true
    targetType?: true
    targetId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    module?: true
    targetType?: true
    targetId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    module?: true
    targetType?: true
    targetId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    adminId: string
    action: string
    module: string
    targetType: string
    targetId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string
    userAgent: string
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    module?: boolean
    targetType?: boolean
    targetId?: boolean
    oldValue?: boolean
    newValue?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>



  export type AuditLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    action?: boolean
    module?: boolean
    targetType?: boolean
    targetId?: boolean
    oldValue?: boolean
    newValue?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "action" | "module" | "targetType" | "targetId" | "oldValue" | "newValue" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminId: string
      action: string
      module: string
      targetType: string
      targetId: string | null
      oldValue: string | null
      newValue: string | null
      ipAddress: string
      userAgent: string
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly adminId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly module: FieldRef<"AuditLog", 'String'>
    readonly targetType: FieldRef<"AuditLog", 'String'>
    readonly targetId: FieldRef<"AuditLog", 'String'>
    readonly oldValue: FieldRef<"AuditLog", 'String'>
    readonly newValue: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model SystemChangeLog
   */

  export type AggregateSystemChangeLog = {
    _count: SystemChangeLogCountAggregateOutputType | null
    _min: SystemChangeLogMinAggregateOutputType | null
    _max: SystemChangeLogMaxAggregateOutputType | null
  }

  export type SystemChangeLogMinAggregateOutputType = {
    id: string | null
    changedBy: string | null
    component: string | null
    changeType: string | null
    description: string | null
    details: string | null
    createdAt: Date | null
  }

  export type SystemChangeLogMaxAggregateOutputType = {
    id: string | null
    changedBy: string | null
    component: string | null
    changeType: string | null
    description: string | null
    details: string | null
    createdAt: Date | null
  }

  export type SystemChangeLogCountAggregateOutputType = {
    id: number
    changedBy: number
    component: number
    changeType: number
    description: number
    details: number
    createdAt: number
    _all: number
  }


  export type SystemChangeLogMinAggregateInputType = {
    id?: true
    changedBy?: true
    component?: true
    changeType?: true
    description?: true
    details?: true
    createdAt?: true
  }

  export type SystemChangeLogMaxAggregateInputType = {
    id?: true
    changedBy?: true
    component?: true
    changeType?: true
    description?: true
    details?: true
    createdAt?: true
  }

  export type SystemChangeLogCountAggregateInputType = {
    id?: true
    changedBy?: true
    component?: true
    changeType?: true
    description?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type SystemChangeLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemChangeLog to aggregate.
     */
    where?: SystemChangeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemChangeLogs to fetch.
     */
    orderBy?: SystemChangeLogOrderByWithRelationInput | SystemChangeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemChangeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemChangeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemChangeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemChangeLogs
    **/
    _count?: true | SystemChangeLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemChangeLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemChangeLogMaxAggregateInputType
  }

  export type GetSystemChangeLogAggregateType<T extends SystemChangeLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemChangeLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemChangeLog[P]>
      : GetScalarType<T[P], AggregateSystemChangeLog[P]>
  }




  export type SystemChangeLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemChangeLogWhereInput
    orderBy?: SystemChangeLogOrderByWithAggregationInput | SystemChangeLogOrderByWithAggregationInput[]
    by: SystemChangeLogScalarFieldEnum[] | SystemChangeLogScalarFieldEnum
    having?: SystemChangeLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemChangeLogCountAggregateInputType | true
    _min?: SystemChangeLogMinAggregateInputType
    _max?: SystemChangeLogMaxAggregateInputType
  }

  export type SystemChangeLogGroupByOutputType = {
    id: string
    changedBy: string
    component: string
    changeType: string
    description: string
    details: string | null
    createdAt: Date
    _count: SystemChangeLogCountAggregateOutputType | null
    _min: SystemChangeLogMinAggregateOutputType | null
    _max: SystemChangeLogMaxAggregateOutputType | null
  }

  type GetSystemChangeLogGroupByPayload<T extends SystemChangeLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemChangeLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemChangeLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemChangeLogGroupByOutputType[P]>
            : GetScalarType<T[P], SystemChangeLogGroupByOutputType[P]>
        }
      >
    >


  export type SystemChangeLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    changedBy?: boolean
    component?: boolean
    changeType?: boolean
    description?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["systemChangeLog"]>



  export type SystemChangeLogSelectScalar = {
    id?: boolean
    changedBy?: boolean
    component?: boolean
    changeType?: boolean
    description?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type SystemChangeLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "changedBy" | "component" | "changeType" | "description" | "details" | "createdAt", ExtArgs["result"]["systemChangeLog"]>
  export type SystemChangeLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SystemChangeLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemChangeLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      changedBy: string
      component: string
      changeType: string
      description: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["systemChangeLog"]>
    composites: {}
  }

  type SystemChangeLogGetPayload<S extends boolean | null | undefined | SystemChangeLogDefaultArgs> = $Result.GetResult<Prisma.$SystemChangeLogPayload, S>

  type SystemChangeLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemChangeLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemChangeLogCountAggregateInputType | true
    }

  export interface SystemChangeLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemChangeLog'], meta: { name: 'SystemChangeLog' } }
    /**
     * Find zero or one SystemChangeLog that matches the filter.
     * @param {SystemChangeLogFindUniqueArgs} args - Arguments to find a SystemChangeLog
     * @example
     * // Get one SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemChangeLogFindUniqueArgs>(args: SelectSubset<T, SystemChangeLogFindUniqueArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemChangeLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemChangeLogFindUniqueOrThrowArgs} args - Arguments to find a SystemChangeLog
     * @example
     * // Get one SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemChangeLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemChangeLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemChangeLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogFindFirstArgs} args - Arguments to find a SystemChangeLog
     * @example
     * // Get one SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemChangeLogFindFirstArgs>(args?: SelectSubset<T, SystemChangeLogFindFirstArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemChangeLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogFindFirstOrThrowArgs} args - Arguments to find a SystemChangeLog
     * @example
     * // Get one SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemChangeLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemChangeLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemChangeLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemChangeLogs
     * const systemChangeLogs = await prisma.systemChangeLog.findMany()
     * 
     * // Get first 10 SystemChangeLogs
     * const systemChangeLogs = await prisma.systemChangeLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemChangeLogWithIdOnly = await prisma.systemChangeLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemChangeLogFindManyArgs>(args?: SelectSubset<T, SystemChangeLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemChangeLog.
     * @param {SystemChangeLogCreateArgs} args - Arguments to create a SystemChangeLog.
     * @example
     * // Create one SystemChangeLog
     * const SystemChangeLog = await prisma.systemChangeLog.create({
     *   data: {
     *     // ... data to create a SystemChangeLog
     *   }
     * })
     * 
     */
    create<T extends SystemChangeLogCreateArgs>(args: SelectSubset<T, SystemChangeLogCreateArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemChangeLogs.
     * @param {SystemChangeLogCreateManyArgs} args - Arguments to create many SystemChangeLogs.
     * @example
     * // Create many SystemChangeLogs
     * const systemChangeLog = await prisma.systemChangeLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemChangeLogCreateManyArgs>(args?: SelectSubset<T, SystemChangeLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemChangeLog.
     * @param {SystemChangeLogDeleteArgs} args - Arguments to delete one SystemChangeLog.
     * @example
     * // Delete one SystemChangeLog
     * const SystemChangeLog = await prisma.systemChangeLog.delete({
     *   where: {
     *     // ... filter to delete one SystemChangeLog
     *   }
     * })
     * 
     */
    delete<T extends SystemChangeLogDeleteArgs>(args: SelectSubset<T, SystemChangeLogDeleteArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemChangeLog.
     * @param {SystemChangeLogUpdateArgs} args - Arguments to update one SystemChangeLog.
     * @example
     * // Update one SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemChangeLogUpdateArgs>(args: SelectSubset<T, SystemChangeLogUpdateArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemChangeLogs.
     * @param {SystemChangeLogDeleteManyArgs} args - Arguments to filter SystemChangeLogs to delete.
     * @example
     * // Delete a few SystemChangeLogs
     * const { count } = await prisma.systemChangeLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemChangeLogDeleteManyArgs>(args?: SelectSubset<T, SystemChangeLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemChangeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemChangeLogs
     * const systemChangeLog = await prisma.systemChangeLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemChangeLogUpdateManyArgs>(args: SelectSubset<T, SystemChangeLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemChangeLog.
     * @param {SystemChangeLogUpsertArgs} args - Arguments to update or create a SystemChangeLog.
     * @example
     * // Update or create a SystemChangeLog
     * const systemChangeLog = await prisma.systemChangeLog.upsert({
     *   create: {
     *     // ... data to create a SystemChangeLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemChangeLog we want to update
     *   }
     * })
     */
    upsert<T extends SystemChangeLogUpsertArgs>(args: SelectSubset<T, SystemChangeLogUpsertArgs<ExtArgs>>): Prisma__SystemChangeLogClient<$Result.GetResult<Prisma.$SystemChangeLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemChangeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogCountArgs} args - Arguments to filter SystemChangeLogs to count.
     * @example
     * // Count the number of SystemChangeLogs
     * const count = await prisma.systemChangeLog.count({
     *   where: {
     *     // ... the filter for the SystemChangeLogs we want to count
     *   }
     * })
    **/
    count<T extends SystemChangeLogCountArgs>(
      args?: Subset<T, SystemChangeLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemChangeLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemChangeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemChangeLogAggregateArgs>(args: Subset<T, SystemChangeLogAggregateArgs>): Prisma.PrismaPromise<GetSystemChangeLogAggregateType<T>>

    /**
     * Group by SystemChangeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemChangeLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemChangeLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemChangeLogGroupByArgs['orderBy'] }
        : { orderBy?: SystemChangeLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemChangeLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemChangeLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemChangeLog model
   */
  readonly fields: SystemChangeLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemChangeLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemChangeLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemChangeLog model
   */
  interface SystemChangeLogFieldRefs {
    readonly id: FieldRef<"SystemChangeLog", 'String'>
    readonly changedBy: FieldRef<"SystemChangeLog", 'String'>
    readonly component: FieldRef<"SystemChangeLog", 'String'>
    readonly changeType: FieldRef<"SystemChangeLog", 'String'>
    readonly description: FieldRef<"SystemChangeLog", 'String'>
    readonly details: FieldRef<"SystemChangeLog", 'String'>
    readonly createdAt: FieldRef<"SystemChangeLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemChangeLog findUnique
   */
  export type SystemChangeLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemChangeLog to fetch.
     */
    where: SystemChangeLogWhereUniqueInput
  }

  /**
   * SystemChangeLog findUniqueOrThrow
   */
  export type SystemChangeLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemChangeLog to fetch.
     */
    where: SystemChangeLogWhereUniqueInput
  }

  /**
   * SystemChangeLog findFirst
   */
  export type SystemChangeLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemChangeLog to fetch.
     */
    where?: SystemChangeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemChangeLogs to fetch.
     */
    orderBy?: SystemChangeLogOrderByWithRelationInput | SystemChangeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemChangeLogs.
     */
    cursor?: SystemChangeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemChangeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemChangeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemChangeLogs.
     */
    distinct?: SystemChangeLogScalarFieldEnum | SystemChangeLogScalarFieldEnum[]
  }

  /**
   * SystemChangeLog findFirstOrThrow
   */
  export type SystemChangeLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemChangeLog to fetch.
     */
    where?: SystemChangeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemChangeLogs to fetch.
     */
    orderBy?: SystemChangeLogOrderByWithRelationInput | SystemChangeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemChangeLogs.
     */
    cursor?: SystemChangeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemChangeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemChangeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemChangeLogs.
     */
    distinct?: SystemChangeLogScalarFieldEnum | SystemChangeLogScalarFieldEnum[]
  }

  /**
   * SystemChangeLog findMany
   */
  export type SystemChangeLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemChangeLogs to fetch.
     */
    where?: SystemChangeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemChangeLogs to fetch.
     */
    orderBy?: SystemChangeLogOrderByWithRelationInput | SystemChangeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemChangeLogs.
     */
    cursor?: SystemChangeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemChangeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemChangeLogs.
     */
    skip?: number
    distinct?: SystemChangeLogScalarFieldEnum | SystemChangeLogScalarFieldEnum[]
  }

  /**
   * SystemChangeLog create
   */
  export type SystemChangeLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SystemChangeLog.
     */
    data: XOR<SystemChangeLogCreateInput, SystemChangeLogUncheckedCreateInput>
  }

  /**
   * SystemChangeLog createMany
   */
  export type SystemChangeLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemChangeLogs.
     */
    data: SystemChangeLogCreateManyInput | SystemChangeLogCreateManyInput[]
  }

  /**
   * SystemChangeLog update
   */
  export type SystemChangeLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SystemChangeLog.
     */
    data: XOR<SystemChangeLogUpdateInput, SystemChangeLogUncheckedUpdateInput>
    /**
     * Choose, which SystemChangeLog to update.
     */
    where: SystemChangeLogWhereUniqueInput
  }

  /**
   * SystemChangeLog updateMany
   */
  export type SystemChangeLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemChangeLogs.
     */
    data: XOR<SystemChangeLogUpdateManyMutationInput, SystemChangeLogUncheckedUpdateManyInput>
    /**
     * Filter which SystemChangeLogs to update
     */
    where?: SystemChangeLogWhereInput
    /**
     * Limit how many SystemChangeLogs to update.
     */
    limit?: number
  }

  /**
   * SystemChangeLog upsert
   */
  export type SystemChangeLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SystemChangeLog to update in case it exists.
     */
    where: SystemChangeLogWhereUniqueInput
    /**
     * In case the SystemChangeLog found by the `where` argument doesn't exist, create a new SystemChangeLog with this data.
     */
    create: XOR<SystemChangeLogCreateInput, SystemChangeLogUncheckedCreateInput>
    /**
     * In case the SystemChangeLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemChangeLogUpdateInput, SystemChangeLogUncheckedUpdateInput>
  }

  /**
   * SystemChangeLog delete
   */
  export type SystemChangeLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
    /**
     * Filter which SystemChangeLog to delete.
     */
    where: SystemChangeLogWhereUniqueInput
  }

  /**
   * SystemChangeLog deleteMany
   */
  export type SystemChangeLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemChangeLogs to delete
     */
    where?: SystemChangeLogWhereInput
    /**
     * Limit how many SystemChangeLogs to delete.
     */
    limit?: number
  }

  /**
   * SystemChangeLog without action
   */
  export type SystemChangeLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemChangeLog
     */
    select?: SystemChangeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemChangeLog
     */
    omit?: SystemChangeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemChangeLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    status: 'status',
    lastLoginAt: 'lastLoginAt',
    lastLoginIp: 'lastLoginIp',
    loginFailCount: 'loginFailCount',
    twoFaSecret: 'twoFaSecret',
    deviceFingerprint: 'deviceFingerprint',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeProfileScalarFieldEnum: {
    userId: 'userId',
    companyCode: 'companyCode',
    employeeCode: 'employeeCode',
    firstName: 'firstName',
    lastName: 'lastName',
    nickname: 'nickname',
    position: 'position',
    profileImageUrl: 'profileImageUrl',
    lineToken: 'lineToken'
  };

  export type EmployeeProfileScalarFieldEnum = (typeof EmployeeProfileScalarFieldEnum)[keyof typeof EmployeeProfileScalarFieldEnum]


  export const AdminProfileScalarFieldEnum: {
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    nickname: 'nickname',
    position: 'position',
    profileImageUrl: 'profileImageUrl'
  };

  export type AdminProfileScalarFieldEnum = (typeof AdminProfileScalarFieldEnum)[keyof typeof AdminProfileScalarFieldEnum]


  export const SecurityLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type SecurityLogScalarFieldEnum = (typeof SecurityLogScalarFieldEnum)[keyof typeof SecurityLogScalarFieldEnum]


  export const UserNotificationPrefScalarFieldEnum: {
    userId: 'userId',
    emailEnabled: 'emailEnabled',
    pushEnabled: 'pushEnabled',
    smsEnabled: 'smsEnabled',
    digestFreq: 'digestFreq',
    sound: 'sound',
    quietHoursStart: 'quietHoursStart',
    quietHoursEnd: 'quietHoursEnd'
  };

  export type UserNotificationPrefScalarFieldEnum = (typeof UserNotificationPrefScalarFieldEnum)[keyof typeof UserNotificationPrefScalarFieldEnum]


  export const UserAppearancePrefScalarFieldEnum: {
    userId: 'userId',
    theme: 'theme',
    accentColor: 'accentColor',
    density: 'density'
  };

  export type UserAppearancePrefScalarFieldEnum = (typeof UserAppearancePrefScalarFieldEnum)[keyof typeof UserAppearancePrefScalarFieldEnum]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    systemName: 'systemName',
    defaultLanguage: 'defaultLanguage',
    dateFormat: 'dateFormat',
    timeFormat: 'timeFormat',
    timezone: 'timezone',
    autoLogoutMinutes: 'autoLogoutMinutes',
    enableAuditLogging: 'enableAuditLogging',
    enableAnalytics: 'enableAnalytics',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const IntegrationSMTPScalarFieldEnum: {
    id: 'id',
    server: 'server',
    port: 'port',
    username: 'username',
    passwordEnc: 'passwordEnc',
    useTls: 'useTls',
    lastTestedAt: 'lastTestedAt'
  };

  export type IntegrationSMTPScalarFieldEnum = (typeof IntegrationSMTPScalarFieldEnum)[keyof typeof IntegrationSMTPScalarFieldEnum]


  export const ExternalIntegrationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    displayName: 'displayName',
    active: 'active',
    configJson: 'configJson',
    lastSyncedAt: 'lastSyncedAt',
    status: 'status'
  };

  export type ExternalIntegrationScalarFieldEnum = (typeof ExternalIntegrationScalarFieldEnum)[keyof typeof ExternalIntegrationScalarFieldEnum]


  export const WebhookConfigScalarFieldEnum: {
    integrationId: 'integrationId',
    url: 'url',
    secret: 'secret',
    eventCreated: 'eventCreated',
    eventApproved: 'eventApproved',
    eventUpdated: 'eventUpdated',
    eventRejected: 'eventRejected'
  };

  export type WebhookConfigScalarFieldEnum = (typeof WebhookConfigScalarFieldEnum)[keyof typeof WebhookConfigScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fingerprint: 'fingerprint',
    userAgent: 'userAgent',
    status: 'status',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    refreshToken: 'refreshToken',
    refreshExpires: 'refreshExpires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    scheduledAt: 'scheduledAt',
    status: 'status',
    type: 'type',
    category: 'category',
    link: 'link',
    urgencyDays: 'urgencyDays',
    repeatIntervalDays: 'repeatIntervalDays',
    dueDate: 'dueDate',
    taskStatus: 'taskStatus',
    taskCompletedAt: 'taskCompletedAt',
    taskCompletedBy: 'taskCompletedBy',
    postponeCount: 'postponeCount',
    postponeReason: 'postponeReason',
    lastPostponedAt: 'lastPostponedAt',
    originalDueDate: 'originalDueDate',
    aiGenerated: 'aiGenerated',
    aiPrompt: 'aiPrompt',
    scheduleMonthDay: 'scheduleMonthDay',
    scheduleWeekDay: 'scheduleWeekDay',
    scheduleTime: 'scheduleTime',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ApprovalScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    userId: 'userId',
    response: 'response',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ApprovalScalarFieldEnum = (typeof ApprovalScalarFieldEnum)[keyof typeof ApprovalScalarFieldEnum]


  export const RecipientScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    type: 'type',
    userId: 'userId',
    groupId: 'groupId',
    companyCode: 'companyCode'
  };

  export type RecipientScalarFieldEnum = (typeof RecipientScalarFieldEnum)[keyof typeof RecipientScalarFieldEnum]


  export const NotificationAttachmentScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    mimeType: 'mimeType'
  };

  export type NotificationAttachmentScalarFieldEnum = (typeof NotificationAttachmentScalarFieldEnum)[keyof typeof NotificationAttachmentScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    leaderId: 'leaderId',
    createdAt: 'createdAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    employeeId: 'employeeId',
    role: 'role'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const EmployeeAnalyticsScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    period: 'period',
    totalTasks: 'totalTasks',
    completedTasks: 'completedTasks',
    completedOnTime: 'completedOnTime',
    completedLate: 'completedLate',
    postponedTasks: 'postponedTasks',
    avgPostponeDays: 'avgPostponeDays',
    avgCompletionTime: 'avgCompletionTime',
    urgentTasksCount: 'urgentTasksCount',
    urgentTasksOnTime: 'urgentTasksOnTime',
    commonPostponeReason: 'commonPostponeReason',
    workloadScore: 'workloadScore',
    timeManagementScore: 'timeManagementScore',
    aiAnalysis: 'aiAnalysis',
    recommendations: 'recommendations',
    alertLevel: 'alertLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeAnalyticsScalarFieldEnum = (typeof EmployeeAnalyticsScalarFieldEnum)[keyof typeof EmployeeAnalyticsScalarFieldEnum]


  export const FileStorageScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    mimeType: 'mimeType',
    fileSize: 'fileSize',
    bucket: 'bucket',
    path: 'path',
    uploadedBy: 'uploadedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    deletedAt: 'deletedAt'
  };

  export type FileStorageScalarFieldEnum = (typeof FileStorageScalarFieldEnum)[keyof typeof FileStorageScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    action: 'action',
    module: 'module',
    targetType: 'targetType',
    targetId: 'targetId',
    oldValue: 'oldValue',
    newValue: 'newValue',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SystemChangeLogScalarFieldEnum: {
    id: 'id',
    changedBy: 'changedBy',
    component: 'component',
    changeType: 'changeType',
    description: 'description',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type SystemChangeLogScalarFieldEnum = (typeof SystemChangeLogScalarFieldEnum)[keyof typeof SystemChangeLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"User"> | string | null
    loginFailCount?: IntFilter<"User"> | number
    twoFaSecret?: StringNullableFilter<"User"> | string | null
    deviceFingerprint?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    approvals?: ApprovalListRelationFilter
    employeeProfile?: XOR<EmployeeProfileNullableScalarRelationFilter, EmployeeProfileWhereInput> | null
    adminProfile?: XOR<AdminProfileNullableScalarRelationFilter, AdminProfileWhereInput> | null
    notificationPref?: XOR<UserNotificationPrefNullableScalarRelationFilter, UserNotificationPrefWhereInput> | null
    appearancePref?: XOR<UserAppearancePrefNullableScalarRelationFilter, UserAppearancePrefWhereInput> | null
    securityLogs?: SecurityLogListRelationFilter
    teamMemberships?: TeamMemberListRelationFilter
    analytics?: EmployeeAnalyticsListRelationFilter
    uploadedFiles?: FileStorageListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    systemChanges?: SystemChangeLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    loginFailCount?: SortOrder
    twoFaSecret?: SortOrderInput | SortOrder
    deviceFingerprint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    approvals?: ApprovalOrderByRelationAggregateInput
    employeeProfile?: EmployeeProfileOrderByWithRelationInput
    adminProfile?: AdminProfileOrderByWithRelationInput
    notificationPref?: UserNotificationPrefOrderByWithRelationInput
    appearancePref?: UserAppearancePrefOrderByWithRelationInput
    securityLogs?: SecurityLogOrderByRelationAggregateInput
    teamMemberships?: TeamMemberOrderByRelationAggregateInput
    analytics?: EmployeeAnalyticsOrderByRelationAggregateInput
    uploadedFiles?: FileStorageOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    systemChanges?: SystemChangeLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"User"> | string | null
    loginFailCount?: IntFilter<"User"> | number
    twoFaSecret?: StringNullableFilter<"User"> | string | null
    deviceFingerprint?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    approvals?: ApprovalListRelationFilter
    employeeProfile?: XOR<EmployeeProfileNullableScalarRelationFilter, EmployeeProfileWhereInput> | null
    adminProfile?: XOR<AdminProfileNullableScalarRelationFilter, AdminProfileWhereInput> | null
    notificationPref?: XOR<UserNotificationPrefNullableScalarRelationFilter, UserNotificationPrefWhereInput> | null
    appearancePref?: XOR<UserAppearancePrefNullableScalarRelationFilter, UserAppearancePrefWhereInput> | null
    securityLogs?: SecurityLogListRelationFilter
    teamMemberships?: TeamMemberListRelationFilter
    analytics?: EmployeeAnalyticsListRelationFilter
    uploadedFiles?: FileStorageListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    systemChanges?: SystemChangeLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    loginFailCount?: SortOrder
    twoFaSecret?: SortOrderInput | SortOrder
    deviceFingerprint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginIp?: StringNullableWithAggregatesFilter<"User"> | string | null
    loginFailCount?: IntWithAggregatesFilter<"User"> | number
    twoFaSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    deviceFingerprint?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type EmployeeProfileWhereInput = {
    AND?: EmployeeProfileWhereInput | EmployeeProfileWhereInput[]
    OR?: EmployeeProfileWhereInput[]
    NOT?: EmployeeProfileWhereInput | EmployeeProfileWhereInput[]
    userId?: StringFilter<"EmployeeProfile"> | string
    companyCode?: StringFilter<"EmployeeProfile"> | string
    employeeCode?: StringFilter<"EmployeeProfile"> | string
    firstName?: StringFilter<"EmployeeProfile"> | string
    lastName?: StringFilter<"EmployeeProfile"> | string
    nickname?: StringNullableFilter<"EmployeeProfile"> | string | null
    position?: StringNullableFilter<"EmployeeProfile"> | string | null
    profileImageUrl?: StringNullableFilter<"EmployeeProfile"> | string | null
    lineToken?: StringNullableFilter<"EmployeeProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmployeeProfileOrderByWithRelationInput = {
    userId?: SortOrder
    companyCode?: SortOrder
    employeeCode?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    lineToken?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EmployeeProfileWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    employeeCode?: string
    AND?: EmployeeProfileWhereInput | EmployeeProfileWhereInput[]
    OR?: EmployeeProfileWhereInput[]
    NOT?: EmployeeProfileWhereInput | EmployeeProfileWhereInput[]
    companyCode?: StringFilter<"EmployeeProfile"> | string
    firstName?: StringFilter<"EmployeeProfile"> | string
    lastName?: StringFilter<"EmployeeProfile"> | string
    nickname?: StringNullableFilter<"EmployeeProfile"> | string | null
    position?: StringNullableFilter<"EmployeeProfile"> | string | null
    profileImageUrl?: StringNullableFilter<"EmployeeProfile"> | string | null
    lineToken?: StringNullableFilter<"EmployeeProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId" | "employeeCode">

  export type EmployeeProfileOrderByWithAggregationInput = {
    userId?: SortOrder
    companyCode?: SortOrder
    employeeCode?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    lineToken?: SortOrderInput | SortOrder
    _count?: EmployeeProfileCountOrderByAggregateInput
    _max?: EmployeeProfileMaxOrderByAggregateInput
    _min?: EmployeeProfileMinOrderByAggregateInput
  }

  export type EmployeeProfileScalarWhereWithAggregatesInput = {
    AND?: EmployeeProfileScalarWhereWithAggregatesInput | EmployeeProfileScalarWhereWithAggregatesInput[]
    OR?: EmployeeProfileScalarWhereWithAggregatesInput[]
    NOT?: EmployeeProfileScalarWhereWithAggregatesInput | EmployeeProfileScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"EmployeeProfile"> | string
    companyCode?: StringWithAggregatesFilter<"EmployeeProfile"> | string
    employeeCode?: StringWithAggregatesFilter<"EmployeeProfile"> | string
    firstName?: StringWithAggregatesFilter<"EmployeeProfile"> | string
    lastName?: StringWithAggregatesFilter<"EmployeeProfile"> | string
    nickname?: StringNullableWithAggregatesFilter<"EmployeeProfile"> | string | null
    position?: StringNullableWithAggregatesFilter<"EmployeeProfile"> | string | null
    profileImageUrl?: StringNullableWithAggregatesFilter<"EmployeeProfile"> | string | null
    lineToken?: StringNullableWithAggregatesFilter<"EmployeeProfile"> | string | null
  }

  export type AdminProfileWhereInput = {
    AND?: AdminProfileWhereInput | AdminProfileWhereInput[]
    OR?: AdminProfileWhereInput[]
    NOT?: AdminProfileWhereInput | AdminProfileWhereInput[]
    userId?: StringFilter<"AdminProfile"> | string
    firstName?: StringFilter<"AdminProfile"> | string
    lastName?: StringFilter<"AdminProfile"> | string
    nickname?: StringNullableFilter<"AdminProfile"> | string | null
    position?: StringNullableFilter<"AdminProfile"> | string | null
    profileImageUrl?: StringNullableFilter<"AdminProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminProfileOrderByWithRelationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AdminProfileWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: AdminProfileWhereInput | AdminProfileWhereInput[]
    OR?: AdminProfileWhereInput[]
    NOT?: AdminProfileWhereInput | AdminProfileWhereInput[]
    firstName?: StringFilter<"AdminProfile"> | string
    lastName?: StringFilter<"AdminProfile"> | string
    nickname?: StringNullableFilter<"AdminProfile"> | string | null
    position?: StringNullableFilter<"AdminProfile"> | string | null
    profileImageUrl?: StringNullableFilter<"AdminProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type AdminProfileOrderByWithAggregationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    _count?: AdminProfileCountOrderByAggregateInput
    _max?: AdminProfileMaxOrderByAggregateInput
    _min?: AdminProfileMinOrderByAggregateInput
  }

  export type AdminProfileScalarWhereWithAggregatesInput = {
    AND?: AdminProfileScalarWhereWithAggregatesInput | AdminProfileScalarWhereWithAggregatesInput[]
    OR?: AdminProfileScalarWhereWithAggregatesInput[]
    NOT?: AdminProfileScalarWhereWithAggregatesInput | AdminProfileScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"AdminProfile"> | string
    firstName?: StringWithAggregatesFilter<"AdminProfile"> | string
    lastName?: StringWithAggregatesFilter<"AdminProfile"> | string
    nickname?: StringNullableWithAggregatesFilter<"AdminProfile"> | string | null
    position?: StringNullableWithAggregatesFilter<"AdminProfile"> | string | null
    profileImageUrl?: StringNullableWithAggregatesFilter<"AdminProfile"> | string | null
  }

  export type SecurityLogWhereInput = {
    AND?: SecurityLogWhereInput | SecurityLogWhereInput[]
    OR?: SecurityLogWhereInput[]
    NOT?: SecurityLogWhereInput | SecurityLogWhereInput[]
    id?: StringFilter<"SecurityLog"> | string
    userId?: StringFilter<"SecurityLog"> | string
    action?: StringFilter<"SecurityLog"> | string
    ipAddress?: StringFilter<"SecurityLog"> | string
    userAgent?: StringFilter<"SecurityLog"> | string
    createdAt?: DateTimeFilter<"SecurityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SecurityLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SecurityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SecurityLogWhereInput | SecurityLogWhereInput[]
    OR?: SecurityLogWhereInput[]
    NOT?: SecurityLogWhereInput | SecurityLogWhereInput[]
    userId?: StringFilter<"SecurityLog"> | string
    action?: StringFilter<"SecurityLog"> | string
    ipAddress?: StringFilter<"SecurityLog"> | string
    userAgent?: StringFilter<"SecurityLog"> | string
    createdAt?: DateTimeFilter<"SecurityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SecurityLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    _count?: SecurityLogCountOrderByAggregateInput
    _max?: SecurityLogMaxOrderByAggregateInput
    _min?: SecurityLogMinOrderByAggregateInput
  }

  export type SecurityLogScalarWhereWithAggregatesInput = {
    AND?: SecurityLogScalarWhereWithAggregatesInput | SecurityLogScalarWhereWithAggregatesInput[]
    OR?: SecurityLogScalarWhereWithAggregatesInput[]
    NOT?: SecurityLogScalarWhereWithAggregatesInput | SecurityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecurityLog"> | string
    userId?: StringWithAggregatesFilter<"SecurityLog"> | string
    action?: StringWithAggregatesFilter<"SecurityLog"> | string
    ipAddress?: StringWithAggregatesFilter<"SecurityLog"> | string
    userAgent?: StringWithAggregatesFilter<"SecurityLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SecurityLog"> | Date | string
  }

  export type UserNotificationPrefWhereInput = {
    AND?: UserNotificationPrefWhereInput | UserNotificationPrefWhereInput[]
    OR?: UserNotificationPrefWhereInput[]
    NOT?: UserNotificationPrefWhereInput | UserNotificationPrefWhereInput[]
    userId?: StringFilter<"UserNotificationPref"> | string
    emailEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    pushEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    smsEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    digestFreq?: StringFilter<"UserNotificationPref"> | string
    sound?: StringFilter<"UserNotificationPref"> | string
    quietHoursStart?: DateTimeNullableFilter<"UserNotificationPref"> | Date | string | null
    quietHoursEnd?: DateTimeNullableFilter<"UserNotificationPref"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserNotificationPrefOrderByWithRelationInput = {
    userId?: SortOrder
    emailEnabled?: SortOrder
    pushEnabled?: SortOrder
    smsEnabled?: SortOrder
    digestFreq?: SortOrder
    sound?: SortOrder
    quietHoursStart?: SortOrderInput | SortOrder
    quietHoursEnd?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserNotificationPrefWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: UserNotificationPrefWhereInput | UserNotificationPrefWhereInput[]
    OR?: UserNotificationPrefWhereInput[]
    NOT?: UserNotificationPrefWhereInput | UserNotificationPrefWhereInput[]
    emailEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    pushEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    smsEnabled?: BoolFilter<"UserNotificationPref"> | boolean
    digestFreq?: StringFilter<"UserNotificationPref"> | string
    sound?: StringFilter<"UserNotificationPref"> | string
    quietHoursStart?: DateTimeNullableFilter<"UserNotificationPref"> | Date | string | null
    quietHoursEnd?: DateTimeNullableFilter<"UserNotificationPref"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type UserNotificationPrefOrderByWithAggregationInput = {
    userId?: SortOrder
    emailEnabled?: SortOrder
    pushEnabled?: SortOrder
    smsEnabled?: SortOrder
    digestFreq?: SortOrder
    sound?: SortOrder
    quietHoursStart?: SortOrderInput | SortOrder
    quietHoursEnd?: SortOrderInput | SortOrder
    _count?: UserNotificationPrefCountOrderByAggregateInput
    _max?: UserNotificationPrefMaxOrderByAggregateInput
    _min?: UserNotificationPrefMinOrderByAggregateInput
  }

  export type UserNotificationPrefScalarWhereWithAggregatesInput = {
    AND?: UserNotificationPrefScalarWhereWithAggregatesInput | UserNotificationPrefScalarWhereWithAggregatesInput[]
    OR?: UserNotificationPrefScalarWhereWithAggregatesInput[]
    NOT?: UserNotificationPrefScalarWhereWithAggregatesInput | UserNotificationPrefScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserNotificationPref"> | string
    emailEnabled?: BoolWithAggregatesFilter<"UserNotificationPref"> | boolean
    pushEnabled?: BoolWithAggregatesFilter<"UserNotificationPref"> | boolean
    smsEnabled?: BoolWithAggregatesFilter<"UserNotificationPref"> | boolean
    digestFreq?: StringWithAggregatesFilter<"UserNotificationPref"> | string
    sound?: StringWithAggregatesFilter<"UserNotificationPref"> | string
    quietHoursStart?: DateTimeNullableWithAggregatesFilter<"UserNotificationPref"> | Date | string | null
    quietHoursEnd?: DateTimeNullableWithAggregatesFilter<"UserNotificationPref"> | Date | string | null
  }

  export type UserAppearancePrefWhereInput = {
    AND?: UserAppearancePrefWhereInput | UserAppearancePrefWhereInput[]
    OR?: UserAppearancePrefWhereInput[]
    NOT?: UserAppearancePrefWhereInput | UserAppearancePrefWhereInput[]
    userId?: StringFilter<"UserAppearancePref"> | string
    theme?: StringFilter<"UserAppearancePref"> | string
    accentColor?: StringFilter<"UserAppearancePref"> | string
    density?: StringFilter<"UserAppearancePref"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserAppearancePrefOrderByWithRelationInput = {
    userId?: SortOrder
    theme?: SortOrder
    accentColor?: SortOrder
    density?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserAppearancePrefWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: UserAppearancePrefWhereInput | UserAppearancePrefWhereInput[]
    OR?: UserAppearancePrefWhereInput[]
    NOT?: UserAppearancePrefWhereInput | UserAppearancePrefWhereInput[]
    theme?: StringFilter<"UserAppearancePref"> | string
    accentColor?: StringFilter<"UserAppearancePref"> | string
    density?: StringFilter<"UserAppearancePref"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type UserAppearancePrefOrderByWithAggregationInput = {
    userId?: SortOrder
    theme?: SortOrder
    accentColor?: SortOrder
    density?: SortOrder
    _count?: UserAppearancePrefCountOrderByAggregateInput
    _max?: UserAppearancePrefMaxOrderByAggregateInput
    _min?: UserAppearancePrefMinOrderByAggregateInput
  }

  export type UserAppearancePrefScalarWhereWithAggregatesInput = {
    AND?: UserAppearancePrefScalarWhereWithAggregatesInput | UserAppearancePrefScalarWhereWithAggregatesInput[]
    OR?: UserAppearancePrefScalarWhereWithAggregatesInput[]
    NOT?: UserAppearancePrefScalarWhereWithAggregatesInput | UserAppearancePrefScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserAppearancePref"> | string
    theme?: StringWithAggregatesFilter<"UserAppearancePref"> | string
    accentColor?: StringWithAggregatesFilter<"UserAppearancePref"> | string
    density?: StringWithAggregatesFilter<"UserAppearancePref"> | string
  }

  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: IntFilter<"SystemSettings"> | number
    systemName?: StringFilter<"SystemSettings"> | string
    defaultLanguage?: StringFilter<"SystemSettings"> | string
    dateFormat?: StringFilter<"SystemSettings"> | string
    timeFormat?: StringFilter<"SystemSettings"> | string
    timezone?: StringFilter<"SystemSettings"> | string
    autoLogoutMinutes?: IntFilter<"SystemSettings"> | number
    enableAuditLogging?: BoolFilter<"SystemSettings"> | boolean
    enableAnalytics?: BoolFilter<"SystemSettings"> | boolean
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    systemName?: SortOrder
    defaultLanguage?: SortOrder
    dateFormat?: SortOrder
    timeFormat?: SortOrder
    timezone?: SortOrder
    autoLogoutMinutes?: SortOrder
    enableAuditLogging?: SortOrder
    enableAnalytics?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    systemName?: StringFilter<"SystemSettings"> | string
    defaultLanguage?: StringFilter<"SystemSettings"> | string
    dateFormat?: StringFilter<"SystemSettings"> | string
    timeFormat?: StringFilter<"SystemSettings"> | string
    timezone?: StringFilter<"SystemSettings"> | string
    autoLogoutMinutes?: IntFilter<"SystemSettings"> | number
    enableAuditLogging?: BoolFilter<"SystemSettings"> | boolean
    enableAnalytics?: BoolFilter<"SystemSettings"> | boolean
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }, "id">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    systemName?: SortOrder
    defaultLanguage?: SortOrder
    dateFormat?: SortOrder
    timeFormat?: SortOrder
    timezone?: SortOrder
    autoLogoutMinutes?: SortOrder
    enableAuditLogging?: SortOrder
    enableAnalytics?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _avg?: SystemSettingsAvgOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
    _sum?: SystemSettingsSumOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemSettings"> | number
    systemName?: StringWithAggregatesFilter<"SystemSettings"> | string
    defaultLanguage?: StringWithAggregatesFilter<"SystemSettings"> | string
    dateFormat?: StringWithAggregatesFilter<"SystemSettings"> | string
    timeFormat?: StringWithAggregatesFilter<"SystemSettings"> | string
    timezone?: StringWithAggregatesFilter<"SystemSettings"> | string
    autoLogoutMinutes?: IntWithAggregatesFilter<"SystemSettings"> | number
    enableAuditLogging?: BoolWithAggregatesFilter<"SystemSettings"> | boolean
    enableAnalytics?: BoolWithAggregatesFilter<"SystemSettings"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
  }

  export type IntegrationSMTPWhereInput = {
    AND?: IntegrationSMTPWhereInput | IntegrationSMTPWhereInput[]
    OR?: IntegrationSMTPWhereInput[]
    NOT?: IntegrationSMTPWhereInput | IntegrationSMTPWhereInput[]
    id?: IntFilter<"IntegrationSMTP"> | number
    server?: StringFilter<"IntegrationSMTP"> | string
    port?: IntFilter<"IntegrationSMTP"> | number
    username?: StringFilter<"IntegrationSMTP"> | string
    passwordEnc?: StringFilter<"IntegrationSMTP"> | string
    useTls?: BoolFilter<"IntegrationSMTP"> | boolean
    lastTestedAt?: DateTimeNullableFilter<"IntegrationSMTP"> | Date | string | null
  }

  export type IntegrationSMTPOrderByWithRelationInput = {
    id?: SortOrder
    server?: SortOrder
    port?: SortOrder
    username?: SortOrder
    passwordEnc?: SortOrder
    useTls?: SortOrder
    lastTestedAt?: SortOrderInput | SortOrder
  }

  export type IntegrationSMTPWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IntegrationSMTPWhereInput | IntegrationSMTPWhereInput[]
    OR?: IntegrationSMTPWhereInput[]
    NOT?: IntegrationSMTPWhereInput | IntegrationSMTPWhereInput[]
    server?: StringFilter<"IntegrationSMTP"> | string
    port?: IntFilter<"IntegrationSMTP"> | number
    username?: StringFilter<"IntegrationSMTP"> | string
    passwordEnc?: StringFilter<"IntegrationSMTP"> | string
    useTls?: BoolFilter<"IntegrationSMTP"> | boolean
    lastTestedAt?: DateTimeNullableFilter<"IntegrationSMTP"> | Date | string | null
  }, "id">

  export type IntegrationSMTPOrderByWithAggregationInput = {
    id?: SortOrder
    server?: SortOrder
    port?: SortOrder
    username?: SortOrder
    passwordEnc?: SortOrder
    useTls?: SortOrder
    lastTestedAt?: SortOrderInput | SortOrder
    _count?: IntegrationSMTPCountOrderByAggregateInput
    _avg?: IntegrationSMTPAvgOrderByAggregateInput
    _max?: IntegrationSMTPMaxOrderByAggregateInput
    _min?: IntegrationSMTPMinOrderByAggregateInput
    _sum?: IntegrationSMTPSumOrderByAggregateInput
  }

  export type IntegrationSMTPScalarWhereWithAggregatesInput = {
    AND?: IntegrationSMTPScalarWhereWithAggregatesInput | IntegrationSMTPScalarWhereWithAggregatesInput[]
    OR?: IntegrationSMTPScalarWhereWithAggregatesInput[]
    NOT?: IntegrationSMTPScalarWhereWithAggregatesInput | IntegrationSMTPScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IntegrationSMTP"> | number
    server?: StringWithAggregatesFilter<"IntegrationSMTP"> | string
    port?: IntWithAggregatesFilter<"IntegrationSMTP"> | number
    username?: StringWithAggregatesFilter<"IntegrationSMTP"> | string
    passwordEnc?: StringWithAggregatesFilter<"IntegrationSMTP"> | string
    useTls?: BoolWithAggregatesFilter<"IntegrationSMTP"> | boolean
    lastTestedAt?: DateTimeNullableWithAggregatesFilter<"IntegrationSMTP"> | Date | string | null
  }

  export type ExternalIntegrationWhereInput = {
    AND?: ExternalIntegrationWhereInput | ExternalIntegrationWhereInput[]
    OR?: ExternalIntegrationWhereInput[]
    NOT?: ExternalIntegrationWhereInput | ExternalIntegrationWhereInput[]
    id?: StringFilter<"ExternalIntegration"> | string
    type?: StringFilter<"ExternalIntegration"> | string
    displayName?: StringFilter<"ExternalIntegration"> | string
    active?: BoolFilter<"ExternalIntegration"> | boolean
    configJson?: StringFilter<"ExternalIntegration"> | string
    lastSyncedAt?: DateTimeNullableFilter<"ExternalIntegration"> | Date | string | null
    status?: StringFilter<"ExternalIntegration"> | string
    webhook?: XOR<WebhookConfigNullableScalarRelationFilter, WebhookConfigWhereInput> | null
  }

  export type ExternalIntegrationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    displayName?: SortOrder
    active?: SortOrder
    configJson?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    webhook?: WebhookConfigOrderByWithRelationInput
  }

  export type ExternalIntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExternalIntegrationWhereInput | ExternalIntegrationWhereInput[]
    OR?: ExternalIntegrationWhereInput[]
    NOT?: ExternalIntegrationWhereInput | ExternalIntegrationWhereInput[]
    type?: StringFilter<"ExternalIntegration"> | string
    displayName?: StringFilter<"ExternalIntegration"> | string
    active?: BoolFilter<"ExternalIntegration"> | boolean
    configJson?: StringFilter<"ExternalIntegration"> | string
    lastSyncedAt?: DateTimeNullableFilter<"ExternalIntegration"> | Date | string | null
    status?: StringFilter<"ExternalIntegration"> | string
    webhook?: XOR<WebhookConfigNullableScalarRelationFilter, WebhookConfigWhereInput> | null
  }, "id">

  export type ExternalIntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    displayName?: SortOrder
    active?: SortOrder
    configJson?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: ExternalIntegrationCountOrderByAggregateInput
    _max?: ExternalIntegrationMaxOrderByAggregateInput
    _min?: ExternalIntegrationMinOrderByAggregateInput
  }

  export type ExternalIntegrationScalarWhereWithAggregatesInput = {
    AND?: ExternalIntegrationScalarWhereWithAggregatesInput | ExternalIntegrationScalarWhereWithAggregatesInput[]
    OR?: ExternalIntegrationScalarWhereWithAggregatesInput[]
    NOT?: ExternalIntegrationScalarWhereWithAggregatesInput | ExternalIntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExternalIntegration"> | string
    type?: StringWithAggregatesFilter<"ExternalIntegration"> | string
    displayName?: StringWithAggregatesFilter<"ExternalIntegration"> | string
    active?: BoolWithAggregatesFilter<"ExternalIntegration"> | boolean
    configJson?: StringWithAggregatesFilter<"ExternalIntegration"> | string
    lastSyncedAt?: DateTimeNullableWithAggregatesFilter<"ExternalIntegration"> | Date | string | null
    status?: StringWithAggregatesFilter<"ExternalIntegration"> | string
  }

  export type WebhookConfigWhereInput = {
    AND?: WebhookConfigWhereInput | WebhookConfigWhereInput[]
    OR?: WebhookConfigWhereInput[]
    NOT?: WebhookConfigWhereInput | WebhookConfigWhereInput[]
    integrationId?: StringFilter<"WebhookConfig"> | string
    url?: StringFilter<"WebhookConfig"> | string
    secret?: StringFilter<"WebhookConfig"> | string
    eventCreated?: BoolFilter<"WebhookConfig"> | boolean
    eventApproved?: BoolFilter<"WebhookConfig"> | boolean
    eventUpdated?: BoolFilter<"WebhookConfig"> | boolean
    eventRejected?: BoolFilter<"WebhookConfig"> | boolean
    integration?: XOR<ExternalIntegrationScalarRelationFilter, ExternalIntegrationWhereInput>
  }

  export type WebhookConfigOrderByWithRelationInput = {
    integrationId?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    eventCreated?: SortOrder
    eventApproved?: SortOrder
    eventUpdated?: SortOrder
    eventRejected?: SortOrder
    integration?: ExternalIntegrationOrderByWithRelationInput
  }

  export type WebhookConfigWhereUniqueInput = Prisma.AtLeast<{
    integrationId?: string
    AND?: WebhookConfigWhereInput | WebhookConfigWhereInput[]
    OR?: WebhookConfigWhereInput[]
    NOT?: WebhookConfigWhereInput | WebhookConfigWhereInput[]
    url?: StringFilter<"WebhookConfig"> | string
    secret?: StringFilter<"WebhookConfig"> | string
    eventCreated?: BoolFilter<"WebhookConfig"> | boolean
    eventApproved?: BoolFilter<"WebhookConfig"> | boolean
    eventUpdated?: BoolFilter<"WebhookConfig"> | boolean
    eventRejected?: BoolFilter<"WebhookConfig"> | boolean
    integration?: XOR<ExternalIntegrationScalarRelationFilter, ExternalIntegrationWhereInput>
  }, "integrationId">

  export type WebhookConfigOrderByWithAggregationInput = {
    integrationId?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    eventCreated?: SortOrder
    eventApproved?: SortOrder
    eventUpdated?: SortOrder
    eventRejected?: SortOrder
    _count?: WebhookConfigCountOrderByAggregateInput
    _max?: WebhookConfigMaxOrderByAggregateInput
    _min?: WebhookConfigMinOrderByAggregateInput
  }

  export type WebhookConfigScalarWhereWithAggregatesInput = {
    AND?: WebhookConfigScalarWhereWithAggregatesInput | WebhookConfigScalarWhereWithAggregatesInput[]
    OR?: WebhookConfigScalarWhereWithAggregatesInput[]
    NOT?: WebhookConfigScalarWhereWithAggregatesInput | WebhookConfigScalarWhereWithAggregatesInput[]
    integrationId?: StringWithAggregatesFilter<"WebhookConfig"> | string
    url?: StringWithAggregatesFilter<"WebhookConfig"> | string
    secret?: StringWithAggregatesFilter<"WebhookConfig"> | string
    eventCreated?: BoolWithAggregatesFilter<"WebhookConfig"> | boolean
    eventApproved?: BoolWithAggregatesFilter<"WebhookConfig"> | boolean
    eventUpdated?: BoolWithAggregatesFilter<"WebhookConfig"> | boolean
    eventRejected?: BoolWithAggregatesFilter<"WebhookConfig"> | boolean
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    fingerprint?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    refreshToken?: StringNullableFilter<"Session"> | string | null
    refreshExpires?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fingerprint?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    refreshExpires?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    fingerprint?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    refreshToken?: StringNullableFilter<"Session"> | string | null
    refreshExpires?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fingerprint?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    refreshExpires?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    fingerprint?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    status?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    refreshToken?: StringNullableWithAggregatesFilter<"Session"> | string | null
    refreshExpires?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    scheduledAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    status?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    category?: StringNullableFilter<"Notification"> | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    urgencyDays?: IntFilter<"Notification"> | number
    repeatIntervalDays?: IntFilter<"Notification"> | number
    dueDate?: DateTimeNullableFilter<"Notification"> | Date | string | null
    taskStatus?: StringNullableFilter<"Notification"> | string | null
    taskCompletedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    taskCompletedBy?: StringNullableFilter<"Notification"> | string | null
    postponeCount?: IntFilter<"Notification"> | number
    postponeReason?: StringNullableFilter<"Notification"> | string | null
    lastPostponedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    originalDueDate?: DateTimeNullableFilter<"Notification"> | Date | string | null
    aiGenerated?: BoolFilter<"Notification"> | boolean
    aiPrompt?: StringNullableFilter<"Notification"> | string | null
    scheduleMonthDay?: IntNullableFilter<"Notification"> | number | null
    scheduleWeekDay?: IntNullableFilter<"Notification"> | number | null
    scheduleTime?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdBy?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    approvals?: ApprovalListRelationFilter
    recipients?: RecipientListRelationFilter
    attachments?: NotificationAttachmentListRelationFilter
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    category?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    taskStatus?: SortOrderInput | SortOrder
    taskCompletedAt?: SortOrderInput | SortOrder
    taskCompletedBy?: SortOrderInput | SortOrder
    postponeCount?: SortOrder
    postponeReason?: SortOrderInput | SortOrder
    lastPostponedAt?: SortOrderInput | SortOrder
    originalDueDate?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    scheduleMonthDay?: SortOrderInput | SortOrder
    scheduleWeekDay?: SortOrderInput | SortOrder
    scheduleTime?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvals?: ApprovalOrderByRelationAggregateInput
    recipients?: RecipientOrderByRelationAggregateInput
    attachments?: NotificationAttachmentOrderByRelationAggregateInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    scheduledAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    status?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    category?: StringNullableFilter<"Notification"> | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    urgencyDays?: IntFilter<"Notification"> | number
    repeatIntervalDays?: IntFilter<"Notification"> | number
    dueDate?: DateTimeNullableFilter<"Notification"> | Date | string | null
    taskStatus?: StringNullableFilter<"Notification"> | string | null
    taskCompletedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    taskCompletedBy?: StringNullableFilter<"Notification"> | string | null
    postponeCount?: IntFilter<"Notification"> | number
    postponeReason?: StringNullableFilter<"Notification"> | string | null
    lastPostponedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    originalDueDate?: DateTimeNullableFilter<"Notification"> | Date | string | null
    aiGenerated?: BoolFilter<"Notification"> | boolean
    aiPrompt?: StringNullableFilter<"Notification"> | string | null
    scheduleMonthDay?: IntNullableFilter<"Notification"> | number | null
    scheduleWeekDay?: IntNullableFilter<"Notification"> | number | null
    scheduleTime?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdBy?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    approvals?: ApprovalListRelationFilter
    recipients?: RecipientListRelationFilter
    attachments?: NotificationAttachmentListRelationFilter
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    category?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    taskStatus?: SortOrderInput | SortOrder
    taskCompletedAt?: SortOrderInput | SortOrder
    taskCompletedBy?: SortOrderInput | SortOrder
    postponeCount?: SortOrder
    postponeReason?: SortOrderInput | SortOrder
    lastPostponedAt?: SortOrderInput | SortOrder
    originalDueDate?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    scheduleMonthDay?: SortOrderInput | SortOrder
    scheduleWeekDay?: SortOrderInput | SortOrder
    scheduleTime?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    status?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    category?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    urgencyDays?: IntWithAggregatesFilter<"Notification"> | number
    repeatIntervalDays?: IntWithAggregatesFilter<"Notification"> | number
    dueDate?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    taskStatus?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    taskCompletedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    taskCompletedBy?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    postponeCount?: IntWithAggregatesFilter<"Notification"> | number
    postponeReason?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    lastPostponedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    originalDueDate?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    aiGenerated?: BoolWithAggregatesFilter<"Notification"> | boolean
    aiPrompt?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    scheduleMonthDay?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    scheduleWeekDay?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    scheduleTime?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdBy?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ApprovalWhereInput = {
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    id?: StringFilter<"Approval"> | string
    notificationId?: StringFilter<"Approval"> | string
    userId?: StringFilter<"Approval"> | string
    response?: StringFilter<"Approval"> | string
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ApprovalOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    response?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    notificationId?: StringFilter<"Approval"> | string
    userId?: StringFilter<"Approval"> | string
    response?: StringFilter<"Approval"> | string
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    response?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApprovalCountOrderByAggregateInput
    _max?: ApprovalMaxOrderByAggregateInput
    _min?: ApprovalMinOrderByAggregateInput
  }

  export type ApprovalScalarWhereWithAggregatesInput = {
    AND?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    OR?: ApprovalScalarWhereWithAggregatesInput[]
    NOT?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Approval"> | string
    notificationId?: StringWithAggregatesFilter<"Approval"> | string
    userId?: StringWithAggregatesFilter<"Approval"> | string
    response?: StringWithAggregatesFilter<"Approval"> | string
    comment?: StringNullableWithAggregatesFilter<"Approval"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
  }

  export type RecipientWhereInput = {
    AND?: RecipientWhereInput | RecipientWhereInput[]
    OR?: RecipientWhereInput[]
    NOT?: RecipientWhereInput | RecipientWhereInput[]
    id?: StringFilter<"Recipient"> | string
    notificationId?: StringFilter<"Recipient"> | string
    type?: StringFilter<"Recipient"> | string
    userId?: StringNullableFilter<"Recipient"> | string | null
    groupId?: StringNullableFilter<"Recipient"> | string | null
    companyCode?: StringNullableFilter<"Recipient"> | string | null
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }

  export type RecipientOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    type?: SortOrder
    userId?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    companyCode?: SortOrderInput | SortOrder
    notification?: NotificationOrderByWithRelationInput
  }

  export type RecipientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipientWhereInput | RecipientWhereInput[]
    OR?: RecipientWhereInput[]
    NOT?: RecipientWhereInput | RecipientWhereInput[]
    notificationId?: StringFilter<"Recipient"> | string
    type?: StringFilter<"Recipient"> | string
    userId?: StringNullableFilter<"Recipient"> | string | null
    groupId?: StringNullableFilter<"Recipient"> | string | null
    companyCode?: StringNullableFilter<"Recipient"> | string | null
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }, "id">

  export type RecipientOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    type?: SortOrder
    userId?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    companyCode?: SortOrderInput | SortOrder
    _count?: RecipientCountOrderByAggregateInput
    _max?: RecipientMaxOrderByAggregateInput
    _min?: RecipientMinOrderByAggregateInput
  }

  export type RecipientScalarWhereWithAggregatesInput = {
    AND?: RecipientScalarWhereWithAggregatesInput | RecipientScalarWhereWithAggregatesInput[]
    OR?: RecipientScalarWhereWithAggregatesInput[]
    NOT?: RecipientScalarWhereWithAggregatesInput | RecipientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipient"> | string
    notificationId?: StringWithAggregatesFilter<"Recipient"> | string
    type?: StringWithAggregatesFilter<"Recipient"> | string
    userId?: StringNullableWithAggregatesFilter<"Recipient"> | string | null
    groupId?: StringNullableWithAggregatesFilter<"Recipient"> | string | null
    companyCode?: StringNullableWithAggregatesFilter<"Recipient"> | string | null
  }

  export type NotificationAttachmentWhereInput = {
    AND?: NotificationAttachmentWhereInput | NotificationAttachmentWhereInput[]
    OR?: NotificationAttachmentWhereInput[]
    NOT?: NotificationAttachmentWhereInput | NotificationAttachmentWhereInput[]
    id?: StringFilter<"NotificationAttachment"> | string
    notificationId?: StringFilter<"NotificationAttachment"> | string
    fileName?: StringFilter<"NotificationAttachment"> | string
    fileUrl?: StringFilter<"NotificationAttachment"> | string
    mimeType?: StringFilter<"NotificationAttachment"> | string
    Notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }

  export type NotificationAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    Notification?: NotificationOrderByWithRelationInput
  }

  export type NotificationAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationAttachmentWhereInput | NotificationAttachmentWhereInput[]
    OR?: NotificationAttachmentWhereInput[]
    NOT?: NotificationAttachmentWhereInput | NotificationAttachmentWhereInput[]
    notificationId?: StringFilter<"NotificationAttachment"> | string
    fileName?: StringFilter<"NotificationAttachment"> | string
    fileUrl?: StringFilter<"NotificationAttachment"> | string
    mimeType?: StringFilter<"NotificationAttachment"> | string
    Notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }, "id">

  export type NotificationAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    _count?: NotificationAttachmentCountOrderByAggregateInput
    _max?: NotificationAttachmentMaxOrderByAggregateInput
    _min?: NotificationAttachmentMinOrderByAggregateInput
  }

  export type NotificationAttachmentScalarWhereWithAggregatesInput = {
    AND?: NotificationAttachmentScalarWhereWithAggregatesInput | NotificationAttachmentScalarWhereWithAggregatesInput[]
    OR?: NotificationAttachmentScalarWhereWithAggregatesInput[]
    NOT?: NotificationAttachmentScalarWhereWithAggregatesInput | NotificationAttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationAttachment"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationAttachment"> | string
    fileName?: StringWithAggregatesFilter<"NotificationAttachment"> | string
    fileUrl?: StringWithAggregatesFilter<"NotificationAttachment"> | string
    mimeType?: StringWithAggregatesFilter<"NotificationAttachment"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    leaderId?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    members?: TeamMemberListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    members?: TeamMemberOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    leaderId?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    members?: TeamMemberListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    leaderId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    employeeId?: StringFilter<"TeamMember"> | string
    role?: StringFilter<"TeamMember"> | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TeamMemberOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    employeeId?: SortOrder
    role?: SortOrder
    team?: TeamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    teamId?: StringFilter<"TeamMember"> | string
    employeeId?: StringFilter<"TeamMember"> | string
    role?: StringFilter<"TeamMember"> | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TeamMemberOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    employeeId?: SortOrder
    role?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamMember"> | string
    teamId?: StringWithAggregatesFilter<"TeamMember"> | string
    employeeId?: StringWithAggregatesFilter<"TeamMember"> | string
    role?: StringWithAggregatesFilter<"TeamMember"> | string
  }

  export type EmployeeAnalyticsWhereInput = {
    AND?: EmployeeAnalyticsWhereInput | EmployeeAnalyticsWhereInput[]
    OR?: EmployeeAnalyticsWhereInput[]
    NOT?: EmployeeAnalyticsWhereInput | EmployeeAnalyticsWhereInput[]
    id?: StringFilter<"EmployeeAnalytics"> | string
    employeeId?: StringFilter<"EmployeeAnalytics"> | string
    period?: StringFilter<"EmployeeAnalytics"> | string
    totalTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedOnTime?: IntFilter<"EmployeeAnalytics"> | number
    completedLate?: IntFilter<"EmployeeAnalytics"> | number
    postponedTasks?: IntFilter<"EmployeeAnalytics"> | number
    avgPostponeDays?: FloatFilter<"EmployeeAnalytics"> | number
    avgCompletionTime?: FloatFilter<"EmployeeAnalytics"> | number
    urgentTasksCount?: IntFilter<"EmployeeAnalytics"> | number
    urgentTasksOnTime?: IntFilter<"EmployeeAnalytics"> | number
    commonPostponeReason?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    workloadScore?: FloatFilter<"EmployeeAnalytics"> | number
    timeManagementScore?: FloatFilter<"EmployeeAnalytics"> | number
    aiAnalysis?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    recommendations?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    alertLevel?: StringFilter<"EmployeeAnalytics"> | string
    createdAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
    employee?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmployeeAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    period?: SortOrder
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    commonPostponeReason?: SortOrderInput | SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    alertLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: UserOrderByWithRelationInput
  }

  export type EmployeeAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_period?: EmployeeAnalyticsEmployeeIdPeriodCompoundUniqueInput
    AND?: EmployeeAnalyticsWhereInput | EmployeeAnalyticsWhereInput[]
    OR?: EmployeeAnalyticsWhereInput[]
    NOT?: EmployeeAnalyticsWhereInput | EmployeeAnalyticsWhereInput[]
    employeeId?: StringFilter<"EmployeeAnalytics"> | string
    period?: StringFilter<"EmployeeAnalytics"> | string
    totalTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedOnTime?: IntFilter<"EmployeeAnalytics"> | number
    completedLate?: IntFilter<"EmployeeAnalytics"> | number
    postponedTasks?: IntFilter<"EmployeeAnalytics"> | number
    avgPostponeDays?: FloatFilter<"EmployeeAnalytics"> | number
    avgCompletionTime?: FloatFilter<"EmployeeAnalytics"> | number
    urgentTasksCount?: IntFilter<"EmployeeAnalytics"> | number
    urgentTasksOnTime?: IntFilter<"EmployeeAnalytics"> | number
    commonPostponeReason?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    workloadScore?: FloatFilter<"EmployeeAnalytics"> | number
    timeManagementScore?: FloatFilter<"EmployeeAnalytics"> | number
    aiAnalysis?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    recommendations?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    alertLevel?: StringFilter<"EmployeeAnalytics"> | string
    createdAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
    employee?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "employeeId_period">

  export type EmployeeAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    period?: SortOrder
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    commonPostponeReason?: SortOrderInput | SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    alertLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeAnalyticsCountOrderByAggregateInput
    _avg?: EmployeeAnalyticsAvgOrderByAggregateInput
    _max?: EmployeeAnalyticsMaxOrderByAggregateInput
    _min?: EmployeeAnalyticsMinOrderByAggregateInput
    _sum?: EmployeeAnalyticsSumOrderByAggregateInput
  }

  export type EmployeeAnalyticsScalarWhereWithAggregatesInput = {
    AND?: EmployeeAnalyticsScalarWhereWithAggregatesInput | EmployeeAnalyticsScalarWhereWithAggregatesInput[]
    OR?: EmployeeAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: EmployeeAnalyticsScalarWhereWithAggregatesInput | EmployeeAnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmployeeAnalytics"> | string
    employeeId?: StringWithAggregatesFilter<"EmployeeAnalytics"> | string
    period?: StringWithAggregatesFilter<"EmployeeAnalytics"> | string
    totalTasks?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    completedTasks?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    completedOnTime?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    completedLate?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    postponedTasks?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    avgPostponeDays?: FloatWithAggregatesFilter<"EmployeeAnalytics"> | number
    avgCompletionTime?: FloatWithAggregatesFilter<"EmployeeAnalytics"> | number
    urgentTasksCount?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    urgentTasksOnTime?: IntWithAggregatesFilter<"EmployeeAnalytics"> | number
    commonPostponeReason?: StringNullableWithAggregatesFilter<"EmployeeAnalytics"> | string | null
    workloadScore?: FloatWithAggregatesFilter<"EmployeeAnalytics"> | number
    timeManagementScore?: FloatWithAggregatesFilter<"EmployeeAnalytics"> | number
    aiAnalysis?: StringNullableWithAggregatesFilter<"EmployeeAnalytics"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"EmployeeAnalytics"> | string | null
    alertLevel?: StringWithAggregatesFilter<"EmployeeAnalytics"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeAnalytics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmployeeAnalytics"> | Date | string
  }

  export type FileStorageWhereInput = {
    AND?: FileStorageWhereInput | FileStorageWhereInput[]
    OR?: FileStorageWhereInput[]
    NOT?: FileStorageWhereInput | FileStorageWhereInput[]
    id?: StringFilter<"FileStorage"> | string
    fileName?: StringFilter<"FileStorage"> | string
    fileUrl?: StringFilter<"FileStorage"> | string
    mimeType?: StringFilter<"FileStorage"> | string
    fileSize?: IntFilter<"FileStorage"> | number
    bucket?: StringFilter<"FileStorage"> | string
    path?: StringFilter<"FileStorage"> | string
    uploadedBy?: StringFilter<"FileStorage"> | string
    createdAt?: DateTimeFilter<"FileStorage"> | Date | string
    updatedAt?: DateTimeFilter<"FileStorage"> | Date | string
    deleted?: BoolFilter<"FileStorage"> | boolean
    deletedAt?: DateTimeNullableFilter<"FileStorage"> | Date | string | null
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FileStorageOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    bucket?: SortOrder
    path?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    uploader?: UserOrderByWithRelationInput
  }

  export type FileStorageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileStorageWhereInput | FileStorageWhereInput[]
    OR?: FileStorageWhereInput[]
    NOT?: FileStorageWhereInput | FileStorageWhereInput[]
    fileName?: StringFilter<"FileStorage"> | string
    fileUrl?: StringFilter<"FileStorage"> | string
    mimeType?: StringFilter<"FileStorage"> | string
    fileSize?: IntFilter<"FileStorage"> | number
    bucket?: StringFilter<"FileStorage"> | string
    path?: StringFilter<"FileStorage"> | string
    uploadedBy?: StringFilter<"FileStorage"> | string
    createdAt?: DateTimeFilter<"FileStorage"> | Date | string
    updatedAt?: DateTimeFilter<"FileStorage"> | Date | string
    deleted?: BoolFilter<"FileStorage"> | boolean
    deletedAt?: DateTimeNullableFilter<"FileStorage"> | Date | string | null
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FileStorageOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    bucket?: SortOrder
    path?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: FileStorageCountOrderByAggregateInput
    _avg?: FileStorageAvgOrderByAggregateInput
    _max?: FileStorageMaxOrderByAggregateInput
    _min?: FileStorageMinOrderByAggregateInput
    _sum?: FileStorageSumOrderByAggregateInput
  }

  export type FileStorageScalarWhereWithAggregatesInput = {
    AND?: FileStorageScalarWhereWithAggregatesInput | FileStorageScalarWhereWithAggregatesInput[]
    OR?: FileStorageScalarWhereWithAggregatesInput[]
    NOT?: FileStorageScalarWhereWithAggregatesInput | FileStorageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileStorage"> | string
    fileName?: StringWithAggregatesFilter<"FileStorage"> | string
    fileUrl?: StringWithAggregatesFilter<"FileStorage"> | string
    mimeType?: StringWithAggregatesFilter<"FileStorage"> | string
    fileSize?: IntWithAggregatesFilter<"FileStorage"> | number
    bucket?: StringWithAggregatesFilter<"FileStorage"> | string
    path?: StringWithAggregatesFilter<"FileStorage"> | string
    uploadedBy?: StringWithAggregatesFilter<"FileStorage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FileStorage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FileStorage"> | Date | string
    deleted?: BoolWithAggregatesFilter<"FileStorage"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"FileStorage"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    adminId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    module?: StringFilter<"AuditLog"> | string
    targetType?: StringFilter<"AuditLog"> | string
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrderInput | SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    admin?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    adminId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    module?: StringFilter<"AuditLog"> | string
    targetType?: StringFilter<"AuditLog"> | string
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrderInput | SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    adminId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    module?: StringWithAggregatesFilter<"AuditLog"> | string
    targetType?: StringWithAggregatesFilter<"AuditLog"> | string
    targetId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringWithAggregatesFilter<"AuditLog"> | string
    userAgent?: StringWithAggregatesFilter<"AuditLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type SystemChangeLogWhereInput = {
    AND?: SystemChangeLogWhereInput | SystemChangeLogWhereInput[]
    OR?: SystemChangeLogWhereInput[]
    NOT?: SystemChangeLogWhereInput | SystemChangeLogWhereInput[]
    id?: StringFilter<"SystemChangeLog"> | string
    changedBy?: StringFilter<"SystemChangeLog"> | string
    component?: StringFilter<"SystemChangeLog"> | string
    changeType?: StringFilter<"SystemChangeLog"> | string
    description?: StringFilter<"SystemChangeLog"> | string
    details?: StringNullableFilter<"SystemChangeLog"> | string | null
    createdAt?: DateTimeFilter<"SystemChangeLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SystemChangeLogOrderByWithRelationInput = {
    id?: SortOrder
    changedBy?: SortOrder
    component?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SystemChangeLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemChangeLogWhereInput | SystemChangeLogWhereInput[]
    OR?: SystemChangeLogWhereInput[]
    NOT?: SystemChangeLogWhereInput | SystemChangeLogWhereInput[]
    changedBy?: StringFilter<"SystemChangeLog"> | string
    component?: StringFilter<"SystemChangeLog"> | string
    changeType?: StringFilter<"SystemChangeLog"> | string
    description?: StringFilter<"SystemChangeLog"> | string
    details?: StringNullableFilter<"SystemChangeLog"> | string | null
    createdAt?: DateTimeFilter<"SystemChangeLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SystemChangeLogOrderByWithAggregationInput = {
    id?: SortOrder
    changedBy?: SortOrder
    component?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SystemChangeLogCountOrderByAggregateInput
    _max?: SystemChangeLogMaxOrderByAggregateInput
    _min?: SystemChangeLogMinOrderByAggregateInput
  }

  export type SystemChangeLogScalarWhereWithAggregatesInput = {
    AND?: SystemChangeLogScalarWhereWithAggregatesInput | SystemChangeLogScalarWhereWithAggregatesInput[]
    OR?: SystemChangeLogScalarWhereWithAggregatesInput[]
    NOT?: SystemChangeLogScalarWhereWithAggregatesInput | SystemChangeLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemChangeLog"> | string
    changedBy?: StringWithAggregatesFilter<"SystemChangeLog"> | string
    component?: StringWithAggregatesFilter<"SystemChangeLog"> | string
    changeType?: StringWithAggregatesFilter<"SystemChangeLog"> | string
    description?: StringWithAggregatesFilter<"SystemChangeLog"> | string
    details?: StringNullableWithAggregatesFilter<"SystemChangeLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SystemChangeLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeProfileCreateInput = {
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    lineToken?: string | null
    user: UserCreateNestedOneWithoutEmployeeProfileInput
  }

  export type EmployeeProfileUncheckedCreateInput = {
    userId: string
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    lineToken?: string | null
  }

  export type EmployeeProfileUpdateInput = {
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeProfileNestedInput
  }

  export type EmployeeProfileUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeProfileCreateManyInput = {
    userId: string
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    lineToken?: string | null
  }

  export type EmployeeProfileUpdateManyMutationInput = {
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeProfileUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminProfileCreateInput = {
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    user: UserCreateNestedOneWithoutAdminProfileInput
  }

  export type AdminProfileUncheckedCreateInput = {
    userId: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
  }

  export type AdminProfileUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAdminProfileNestedInput
  }

  export type AdminProfileUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminProfileCreateManyInput = {
    userId: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
  }

  export type AdminProfileUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminProfileUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SecurityLogCreateInput = {
    id?: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSecurityLogsInput
  }

  export type SecurityLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type SecurityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSecurityLogsNestedInput
  }

  export type SecurityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type SecurityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationPrefCreateInput = {
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq: string
    sound?: string
    quietHoursStart?: Date | string | null
    quietHoursEnd?: Date | string | null
    user: UserCreateNestedOneWithoutNotificationPrefInput
  }

  export type UserNotificationPrefUncheckedCreateInput = {
    userId: string
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq: string
    sound?: string
    quietHoursStart?: Date | string | null
    quietHoursEnd?: Date | string | null
  }

  export type UserNotificationPrefUpdateInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutNotificationPrefNestedInput
  }

  export type UserNotificationPrefUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserNotificationPrefCreateManyInput = {
    userId: string
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq: string
    sound?: string
    quietHoursStart?: Date | string | null
    quietHoursEnd?: Date | string | null
  }

  export type UserNotificationPrefUpdateManyMutationInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserNotificationPrefUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAppearancePrefCreateInput = {
    theme: string
    accentColor: string
    density: string
    user: UserCreateNestedOneWithoutAppearancePrefInput
  }

  export type UserAppearancePrefUncheckedCreateInput = {
    userId: string
    theme: string
    accentColor: string
    density: string
  }

  export type UserAppearancePrefUpdateInput = {
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAppearancePrefNestedInput
  }

  export type UserAppearancePrefUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
  }

  export type UserAppearancePrefCreateManyInput = {
    userId: string
    theme: string
    accentColor: string
    density: string
  }

  export type UserAppearancePrefUpdateManyMutationInput = {
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
  }

  export type UserAppearancePrefUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsCreateInput = {
    id: number
    systemName: string
    defaultLanguage: string
    dateFormat: string
    timeFormat: string
    timezone: string
    autoLogoutMinutes: number
    enableAuditLogging: boolean
    enableAnalytics: boolean
    updatedAt?: Date | string
  }

  export type SystemSettingsUncheckedCreateInput = {
    id: number
    systemName: string
    defaultLanguage: string
    dateFormat: string
    timeFormat: string
    timezone: string
    autoLogoutMinutes: number
    enableAuditLogging: boolean
    enableAnalytics: boolean
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemName?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    dateFormat?: StringFieldUpdateOperationsInput | string
    timeFormat?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    enableAuditLogging?: BoolFieldUpdateOperationsInput | boolean
    enableAnalytics?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemName?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    dateFormat?: StringFieldUpdateOperationsInput | string
    timeFormat?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    enableAuditLogging?: BoolFieldUpdateOperationsInput | boolean
    enableAnalytics?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateManyInput = {
    id: number
    systemName: string
    defaultLanguage: string
    dateFormat: string
    timeFormat: string
    timezone: string
    autoLogoutMinutes: number
    enableAuditLogging: boolean
    enableAnalytics: boolean
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemName?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    dateFormat?: StringFieldUpdateOperationsInput | string
    timeFormat?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    enableAuditLogging?: BoolFieldUpdateOperationsInput | boolean
    enableAnalytics?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemName?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    dateFormat?: StringFieldUpdateOperationsInput | string
    timeFormat?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    enableAuditLogging?: BoolFieldUpdateOperationsInput | boolean
    enableAnalytics?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSMTPCreateInput = {
    id: number
    server: string
    port: number
    username: string
    passwordEnc: string
    useTls?: boolean
    lastTestedAt?: Date | string | null
  }

  export type IntegrationSMTPUncheckedCreateInput = {
    id: number
    server: string
    port: number
    username: string
    passwordEnc: string
    useTls?: boolean
    lastTestedAt?: Date | string | null
  }

  export type IntegrationSMTPUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    server?: StringFieldUpdateOperationsInput | string
    port?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordEnc?: StringFieldUpdateOperationsInput | string
    useTls?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntegrationSMTPUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    server?: StringFieldUpdateOperationsInput | string
    port?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordEnc?: StringFieldUpdateOperationsInput | string
    useTls?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntegrationSMTPCreateManyInput = {
    id: number
    server: string
    port: number
    username: string
    passwordEnc: string
    useTls?: boolean
    lastTestedAt?: Date | string | null
  }

  export type IntegrationSMTPUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    server?: StringFieldUpdateOperationsInput | string
    port?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordEnc?: StringFieldUpdateOperationsInput | string
    useTls?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntegrationSMTPUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    server?: StringFieldUpdateOperationsInput | string
    port?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordEnc?: StringFieldUpdateOperationsInput | string
    useTls?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExternalIntegrationCreateInput = {
    id?: string
    type: string
    displayName: string
    active?: boolean
    configJson: string
    lastSyncedAt?: Date | string | null
    status: string
    webhook?: WebhookConfigCreateNestedOneWithoutIntegrationInput
  }

  export type ExternalIntegrationUncheckedCreateInput = {
    id?: string
    type: string
    displayName: string
    active?: boolean
    configJson: string
    lastSyncedAt?: Date | string | null
    status: string
    webhook?: WebhookConfigUncheckedCreateNestedOneWithoutIntegrationInput
  }

  export type ExternalIntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    webhook?: WebhookConfigUpdateOneWithoutIntegrationNestedInput
  }

  export type ExternalIntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    webhook?: WebhookConfigUncheckedUpdateOneWithoutIntegrationNestedInput
  }

  export type ExternalIntegrationCreateManyInput = {
    id?: string
    type: string
    displayName: string
    active?: boolean
    configJson: string
    lastSyncedAt?: Date | string | null
    status: string
  }

  export type ExternalIntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ExternalIntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type WebhookConfigCreateInput = {
    url: string
    secret: string
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
    integration: ExternalIntegrationCreateNestedOneWithoutWebhookInput
  }

  export type WebhookConfigUncheckedCreateInput = {
    integrationId: string
    url: string
    secret: string
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
  }

  export type WebhookConfigUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
    integration?: ExternalIntegrationUpdateOneRequiredWithoutWebhookNestedInput
  }

  export type WebhookConfigUncheckedUpdateInput = {
    integrationId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebhookConfigCreateManyInput = {
    integrationId: string
    url: string
    secret: string
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
  }

  export type WebhookConfigUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebhookConfigUncheckedUpdateManyInput = {
    integrationId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateInput = {
    id?: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutNotificationInput
    recipients?: RecipientCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutNotificationInput
    recipients?: RecipientUncheckedCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutNotificationNestedInput
    recipients?: RecipientUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutNotificationNestedInput
    recipients?: RecipientUncheckedUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateInput = {
    id?: string
    response: string
    comment?: string | null
    createdAt?: Date | string
    notification: NotificationCreateNestedOneWithoutApprovalsInput
    user: UserCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateInput = {
    id?: string
    notificationId: string
    userId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notification?: NotificationUpdateOneRequiredWithoutApprovalsNestedInput
    user?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateManyInput = {
    id?: string
    notificationId: string
    userId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipientCreateInput = {
    id?: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
    notification: NotificationCreateNestedOneWithoutRecipientsInput
  }

  export type RecipientUncheckedCreateInput = {
    id?: string
    notificationId: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
  }

  export type RecipientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    notification?: NotificationUpdateOneRequiredWithoutRecipientsNestedInput
  }

  export type RecipientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipientCreateManyInput = {
    id?: string
    notificationId: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
  }

  export type RecipientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationAttachmentCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    Notification: NotificationCreateNestedOneWithoutAttachmentsInput
  }

  export type NotificationAttachmentUncheckedCreateInput = {
    id?: string
    notificationId: string
    fileName: string
    fileUrl: string
    mimeType: string
  }

  export type NotificationAttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    Notification?: NotificationUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type NotificationAttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationAttachmentCreateManyInput = {
    id?: string
    notificationId: string
    fileName: string
    fileUrl: string
    mimeType: string
  }

  export type NotificationAttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationAttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdAt?: Date | string
    members?: TeamMemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdAt?: Date | string
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberCreateInput = {
    id?: string
    role?: string
    team: TeamCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutTeamMembershipsInput
  }

  export type TeamMemberUncheckedCreateInput = {
    id?: string
    teamId: string
    employeeId: string
    role?: string
  }

  export type TeamMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutTeamMembershipsNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMemberCreateManyInput = {
    id?: string
    teamId: string
    employeeId: string
    role?: string
  }

  export type TeamMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeAnalyticsCreateInput = {
    id?: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: UserCreateNestedOneWithoutAnalyticsInput
  }

  export type EmployeeAnalyticsUncheckedCreateInput = {
    id?: string
    employeeId: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeAnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: UserUpdateOneRequiredWithoutAnalyticsNestedInput
  }

  export type EmployeeAnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeAnalyticsCreateManyInput = {
    id?: string
    employeeId: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeAnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeAnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileStorageCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
  }

  export type FileStorageUncheckedCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileStorageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
  }

  export type FileStorageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileStorageCreateManyInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileStorageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileStorageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
    admin: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    adminId: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    adminId: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogCreateInput = {
    id?: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSystemChangesInput
  }

  export type SystemChangeLogUncheckedCreateInput = {
    id?: string
    changedBy: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type SystemChangeLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSystemChangesNestedInput
  }

  export type SystemChangeLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    changedBy?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogCreateManyInput = {
    id?: string
    changedBy: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type SystemChangeLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    changedBy?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ApprovalListRelationFilter = {
    every?: ApprovalWhereInput
    some?: ApprovalWhereInput
    none?: ApprovalWhereInput
  }

  export type EmployeeProfileNullableScalarRelationFilter = {
    is?: EmployeeProfileWhereInput | null
    isNot?: EmployeeProfileWhereInput | null
  }

  export type AdminProfileNullableScalarRelationFilter = {
    is?: AdminProfileWhereInput | null
    isNot?: AdminProfileWhereInput | null
  }

  export type UserNotificationPrefNullableScalarRelationFilter = {
    is?: UserNotificationPrefWhereInput | null
    isNot?: UserNotificationPrefWhereInput | null
  }

  export type UserAppearancePrefNullableScalarRelationFilter = {
    is?: UserAppearancePrefWhereInput | null
    isNot?: UserAppearancePrefWhereInput | null
  }

  export type SecurityLogListRelationFilter = {
    every?: SecurityLogWhereInput
    some?: SecurityLogWhereInput
    none?: SecurityLogWhereInput
  }

  export type TeamMemberListRelationFilter = {
    every?: TeamMemberWhereInput
    some?: TeamMemberWhereInput
    none?: TeamMemberWhereInput
  }

  export type EmployeeAnalyticsListRelationFilter = {
    every?: EmployeeAnalyticsWhereInput
    some?: EmployeeAnalyticsWhereInput
    none?: EmployeeAnalyticsWhereInput
  }

  export type FileStorageListRelationFilter = {
    every?: FileStorageWhereInput
    some?: FileStorageWhereInput
    none?: FileStorageWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SystemChangeLogListRelationFilter = {
    every?: SystemChangeLogWhereInput
    some?: SystemChangeLogWhereInput
    none?: SystemChangeLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SecurityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeAnalyticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileStorageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemChangeLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    loginFailCount?: SortOrder
    twoFaSecret?: SortOrder
    deviceFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    loginFailCount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    loginFailCount?: SortOrder
    twoFaSecret?: SortOrder
    deviceFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    loginFailCount?: SortOrder
    twoFaSecret?: SortOrder
    deviceFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    loginFailCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EmployeeProfileCountOrderByAggregateInput = {
    userId?: SortOrder
    companyCode?: SortOrder
    employeeCode?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
    lineToken?: SortOrder
  }

  export type EmployeeProfileMaxOrderByAggregateInput = {
    userId?: SortOrder
    companyCode?: SortOrder
    employeeCode?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
    lineToken?: SortOrder
  }

  export type EmployeeProfileMinOrderByAggregateInput = {
    userId?: SortOrder
    companyCode?: SortOrder
    employeeCode?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
    lineToken?: SortOrder
  }

  export type AdminProfileCountOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
  }

  export type AdminProfileMaxOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
  }

  export type AdminProfileMinOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    position?: SortOrder
    profileImageUrl?: SortOrder
  }

  export type SecurityLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type SecurityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type SecurityLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserNotificationPrefCountOrderByAggregateInput = {
    userId?: SortOrder
    emailEnabled?: SortOrder
    pushEnabled?: SortOrder
    smsEnabled?: SortOrder
    digestFreq?: SortOrder
    sound?: SortOrder
    quietHoursStart?: SortOrder
    quietHoursEnd?: SortOrder
  }

  export type UserNotificationPrefMaxOrderByAggregateInput = {
    userId?: SortOrder
    emailEnabled?: SortOrder
    pushEnabled?: SortOrder
    smsEnabled?: SortOrder
    digestFreq?: SortOrder
    sound?: SortOrder
    quietHoursStart?: SortOrder
    quietHoursEnd?: SortOrder
  }

  export type UserNotificationPrefMinOrderByAggregateInput = {
    userId?: SortOrder
    emailEnabled?: SortOrder
    pushEnabled?: SortOrder
    smsEnabled?: SortOrder
    digestFreq?: SortOrder
    sound?: SortOrder
    quietHoursStart?: SortOrder
    quietHoursEnd?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserAppearancePrefCountOrderByAggregateInput = {
    userId?: SortOrder
    theme?: SortOrder
    accentColor?: SortOrder
    density?: SortOrder
  }

  export type UserAppearancePrefMaxOrderByAggregateInput = {
    userId?: SortOrder
    theme?: SortOrder
    accentColor?: SortOrder
    density?: SortOrder
  }

  export type UserAppearancePrefMinOrderByAggregateInput = {
    userId?: SortOrder
    theme?: SortOrder
    accentColor?: SortOrder
    density?: SortOrder
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    systemName?: SortOrder
    defaultLanguage?: SortOrder
    dateFormat?: SortOrder
    timeFormat?: SortOrder
    timezone?: SortOrder
    autoLogoutMinutes?: SortOrder
    enableAuditLogging?: SortOrder
    enableAnalytics?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    autoLogoutMinutes?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    systemName?: SortOrder
    defaultLanguage?: SortOrder
    dateFormat?: SortOrder
    timeFormat?: SortOrder
    timezone?: SortOrder
    autoLogoutMinutes?: SortOrder
    enableAuditLogging?: SortOrder
    enableAnalytics?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    systemName?: SortOrder
    defaultLanguage?: SortOrder
    dateFormat?: SortOrder
    timeFormat?: SortOrder
    timezone?: SortOrder
    autoLogoutMinutes?: SortOrder
    enableAuditLogging?: SortOrder
    enableAnalytics?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    autoLogoutMinutes?: SortOrder
  }

  export type IntegrationSMTPCountOrderByAggregateInput = {
    id?: SortOrder
    server?: SortOrder
    port?: SortOrder
    username?: SortOrder
    passwordEnc?: SortOrder
    useTls?: SortOrder
    lastTestedAt?: SortOrder
  }

  export type IntegrationSMTPAvgOrderByAggregateInput = {
    id?: SortOrder
    port?: SortOrder
  }

  export type IntegrationSMTPMaxOrderByAggregateInput = {
    id?: SortOrder
    server?: SortOrder
    port?: SortOrder
    username?: SortOrder
    passwordEnc?: SortOrder
    useTls?: SortOrder
    lastTestedAt?: SortOrder
  }

  export type IntegrationSMTPMinOrderByAggregateInput = {
    id?: SortOrder
    server?: SortOrder
    port?: SortOrder
    username?: SortOrder
    passwordEnc?: SortOrder
    useTls?: SortOrder
    lastTestedAt?: SortOrder
  }

  export type IntegrationSMTPSumOrderByAggregateInput = {
    id?: SortOrder
    port?: SortOrder
  }

  export type WebhookConfigNullableScalarRelationFilter = {
    is?: WebhookConfigWhereInput | null
    isNot?: WebhookConfigWhereInput | null
  }

  export type ExternalIntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    displayName?: SortOrder
    active?: SortOrder
    configJson?: SortOrder
    lastSyncedAt?: SortOrder
    status?: SortOrder
  }

  export type ExternalIntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    displayName?: SortOrder
    active?: SortOrder
    configJson?: SortOrder
    lastSyncedAt?: SortOrder
    status?: SortOrder
  }

  export type ExternalIntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    displayName?: SortOrder
    active?: SortOrder
    configJson?: SortOrder
    lastSyncedAt?: SortOrder
    status?: SortOrder
  }

  export type ExternalIntegrationScalarRelationFilter = {
    is?: ExternalIntegrationWhereInput
    isNot?: ExternalIntegrationWhereInput
  }

  export type WebhookConfigCountOrderByAggregateInput = {
    integrationId?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    eventCreated?: SortOrder
    eventApproved?: SortOrder
    eventUpdated?: SortOrder
    eventRejected?: SortOrder
  }

  export type WebhookConfigMaxOrderByAggregateInput = {
    integrationId?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    eventCreated?: SortOrder
    eventApproved?: SortOrder
    eventUpdated?: SortOrder
    eventRejected?: SortOrder
  }

  export type WebhookConfigMinOrderByAggregateInput = {
    integrationId?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    eventCreated?: SortOrder
    eventApproved?: SortOrder
    eventUpdated?: SortOrder
    eventRejected?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fingerprint?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    refreshToken?: SortOrder
    refreshExpires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fingerprint?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    refreshToken?: SortOrder
    refreshExpires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fingerprint?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    refreshToken?: SortOrder
    refreshExpires?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RecipientListRelationFilter = {
    every?: RecipientWhereInput
    some?: RecipientWhereInput
    none?: RecipientWhereInput
  }

  export type NotificationAttachmentListRelationFilter = {
    every?: NotificationAttachmentWhereInput
    some?: NotificationAttachmentWhereInput
    none?: NotificationAttachmentWhereInput
  }

  export type RecipientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    category?: SortOrder
    link?: SortOrder
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    dueDate?: SortOrder
    taskStatus?: SortOrder
    taskCompletedAt?: SortOrder
    taskCompletedBy?: SortOrder
    postponeCount?: SortOrder
    postponeReason?: SortOrder
    lastPostponedAt?: SortOrder
    originalDueDate?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    scheduleMonthDay?: SortOrder
    scheduleWeekDay?: SortOrder
    scheduleTime?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    postponeCount?: SortOrder
    scheduleMonthDay?: SortOrder
    scheduleWeekDay?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    category?: SortOrder
    link?: SortOrder
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    dueDate?: SortOrder
    taskStatus?: SortOrder
    taskCompletedAt?: SortOrder
    taskCompletedBy?: SortOrder
    postponeCount?: SortOrder
    postponeReason?: SortOrder
    lastPostponedAt?: SortOrder
    originalDueDate?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    scheduleMonthDay?: SortOrder
    scheduleWeekDay?: SortOrder
    scheduleTime?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    category?: SortOrder
    link?: SortOrder
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    dueDate?: SortOrder
    taskStatus?: SortOrder
    taskCompletedAt?: SortOrder
    taskCompletedBy?: SortOrder
    postponeCount?: SortOrder
    postponeReason?: SortOrder
    lastPostponedAt?: SortOrder
    originalDueDate?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    scheduleMonthDay?: SortOrder
    scheduleWeekDay?: SortOrder
    scheduleTime?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    urgencyDays?: SortOrder
    repeatIntervalDays?: SortOrder
    postponeCount?: SortOrder
    scheduleMonthDay?: SortOrder
    scheduleWeekDay?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NotificationScalarRelationFilter = {
    is?: NotificationWhereInput
    isNot?: NotificationWhereInput
  }

  export type ApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    response?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    response?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    response?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type RecipientCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    companyCode?: SortOrder
  }

  export type RecipientMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    companyCode?: SortOrder
  }

  export type RecipientMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    companyCode?: SortOrder
  }

  export type NotificationAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
  }

  export type NotificationAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
  }

  export type NotificationAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamMemberCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    employeeId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    employeeId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    employeeId?: SortOrder
    role?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EmployeeAnalyticsEmployeeIdPeriodCompoundUniqueInput = {
    employeeId: string
    period: string
  }

  export type EmployeeAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    period?: SortOrder
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    commonPostponeReason?: SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
    aiAnalysis?: SortOrder
    recommendations?: SortOrder
    alertLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAnalyticsAvgOrderByAggregateInput = {
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
  }

  export type EmployeeAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    period?: SortOrder
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    commonPostponeReason?: SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
    aiAnalysis?: SortOrder
    recommendations?: SortOrder
    alertLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    period?: SortOrder
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    commonPostponeReason?: SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
    aiAnalysis?: SortOrder
    recommendations?: SortOrder
    alertLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAnalyticsSumOrderByAggregateInput = {
    totalTasks?: SortOrder
    completedTasks?: SortOrder
    completedOnTime?: SortOrder
    completedLate?: SortOrder
    postponedTasks?: SortOrder
    avgPostponeDays?: SortOrder
    avgCompletionTime?: SortOrder
    urgentTasksCount?: SortOrder
    urgentTasksOnTime?: SortOrder
    workloadScore?: SortOrder
    timeManagementScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FileStorageCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    bucket?: SortOrder
    path?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileStorageAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FileStorageMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    bucket?: SortOrder
    path?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileStorageMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    bucket?: SortOrder
    path?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileStorageSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemChangeLogCountOrderByAggregateInput = {
    id?: SortOrder
    changedBy?: SortOrder
    component?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemChangeLogMaxOrderByAggregateInput = {
    id?: SortOrder
    changedBy?: SortOrder
    component?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemChangeLogMinOrderByAggregateInput = {
    id?: SortOrder
    changedBy?: SortOrder
    component?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ApprovalCreateNestedManyWithoutUserInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type EmployeeProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeProfileCreateOrConnectWithoutUserInput
    connect?: EmployeeProfileWhereUniqueInput
  }

  export type AdminProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminProfileCreateOrConnectWithoutUserInput
    connect?: AdminProfileWhereUniqueInput
  }

  export type UserNotificationPrefCreateNestedOneWithoutUserInput = {
    create?: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNotificationPrefCreateOrConnectWithoutUserInput
    connect?: UserNotificationPrefWhereUniqueInput
  }

  export type UserAppearancePrefCreateNestedOneWithoutUserInput = {
    create?: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserAppearancePrefCreateOrConnectWithoutUserInput
    connect?: UserAppearancePrefWhereUniqueInput
  }

  export type SecurityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput> | SecurityLogCreateWithoutUserInput[] | SecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityLogCreateOrConnectWithoutUserInput | SecurityLogCreateOrConnectWithoutUserInput[]
    createMany?: SecurityLogCreateManyUserInputEnvelope
    connect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
  }

  export type TeamMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput> | EmployeeAnalyticsCreateWithoutEmployeeInput[] | EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput | EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeAnalyticsCreateManyEmployeeInputEnvelope
    connect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
  }

  export type FileStorageCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput> | FileStorageCreateWithoutUploaderInput[] | FileStorageUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileStorageCreateOrConnectWithoutUploaderInput | FileStorageCreateOrConnectWithoutUploaderInput[]
    createMany?: FileStorageCreateManyUploaderInputEnvelope
    connect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SystemChangeLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput> | SystemChangeLogCreateWithoutUserInput[] | SystemChangeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemChangeLogCreateOrConnectWithoutUserInput | SystemChangeLogCreateOrConnectWithoutUserInput[]
    createMany?: SystemChangeLogCreateManyUserInputEnvelope
    connect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type EmployeeProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeProfileCreateOrConnectWithoutUserInput
    connect?: EmployeeProfileWhereUniqueInput
  }

  export type AdminProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminProfileCreateOrConnectWithoutUserInput
    connect?: AdminProfileWhereUniqueInput
  }

  export type UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNotificationPrefCreateOrConnectWithoutUserInput
    connect?: UserNotificationPrefWhereUniqueInput
  }

  export type UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserAppearancePrefCreateOrConnectWithoutUserInput
    connect?: UserAppearancePrefWhereUniqueInput
  }

  export type SecurityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput> | SecurityLogCreateWithoutUserInput[] | SecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityLogCreateOrConnectWithoutUserInput | SecurityLogCreateOrConnectWithoutUserInput[]
    createMany?: SecurityLogCreateManyUserInputEnvelope
    connect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput> | EmployeeAnalyticsCreateWithoutEmployeeInput[] | EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput | EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeAnalyticsCreateManyEmployeeInputEnvelope
    connect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
  }

  export type FileStorageUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput> | FileStorageCreateWithoutUploaderInput[] | FileStorageUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileStorageCreateOrConnectWithoutUploaderInput | FileStorageCreateOrConnectWithoutUploaderInput[]
    createMany?: FileStorageCreateManyUploaderInputEnvelope
    connect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SystemChangeLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput> | SystemChangeLogCreateWithoutUserInput[] | SystemChangeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemChangeLogCreateOrConnectWithoutUserInput | SystemChangeLogCreateOrConnectWithoutUserInput[]
    createMany?: SystemChangeLogCreateManyUserInputEnvelope
    connect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ApprovalUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutUserInput | ApprovalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutUserInput | ApprovalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutUserInput | ApprovalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type EmployeeProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeProfileCreateOrConnectWithoutUserInput
    upsert?: EmployeeProfileUpsertWithoutUserInput
    disconnect?: EmployeeProfileWhereInput | boolean
    delete?: EmployeeProfileWhereInput | boolean
    connect?: EmployeeProfileWhereUniqueInput
    update?: XOR<XOR<EmployeeProfileUpdateToOneWithWhereWithoutUserInput, EmployeeProfileUpdateWithoutUserInput>, EmployeeProfileUncheckedUpdateWithoutUserInput>
  }

  export type AdminProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminProfileCreateOrConnectWithoutUserInput
    upsert?: AdminProfileUpsertWithoutUserInput
    disconnect?: AdminProfileWhereInput | boolean
    delete?: AdminProfileWhereInput | boolean
    connect?: AdminProfileWhereUniqueInput
    update?: XOR<XOR<AdminProfileUpdateToOneWithWhereWithoutUserInput, AdminProfileUpdateWithoutUserInput>, AdminProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserNotificationPrefUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNotificationPrefCreateOrConnectWithoutUserInput
    upsert?: UserNotificationPrefUpsertWithoutUserInput
    disconnect?: UserNotificationPrefWhereInput | boolean
    delete?: UserNotificationPrefWhereInput | boolean
    connect?: UserNotificationPrefWhereUniqueInput
    update?: XOR<XOR<UserNotificationPrefUpdateToOneWithWhereWithoutUserInput, UserNotificationPrefUpdateWithoutUserInput>, UserNotificationPrefUncheckedUpdateWithoutUserInput>
  }

  export type UserAppearancePrefUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserAppearancePrefCreateOrConnectWithoutUserInput
    upsert?: UserAppearancePrefUpsertWithoutUserInput
    disconnect?: UserAppearancePrefWhereInput | boolean
    delete?: UserAppearancePrefWhereInput | boolean
    connect?: UserAppearancePrefWhereUniqueInput
    update?: XOR<XOR<UserAppearancePrefUpdateToOneWithWhereWithoutUserInput, UserAppearancePrefUpdateWithoutUserInput>, UserAppearancePrefUncheckedUpdateWithoutUserInput>
  }

  export type SecurityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput> | SecurityLogCreateWithoutUserInput[] | SecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityLogCreateOrConnectWithoutUserInput | SecurityLogCreateOrConnectWithoutUserInput[]
    upsert?: SecurityLogUpsertWithWhereUniqueWithoutUserInput | SecurityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityLogCreateManyUserInputEnvelope
    set?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    disconnect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    delete?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    connect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    update?: SecurityLogUpdateWithWhereUniqueWithoutUserInput | SecurityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityLogUpdateManyWithWhereWithoutUserInput | SecurityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityLogScalarWhereInput | SecurityLogScalarWhereInput[]
  }

  export type TeamMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput> | EmployeeAnalyticsCreateWithoutEmployeeInput[] | EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput | EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeAnalyticsUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeAnalyticsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeAnalyticsCreateManyEmployeeInputEnvelope
    set?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    disconnect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    delete?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    connect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    update?: EmployeeAnalyticsUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeAnalyticsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeAnalyticsUpdateManyWithWhereWithoutEmployeeInput | EmployeeAnalyticsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeAnalyticsScalarWhereInput | EmployeeAnalyticsScalarWhereInput[]
  }

  export type FileStorageUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput> | FileStorageCreateWithoutUploaderInput[] | FileStorageUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileStorageCreateOrConnectWithoutUploaderInput | FileStorageCreateOrConnectWithoutUploaderInput[]
    upsert?: FileStorageUpsertWithWhereUniqueWithoutUploaderInput | FileStorageUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FileStorageCreateManyUploaderInputEnvelope
    set?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    disconnect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    delete?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    connect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    update?: FileStorageUpdateWithWhereUniqueWithoutUploaderInput | FileStorageUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FileStorageUpdateManyWithWhereWithoutUploaderInput | FileStorageUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FileStorageScalarWhereInput | FileStorageScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAdminInput | AuditLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAdminInput | AuditLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAdminInput | AuditLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SystemChangeLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput> | SystemChangeLogCreateWithoutUserInput[] | SystemChangeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemChangeLogCreateOrConnectWithoutUserInput | SystemChangeLogCreateOrConnectWithoutUserInput[]
    upsert?: SystemChangeLogUpsertWithWhereUniqueWithoutUserInput | SystemChangeLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SystemChangeLogCreateManyUserInputEnvelope
    set?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    disconnect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    delete?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    connect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    update?: SystemChangeLogUpdateWithWhereUniqueWithoutUserInput | SystemChangeLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SystemChangeLogUpdateManyWithWhereWithoutUserInput | SystemChangeLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SystemChangeLogScalarWhereInput | SystemChangeLogScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutUserInput | ApprovalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutUserInput | ApprovalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutUserInput | ApprovalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeProfileCreateOrConnectWithoutUserInput
    upsert?: EmployeeProfileUpsertWithoutUserInput
    disconnect?: EmployeeProfileWhereInput | boolean
    delete?: EmployeeProfileWhereInput | boolean
    connect?: EmployeeProfileWhereUniqueInput
    update?: XOR<XOR<EmployeeProfileUpdateToOneWithWhereWithoutUserInput, EmployeeProfileUpdateWithoutUserInput>, EmployeeProfileUncheckedUpdateWithoutUserInput>
  }

  export type AdminProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminProfileCreateOrConnectWithoutUserInput
    upsert?: AdminProfileUpsertWithoutUserInput
    disconnect?: AdminProfileWhereInput | boolean
    delete?: AdminProfileWhereInput | boolean
    connect?: AdminProfileWhereUniqueInput
    update?: XOR<XOR<AdminProfileUpdateToOneWithWhereWithoutUserInput, AdminProfileUpdateWithoutUserInput>, AdminProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNotificationPrefCreateOrConnectWithoutUserInput
    upsert?: UserNotificationPrefUpsertWithoutUserInput
    disconnect?: UserNotificationPrefWhereInput | boolean
    delete?: UserNotificationPrefWhereInput | boolean
    connect?: UserNotificationPrefWhereUniqueInput
    update?: XOR<XOR<UserNotificationPrefUpdateToOneWithWhereWithoutUserInput, UserNotificationPrefUpdateWithoutUserInput>, UserNotificationPrefUncheckedUpdateWithoutUserInput>
  }

  export type UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserAppearancePrefCreateOrConnectWithoutUserInput
    upsert?: UserAppearancePrefUpsertWithoutUserInput
    disconnect?: UserAppearancePrefWhereInput | boolean
    delete?: UserAppearancePrefWhereInput | boolean
    connect?: UserAppearancePrefWhereUniqueInput
    update?: XOR<XOR<UserAppearancePrefUpdateToOneWithWhereWithoutUserInput, UserAppearancePrefUpdateWithoutUserInput>, UserAppearancePrefUncheckedUpdateWithoutUserInput>
  }

  export type SecurityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput> | SecurityLogCreateWithoutUserInput[] | SecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityLogCreateOrConnectWithoutUserInput | SecurityLogCreateOrConnectWithoutUserInput[]
    upsert?: SecurityLogUpsertWithWhereUniqueWithoutUserInput | SecurityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityLogCreateManyUserInputEnvelope
    set?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    disconnect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    delete?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    connect?: SecurityLogWhereUniqueInput | SecurityLogWhereUniqueInput[]
    update?: SecurityLogUpdateWithWhereUniqueWithoutUserInput | SecurityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityLogUpdateManyWithWhereWithoutUserInput | SecurityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityLogScalarWhereInput | SecurityLogScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput> | EmployeeAnalyticsCreateWithoutEmployeeInput[] | EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput | EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeAnalyticsUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeAnalyticsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeAnalyticsCreateManyEmployeeInputEnvelope
    set?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    disconnect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    delete?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    connect?: EmployeeAnalyticsWhereUniqueInput | EmployeeAnalyticsWhereUniqueInput[]
    update?: EmployeeAnalyticsUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeAnalyticsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeAnalyticsUpdateManyWithWhereWithoutEmployeeInput | EmployeeAnalyticsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeAnalyticsScalarWhereInput | EmployeeAnalyticsScalarWhereInput[]
  }

  export type FileStorageUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput> | FileStorageCreateWithoutUploaderInput[] | FileStorageUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileStorageCreateOrConnectWithoutUploaderInput | FileStorageCreateOrConnectWithoutUploaderInput[]
    upsert?: FileStorageUpsertWithWhereUniqueWithoutUploaderInput | FileStorageUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FileStorageCreateManyUploaderInputEnvelope
    set?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    disconnect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    delete?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    connect?: FileStorageWhereUniqueInput | FileStorageWhereUniqueInput[]
    update?: FileStorageUpdateWithWhereUniqueWithoutUploaderInput | FileStorageUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FileStorageUpdateManyWithWhereWithoutUploaderInput | FileStorageUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FileStorageScalarWhereInput | FileStorageScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAdminInput | AuditLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAdminInput | AuditLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAdminInput | AuditLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput> | SystemChangeLogCreateWithoutUserInput[] | SystemChangeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemChangeLogCreateOrConnectWithoutUserInput | SystemChangeLogCreateOrConnectWithoutUserInput[]
    upsert?: SystemChangeLogUpsertWithWhereUniqueWithoutUserInput | SystemChangeLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SystemChangeLogCreateManyUserInputEnvelope
    set?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    disconnect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    delete?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    connect?: SystemChangeLogWhereUniqueInput | SystemChangeLogWhereUniqueInput[]
    update?: SystemChangeLogUpdateWithWhereUniqueWithoutUserInput | SystemChangeLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SystemChangeLogUpdateManyWithWhereWithoutUserInput | SystemChangeLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SystemChangeLogScalarWhereInput | SystemChangeLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmployeeProfileInput = {
    create?: XOR<UserCreateWithoutEmployeeProfileInput, UserUncheckedCreateWithoutEmployeeProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmployeeProfileNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeProfileInput, UserUncheckedCreateWithoutEmployeeProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeProfileInput
    upsert?: UserUpsertWithoutEmployeeProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeProfileInput, UserUpdateWithoutEmployeeProfileInput>, UserUncheckedUpdateWithoutEmployeeProfileInput>
  }

  export type UserCreateNestedOneWithoutAdminProfileInput = {
    create?: XOR<UserCreateWithoutAdminProfileInput, UserUncheckedCreateWithoutAdminProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminProfileNestedInput = {
    create?: XOR<UserCreateWithoutAdminProfileInput, UserUncheckedCreateWithoutAdminProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminProfileInput
    upsert?: UserUpsertWithoutAdminProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminProfileInput, UserUpdateWithoutAdminProfileInput>, UserUncheckedUpdateWithoutAdminProfileInput>
  }

  export type UserCreateNestedOneWithoutSecurityLogsInput = {
    create?: XOR<UserCreateWithoutSecurityLogsInput, UserUncheckedCreateWithoutSecurityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSecurityLogsNestedInput = {
    create?: XOR<UserCreateWithoutSecurityLogsInput, UserUncheckedCreateWithoutSecurityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityLogsInput
    upsert?: UserUpsertWithoutSecurityLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSecurityLogsInput, UserUpdateWithoutSecurityLogsInput>, UserUncheckedUpdateWithoutSecurityLogsInput>
  }

  export type UserCreateNestedOneWithoutNotificationPrefInput = {
    create?: XOR<UserCreateWithoutNotificationPrefInput, UserUncheckedCreateWithoutNotificationPrefInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPrefInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutNotificationPrefNestedInput = {
    create?: XOR<UserCreateWithoutNotificationPrefInput, UserUncheckedCreateWithoutNotificationPrefInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPrefInput
    upsert?: UserUpsertWithoutNotificationPrefInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationPrefInput, UserUpdateWithoutNotificationPrefInput>, UserUncheckedUpdateWithoutNotificationPrefInput>
  }

  export type UserCreateNestedOneWithoutAppearancePrefInput = {
    create?: XOR<UserCreateWithoutAppearancePrefInput, UserUncheckedCreateWithoutAppearancePrefInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppearancePrefInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAppearancePrefNestedInput = {
    create?: XOR<UserCreateWithoutAppearancePrefInput, UserUncheckedCreateWithoutAppearancePrefInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppearancePrefInput
    upsert?: UserUpsertWithoutAppearancePrefInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppearancePrefInput, UserUpdateWithoutAppearancePrefInput>, UserUncheckedUpdateWithoutAppearancePrefInput>
  }

  export type WebhookConfigCreateNestedOneWithoutIntegrationInput = {
    create?: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: WebhookConfigCreateOrConnectWithoutIntegrationInput
    connect?: WebhookConfigWhereUniqueInput
  }

  export type WebhookConfigUncheckedCreateNestedOneWithoutIntegrationInput = {
    create?: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: WebhookConfigCreateOrConnectWithoutIntegrationInput
    connect?: WebhookConfigWhereUniqueInput
  }

  export type WebhookConfigUpdateOneWithoutIntegrationNestedInput = {
    create?: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: WebhookConfigCreateOrConnectWithoutIntegrationInput
    upsert?: WebhookConfigUpsertWithoutIntegrationInput
    disconnect?: WebhookConfigWhereInput | boolean
    delete?: WebhookConfigWhereInput | boolean
    connect?: WebhookConfigWhereUniqueInput
    update?: XOR<XOR<WebhookConfigUpdateToOneWithWhereWithoutIntegrationInput, WebhookConfigUpdateWithoutIntegrationInput>, WebhookConfigUncheckedUpdateWithoutIntegrationInput>
  }

  export type WebhookConfigUncheckedUpdateOneWithoutIntegrationNestedInput = {
    create?: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: WebhookConfigCreateOrConnectWithoutIntegrationInput
    upsert?: WebhookConfigUpsertWithoutIntegrationInput
    disconnect?: WebhookConfigWhereInput | boolean
    delete?: WebhookConfigWhereInput | boolean
    connect?: WebhookConfigWhereUniqueInput
    update?: XOR<XOR<WebhookConfigUpdateToOneWithWhereWithoutIntegrationInput, WebhookConfigUpdateWithoutIntegrationInput>, WebhookConfigUncheckedUpdateWithoutIntegrationInput>
  }

  export type ExternalIntegrationCreateNestedOneWithoutWebhookInput = {
    create?: XOR<ExternalIntegrationCreateWithoutWebhookInput, ExternalIntegrationUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: ExternalIntegrationCreateOrConnectWithoutWebhookInput
    connect?: ExternalIntegrationWhereUniqueInput
  }

  export type ExternalIntegrationUpdateOneRequiredWithoutWebhookNestedInput = {
    create?: XOR<ExternalIntegrationCreateWithoutWebhookInput, ExternalIntegrationUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: ExternalIntegrationCreateOrConnectWithoutWebhookInput
    upsert?: ExternalIntegrationUpsertWithoutWebhookInput
    connect?: ExternalIntegrationWhereUniqueInput
    update?: XOR<XOR<ExternalIntegrationUpdateToOneWithWhereWithoutWebhookInput, ExternalIntegrationUpdateWithoutWebhookInput>, ExternalIntegrationUncheckedUpdateWithoutWebhookInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ApprovalCreateNestedManyWithoutNotificationInput = {
    create?: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput> | ApprovalCreateWithoutNotificationInput[] | ApprovalUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutNotificationInput | ApprovalCreateOrConnectWithoutNotificationInput[]
    createMany?: ApprovalCreateManyNotificationInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type RecipientCreateNestedManyWithoutNotificationInput = {
    create?: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput> | RecipientCreateWithoutNotificationInput[] | RecipientUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: RecipientCreateOrConnectWithoutNotificationInput | RecipientCreateOrConnectWithoutNotificationInput[]
    createMany?: RecipientCreateManyNotificationInputEnvelope
    connect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
  }

  export type NotificationAttachmentCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput> | NotificationAttachmentCreateWithoutNotificationInput[] | NotificationAttachmentUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationAttachmentCreateOrConnectWithoutNotificationInput | NotificationAttachmentCreateOrConnectWithoutNotificationInput[]
    createMany?: NotificationAttachmentCreateManyNotificationInputEnvelope
    connect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput> | ApprovalCreateWithoutNotificationInput[] | ApprovalUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutNotificationInput | ApprovalCreateOrConnectWithoutNotificationInput[]
    createMany?: ApprovalCreateManyNotificationInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type RecipientUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput> | RecipientCreateWithoutNotificationInput[] | RecipientUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: RecipientCreateOrConnectWithoutNotificationInput | RecipientCreateOrConnectWithoutNotificationInput[]
    createMany?: RecipientCreateManyNotificationInputEnvelope
    connect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
  }

  export type NotificationAttachmentUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput> | NotificationAttachmentCreateWithoutNotificationInput[] | NotificationAttachmentUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationAttachmentCreateOrConnectWithoutNotificationInput | NotificationAttachmentCreateOrConnectWithoutNotificationInput[]
    createMany?: NotificationAttachmentCreateManyNotificationInputEnvelope
    connect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApprovalUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput> | ApprovalCreateWithoutNotificationInput[] | ApprovalUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutNotificationInput | ApprovalCreateOrConnectWithoutNotificationInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutNotificationInput | ApprovalUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: ApprovalCreateManyNotificationInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutNotificationInput | ApprovalUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutNotificationInput | ApprovalUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type RecipientUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput> | RecipientCreateWithoutNotificationInput[] | RecipientUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: RecipientCreateOrConnectWithoutNotificationInput | RecipientCreateOrConnectWithoutNotificationInput[]
    upsert?: RecipientUpsertWithWhereUniqueWithoutNotificationInput | RecipientUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: RecipientCreateManyNotificationInputEnvelope
    set?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    disconnect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    delete?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    connect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    update?: RecipientUpdateWithWhereUniqueWithoutNotificationInput | RecipientUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: RecipientUpdateManyWithWhereWithoutNotificationInput | RecipientUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: RecipientScalarWhereInput | RecipientScalarWhereInput[]
  }

  export type NotificationAttachmentUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput> | NotificationAttachmentCreateWithoutNotificationInput[] | NotificationAttachmentUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationAttachmentCreateOrConnectWithoutNotificationInput | NotificationAttachmentCreateOrConnectWithoutNotificationInput[]
    upsert?: NotificationAttachmentUpsertWithWhereUniqueWithoutNotificationInput | NotificationAttachmentUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotificationAttachmentCreateManyNotificationInputEnvelope
    set?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    disconnect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    delete?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    connect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    update?: NotificationAttachmentUpdateWithWhereUniqueWithoutNotificationInput | NotificationAttachmentUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotificationAttachmentUpdateManyWithWhereWithoutNotificationInput | NotificationAttachmentUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotificationAttachmentScalarWhereInput | NotificationAttachmentScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput> | ApprovalCreateWithoutNotificationInput[] | ApprovalUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutNotificationInput | ApprovalCreateOrConnectWithoutNotificationInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutNotificationInput | ApprovalUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: ApprovalCreateManyNotificationInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutNotificationInput | ApprovalUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutNotificationInput | ApprovalUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type RecipientUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput> | RecipientCreateWithoutNotificationInput[] | RecipientUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: RecipientCreateOrConnectWithoutNotificationInput | RecipientCreateOrConnectWithoutNotificationInput[]
    upsert?: RecipientUpsertWithWhereUniqueWithoutNotificationInput | RecipientUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: RecipientCreateManyNotificationInputEnvelope
    set?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    disconnect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    delete?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    connect?: RecipientWhereUniqueInput | RecipientWhereUniqueInput[]
    update?: RecipientUpdateWithWhereUniqueWithoutNotificationInput | RecipientUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: RecipientUpdateManyWithWhereWithoutNotificationInput | RecipientUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: RecipientScalarWhereInput | RecipientScalarWhereInput[]
  }

  export type NotificationAttachmentUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput> | NotificationAttachmentCreateWithoutNotificationInput[] | NotificationAttachmentUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationAttachmentCreateOrConnectWithoutNotificationInput | NotificationAttachmentCreateOrConnectWithoutNotificationInput[]
    upsert?: NotificationAttachmentUpsertWithWhereUniqueWithoutNotificationInput | NotificationAttachmentUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotificationAttachmentCreateManyNotificationInputEnvelope
    set?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    disconnect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    delete?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    connect?: NotificationAttachmentWhereUniqueInput | NotificationAttachmentWhereUniqueInput[]
    update?: NotificationAttachmentUpdateWithWhereUniqueWithoutNotificationInput | NotificationAttachmentUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotificationAttachmentUpdateManyWithWhereWithoutNotificationInput | NotificationAttachmentUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotificationAttachmentScalarWhereInput | NotificationAttachmentScalarWhereInput[]
  }

  export type NotificationCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<NotificationCreateWithoutApprovalsInput, NotificationUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutApprovalsInput
    connect?: NotificationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<NotificationCreateWithoutApprovalsInput, NotificationUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutApprovalsInput
    upsert?: NotificationUpsertWithoutApprovalsInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutApprovalsInput, NotificationUpdateWithoutApprovalsInput>, NotificationUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    upsert?: UserUpsertWithoutApprovalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalsInput, UserUpdateWithoutApprovalsInput>, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type NotificationCreateNestedOneWithoutRecipientsInput = {
    create?: XOR<NotificationCreateWithoutRecipientsInput, NotificationUncheckedCreateWithoutRecipientsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientsInput
    connect?: NotificationWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutRecipientsNestedInput = {
    create?: XOR<NotificationCreateWithoutRecipientsInput, NotificationUncheckedCreateWithoutRecipientsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientsInput
    upsert?: NotificationUpsertWithoutRecipientsInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutRecipientsInput, NotificationUpdateWithoutRecipientsInput>, NotificationUncheckedUpdateWithoutRecipientsInput>
  }

  export type NotificationCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<NotificationCreateWithoutAttachmentsInput, NotificationUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutAttachmentsInput
    connect?: NotificationWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<NotificationCreateWithoutAttachmentsInput, NotificationUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutAttachmentsInput
    upsert?: NotificationUpsertWithoutAttachmentsInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutAttachmentsInput, NotificationUpdateWithoutAttachmentsInput>, NotificationUncheckedUpdateWithoutAttachmentsInput>
  }

  export type TeamMemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type TeamMemberUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamMembershipsInput = {
    create?: XOR<UserCreateWithoutTeamMembershipsInput, UserUncheckedCreateWithoutTeamMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMembersInput, TeamUpdateWithoutMembersInput>, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutTeamMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutTeamMembershipsInput, UserUncheckedCreateWithoutTeamMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembershipsInput
    upsert?: UserUpsertWithoutTeamMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMembershipsInput, UserUpdateWithoutTeamMembershipsInput>, UserUncheckedUpdateWithoutTeamMembershipsInput>
  }

  export type UserCreateNestedOneWithoutAnalyticsInput = {
    create?: XOR<UserCreateWithoutAnalyticsInput, UserUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAnalyticsNestedInput = {
    create?: XOR<UserCreateWithoutAnalyticsInput, UserUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsInput
    upsert?: UserUpsertWithoutAnalyticsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnalyticsInput, UserUpdateWithoutAnalyticsInput>, UserUncheckedUpdateWithoutAnalyticsInput>
  }

  export type UserCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    upsert?: UserUpsertWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedFilesInput, UserUpdateWithoutUploadedFilesInput>, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutSystemChangesInput = {
    create?: XOR<UserCreateWithoutSystemChangesInput, UserUncheckedCreateWithoutSystemChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemChangesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSystemChangesNestedInput = {
    create?: XOR<UserCreateWithoutSystemChangesInput, UserUncheckedCreateWithoutSystemChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemChangesInput
    upsert?: UserUpsertWithoutSystemChangesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSystemChangesInput, UserUpdateWithoutSystemChangesInput>, UserUncheckedUpdateWithoutSystemChangesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
  }

  export type ApprovalCreateWithoutUserInput = {
    id?: string
    response: string
    comment?: string | null
    createdAt?: Date | string
    notification: NotificationCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutUserInput = {
    id?: string
    notificationId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput>
  }

  export type ApprovalCreateManyUserInputEnvelope = {
    data: ApprovalCreateManyUserInput | ApprovalCreateManyUserInput[]
  }

  export type EmployeeProfileCreateWithoutUserInput = {
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    lineToken?: string | null
  }

  export type EmployeeProfileUncheckedCreateWithoutUserInput = {
    companyCode: string
    employeeCode: string
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
    lineToken?: string | null
  }

  export type EmployeeProfileCreateOrConnectWithoutUserInput = {
    where: EmployeeProfileWhereUniqueInput
    create: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
  }

  export type AdminProfileCreateWithoutUserInput = {
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
  }

  export type AdminProfileUncheckedCreateWithoutUserInput = {
    firstName: string
    lastName: string
    nickname?: string | null
    position?: string | null
    profileImageUrl?: string | null
  }

  export type AdminProfileCreateOrConnectWithoutUserInput = {
    where: AdminProfileWhereUniqueInput
    create: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
  }

  export type UserNotificationPrefCreateWithoutUserInput = {
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq: string
    sound?: string
    quietHoursStart?: Date | string | null
    quietHoursEnd?: Date | string | null
  }

  export type UserNotificationPrefUncheckedCreateWithoutUserInput = {
    emailEnabled?: boolean
    pushEnabled?: boolean
    smsEnabled?: boolean
    digestFreq: string
    sound?: string
    quietHoursStart?: Date | string | null
    quietHoursEnd?: Date | string | null
  }

  export type UserNotificationPrefCreateOrConnectWithoutUserInput = {
    where: UserNotificationPrefWhereUniqueInput
    create: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
  }

  export type UserAppearancePrefCreateWithoutUserInput = {
    theme: string
    accentColor: string
    density: string
  }

  export type UserAppearancePrefUncheckedCreateWithoutUserInput = {
    theme: string
    accentColor: string
    density: string
  }

  export type UserAppearancePrefCreateOrConnectWithoutUserInput = {
    where: UserAppearancePrefWhereUniqueInput
    create: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
  }

  export type SecurityLogCreateWithoutUserInput = {
    id?: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type SecurityLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type SecurityLogCreateOrConnectWithoutUserInput = {
    where: SecurityLogWhereUniqueInput
    create: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput>
  }

  export type SecurityLogCreateManyUserInputEnvelope = {
    data: SecurityLogCreateManyUserInput | SecurityLogCreateManyUserInput[]
  }

  export type TeamMemberCreateWithoutUserInput = {
    id?: string
    role?: string
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    id?: string
    teamId: string
    role?: string
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateManyUserInputEnvelope = {
    data: TeamMemberCreateManyUserInput | TeamMemberCreateManyUserInput[]
  }

  export type EmployeeAnalyticsCreateWithoutEmployeeInput = {
    id?: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput = {
    id?: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeAnalyticsCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeAnalyticsWhereUniqueInput
    create: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeAnalyticsCreateManyEmployeeInputEnvelope = {
    data: EmployeeAnalyticsCreateManyEmployeeInput | EmployeeAnalyticsCreateManyEmployeeInput[]
  }

  export type FileStorageCreateWithoutUploaderInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileStorageUncheckedCreateWithoutUploaderInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileStorageCreateOrConnectWithoutUploaderInput = {
    where: FileStorageWhereUniqueInput
    create: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput>
  }

  export type FileStorageCreateManyUploaderInputEnvelope = {
    data: FileStorageCreateManyUploaderInput | FileStorageCreateManyUploaderInput[]
  }

  export type AuditLogCreateWithoutAdminInput = {
    id?: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutAdminInput = {
    id?: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput>
  }

  export type AuditLogCreateManyAdminInputEnvelope = {
    data: AuditLogCreateManyAdminInput | AuditLogCreateManyAdminInput[]
  }

  export type SystemChangeLogCreateWithoutUserInput = {
    id?: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type SystemChangeLogUncheckedCreateWithoutUserInput = {
    id?: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type SystemChangeLogCreateOrConnectWithoutUserInput = {
    where: SystemChangeLogWhereUniqueInput
    create: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput>
  }

  export type SystemChangeLogCreateManyUserInputEnvelope = {
    data: SystemChangeLogCreateManyUserInput | SystemChangeLogCreateManyUserInput[]
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    fingerprint?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    refreshToken?: StringNullableFilter<"Session"> | string | null
    refreshExpires?: DateTimeNullableFilter<"Session"> | Date | string | null
  }

  export type ApprovalUpsertWithWhereUniqueWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutUserInput, ApprovalUncheckedUpdateWithoutUserInput>
    create: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutUserInput, ApprovalUncheckedUpdateWithoutUserInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutUserInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutUserInput>
  }

  export type ApprovalScalarWhereInput = {
    AND?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    OR?: ApprovalScalarWhereInput[]
    NOT?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    id?: StringFilter<"Approval"> | string
    notificationId?: StringFilter<"Approval"> | string
    userId?: StringFilter<"Approval"> | string
    response?: StringFilter<"Approval"> | string
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
  }

  export type EmployeeProfileUpsertWithoutUserInput = {
    update: XOR<EmployeeProfileUpdateWithoutUserInput, EmployeeProfileUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeProfileCreateWithoutUserInput, EmployeeProfileUncheckedCreateWithoutUserInput>
    where?: EmployeeProfileWhereInput
  }

  export type EmployeeProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeProfileWhereInput
    data: XOR<EmployeeProfileUpdateWithoutUserInput, EmployeeProfileUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeProfileUpdateWithoutUserInput = {
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeProfileUncheckedUpdateWithoutUserInput = {
    companyCode?: StringFieldUpdateOperationsInput | string
    employeeCode?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lineToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminProfileUpsertWithoutUserInput = {
    update: XOR<AdminProfileUpdateWithoutUserInput, AdminProfileUncheckedUpdateWithoutUserInput>
    create: XOR<AdminProfileCreateWithoutUserInput, AdminProfileUncheckedCreateWithoutUserInput>
    where?: AdminProfileWhereInput
  }

  export type AdminProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminProfileWhereInput
    data: XOR<AdminProfileUpdateWithoutUserInput, AdminProfileUncheckedUpdateWithoutUserInput>
  }

  export type AdminProfileUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminProfileUncheckedUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserNotificationPrefUpsertWithoutUserInput = {
    update: XOR<UserNotificationPrefUpdateWithoutUserInput, UserNotificationPrefUncheckedUpdateWithoutUserInput>
    create: XOR<UserNotificationPrefCreateWithoutUserInput, UserNotificationPrefUncheckedCreateWithoutUserInput>
    where?: UserNotificationPrefWhereInput
  }

  export type UserNotificationPrefUpdateToOneWithWhereWithoutUserInput = {
    where?: UserNotificationPrefWhereInput
    data: XOR<UserNotificationPrefUpdateWithoutUserInput, UserNotificationPrefUncheckedUpdateWithoutUserInput>
  }

  export type UserNotificationPrefUpdateWithoutUserInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserNotificationPrefUncheckedUpdateWithoutUserInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    digestFreq?: StringFieldUpdateOperationsInput | string
    sound?: StringFieldUpdateOperationsInput | string
    quietHoursStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quietHoursEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAppearancePrefUpsertWithoutUserInput = {
    update: XOR<UserAppearancePrefUpdateWithoutUserInput, UserAppearancePrefUncheckedUpdateWithoutUserInput>
    create: XOR<UserAppearancePrefCreateWithoutUserInput, UserAppearancePrefUncheckedCreateWithoutUserInput>
    where?: UserAppearancePrefWhereInput
  }

  export type UserAppearancePrefUpdateToOneWithWhereWithoutUserInput = {
    where?: UserAppearancePrefWhereInput
    data: XOR<UserAppearancePrefUpdateWithoutUserInput, UserAppearancePrefUncheckedUpdateWithoutUserInput>
  }

  export type UserAppearancePrefUpdateWithoutUserInput = {
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
  }

  export type UserAppearancePrefUncheckedUpdateWithoutUserInput = {
    theme?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    density?: StringFieldUpdateOperationsInput | string
  }

  export type SecurityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SecurityLogWhereUniqueInput
    update: XOR<SecurityLogUpdateWithoutUserInput, SecurityLogUncheckedUpdateWithoutUserInput>
    create: XOR<SecurityLogCreateWithoutUserInput, SecurityLogUncheckedCreateWithoutUserInput>
  }

  export type SecurityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SecurityLogWhereUniqueInput
    data: XOR<SecurityLogUpdateWithoutUserInput, SecurityLogUncheckedUpdateWithoutUserInput>
  }

  export type SecurityLogUpdateManyWithWhereWithoutUserInput = {
    where: SecurityLogScalarWhereInput
    data: XOR<SecurityLogUpdateManyMutationInput, SecurityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SecurityLogScalarWhereInput = {
    AND?: SecurityLogScalarWhereInput | SecurityLogScalarWhereInput[]
    OR?: SecurityLogScalarWhereInput[]
    NOT?: SecurityLogScalarWhereInput | SecurityLogScalarWhereInput[]
    id?: StringFilter<"SecurityLog"> | string
    userId?: StringFilter<"SecurityLog"> | string
    action?: StringFilter<"SecurityLog"> | string
    ipAddress?: StringFilter<"SecurityLog"> | string
    userAgent?: StringFilter<"SecurityLog"> | string
    createdAt?: DateTimeFilter<"SecurityLog"> | Date | string
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMemberScalarWhereInput = {
    AND?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    OR?: TeamMemberScalarWhereInput[]
    NOT?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    employeeId?: StringFilter<"TeamMember"> | string
    role?: StringFilter<"TeamMember"> | string
  }

  export type EmployeeAnalyticsUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeAnalyticsWhereUniqueInput
    update: XOR<EmployeeAnalyticsUpdateWithoutEmployeeInput, EmployeeAnalyticsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeAnalyticsCreateWithoutEmployeeInput, EmployeeAnalyticsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeAnalyticsUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeAnalyticsWhereUniqueInput
    data: XOR<EmployeeAnalyticsUpdateWithoutEmployeeInput, EmployeeAnalyticsUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeAnalyticsUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeAnalyticsScalarWhereInput
    data: XOR<EmployeeAnalyticsUpdateManyMutationInput, EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeAnalyticsScalarWhereInput = {
    AND?: EmployeeAnalyticsScalarWhereInput | EmployeeAnalyticsScalarWhereInput[]
    OR?: EmployeeAnalyticsScalarWhereInput[]
    NOT?: EmployeeAnalyticsScalarWhereInput | EmployeeAnalyticsScalarWhereInput[]
    id?: StringFilter<"EmployeeAnalytics"> | string
    employeeId?: StringFilter<"EmployeeAnalytics"> | string
    period?: StringFilter<"EmployeeAnalytics"> | string
    totalTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedTasks?: IntFilter<"EmployeeAnalytics"> | number
    completedOnTime?: IntFilter<"EmployeeAnalytics"> | number
    completedLate?: IntFilter<"EmployeeAnalytics"> | number
    postponedTasks?: IntFilter<"EmployeeAnalytics"> | number
    avgPostponeDays?: FloatFilter<"EmployeeAnalytics"> | number
    avgCompletionTime?: FloatFilter<"EmployeeAnalytics"> | number
    urgentTasksCount?: IntFilter<"EmployeeAnalytics"> | number
    urgentTasksOnTime?: IntFilter<"EmployeeAnalytics"> | number
    commonPostponeReason?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    workloadScore?: FloatFilter<"EmployeeAnalytics"> | number
    timeManagementScore?: FloatFilter<"EmployeeAnalytics"> | number
    aiAnalysis?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    recommendations?: StringNullableFilter<"EmployeeAnalytics"> | string | null
    alertLevel?: StringFilter<"EmployeeAnalytics"> | string
    createdAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeAnalytics"> | Date | string
  }

  export type FileStorageUpsertWithWhereUniqueWithoutUploaderInput = {
    where: FileStorageWhereUniqueInput
    update: XOR<FileStorageUpdateWithoutUploaderInput, FileStorageUncheckedUpdateWithoutUploaderInput>
    create: XOR<FileStorageCreateWithoutUploaderInput, FileStorageUncheckedCreateWithoutUploaderInput>
  }

  export type FileStorageUpdateWithWhereUniqueWithoutUploaderInput = {
    where: FileStorageWhereUniqueInput
    data: XOR<FileStorageUpdateWithoutUploaderInput, FileStorageUncheckedUpdateWithoutUploaderInput>
  }

  export type FileStorageUpdateManyWithWhereWithoutUploaderInput = {
    where: FileStorageScalarWhereInput
    data: XOR<FileStorageUpdateManyMutationInput, FileStorageUncheckedUpdateManyWithoutUploaderInput>
  }

  export type FileStorageScalarWhereInput = {
    AND?: FileStorageScalarWhereInput | FileStorageScalarWhereInput[]
    OR?: FileStorageScalarWhereInput[]
    NOT?: FileStorageScalarWhereInput | FileStorageScalarWhereInput[]
    id?: StringFilter<"FileStorage"> | string
    fileName?: StringFilter<"FileStorage"> | string
    fileUrl?: StringFilter<"FileStorage"> | string
    mimeType?: StringFilter<"FileStorage"> | string
    fileSize?: IntFilter<"FileStorage"> | number
    bucket?: StringFilter<"FileStorage"> | string
    path?: StringFilter<"FileStorage"> | string
    uploadedBy?: StringFilter<"FileStorage"> | string
    createdAt?: DateTimeFilter<"FileStorage"> | Date | string
    updatedAt?: DateTimeFilter<"FileStorage"> | Date | string
    deleted?: BoolFilter<"FileStorage"> | boolean
    deletedAt?: DateTimeNullableFilter<"FileStorage"> | Date | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutAdminInput, AuditLogUncheckedUpdateWithoutAdminInput>
    create: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutAdminInput, AuditLogUncheckedUpdateWithoutAdminInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutAdminInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    adminId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    module?: StringFilter<"AuditLog"> | string
    targetType?: StringFilter<"AuditLog"> | string
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type SystemChangeLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SystemChangeLogWhereUniqueInput
    update: XOR<SystemChangeLogUpdateWithoutUserInput, SystemChangeLogUncheckedUpdateWithoutUserInput>
    create: XOR<SystemChangeLogCreateWithoutUserInput, SystemChangeLogUncheckedCreateWithoutUserInput>
  }

  export type SystemChangeLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SystemChangeLogWhereUniqueInput
    data: XOR<SystemChangeLogUpdateWithoutUserInput, SystemChangeLogUncheckedUpdateWithoutUserInput>
  }

  export type SystemChangeLogUpdateManyWithWhereWithoutUserInput = {
    where: SystemChangeLogScalarWhereInput
    data: XOR<SystemChangeLogUpdateManyMutationInput, SystemChangeLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SystemChangeLogScalarWhereInput = {
    AND?: SystemChangeLogScalarWhereInput | SystemChangeLogScalarWhereInput[]
    OR?: SystemChangeLogScalarWhereInput[]
    NOT?: SystemChangeLogScalarWhereInput | SystemChangeLogScalarWhereInput[]
    id?: StringFilter<"SystemChangeLog"> | string
    changedBy?: StringFilter<"SystemChangeLog"> | string
    component?: StringFilter<"SystemChangeLog"> | string
    changeType?: StringFilter<"SystemChangeLog"> | string
    description?: StringFilter<"SystemChangeLog"> | string
    details?: StringNullableFilter<"SystemChangeLog"> | string | null
    createdAt?: DateTimeFilter<"SystemChangeLog"> | Date | string
  }

  export type UserCreateWithoutEmployeeProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeProfileInput, UserUncheckedCreateWithoutEmployeeProfileInput>
  }

  export type UserUpsertWithoutEmployeeProfileInput = {
    update: XOR<UserUpdateWithoutEmployeeProfileInput, UserUncheckedUpdateWithoutEmployeeProfileInput>
    create: XOR<UserCreateWithoutEmployeeProfileInput, UserUncheckedCreateWithoutEmployeeProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeProfileInput, UserUncheckedUpdateWithoutEmployeeProfileInput>
  }

  export type UserUpdateWithoutEmployeeProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAdminProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminProfileInput, UserUncheckedCreateWithoutAdminProfileInput>
  }

  export type UserUpsertWithoutAdminProfileInput = {
    update: XOR<UserUpdateWithoutAdminProfileInput, UserUncheckedUpdateWithoutAdminProfileInput>
    create: XOR<UserCreateWithoutAdminProfileInput, UserUncheckedCreateWithoutAdminProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminProfileInput, UserUncheckedUpdateWithoutAdminProfileInput>
  }

  export type UserUpdateWithoutAdminProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSecurityLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSecurityLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSecurityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSecurityLogsInput, UserUncheckedCreateWithoutSecurityLogsInput>
  }

  export type UserUpsertWithoutSecurityLogsInput = {
    update: XOR<UserUpdateWithoutSecurityLogsInput, UserUncheckedUpdateWithoutSecurityLogsInput>
    create: XOR<UserCreateWithoutSecurityLogsInput, UserUncheckedCreateWithoutSecurityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSecurityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSecurityLogsInput, UserUncheckedUpdateWithoutSecurityLogsInput>
  }

  export type UserUpdateWithoutSecurityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSecurityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationPrefInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationPrefInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationPrefInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationPrefInput, UserUncheckedCreateWithoutNotificationPrefInput>
  }

  export type UserUpsertWithoutNotificationPrefInput = {
    update: XOR<UserUpdateWithoutNotificationPrefInput, UserUncheckedUpdateWithoutNotificationPrefInput>
    create: XOR<UserCreateWithoutNotificationPrefInput, UserUncheckedCreateWithoutNotificationPrefInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationPrefInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationPrefInput, UserUncheckedUpdateWithoutNotificationPrefInput>
  }

  export type UserUpdateWithoutNotificationPrefInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationPrefInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAppearancePrefInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppearancePrefInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppearancePrefInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppearancePrefInput, UserUncheckedCreateWithoutAppearancePrefInput>
  }

  export type UserUpsertWithoutAppearancePrefInput = {
    update: XOR<UserUpdateWithoutAppearancePrefInput, UserUncheckedUpdateWithoutAppearancePrefInput>
    create: XOR<UserCreateWithoutAppearancePrefInput, UserUncheckedCreateWithoutAppearancePrefInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppearancePrefInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppearancePrefInput, UserUncheckedUpdateWithoutAppearancePrefInput>
  }

  export type UserUpdateWithoutAppearancePrefInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppearancePrefInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WebhookConfigCreateWithoutIntegrationInput = {
    url: string
    secret: string
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
  }

  export type WebhookConfigUncheckedCreateWithoutIntegrationInput = {
    url: string
    secret: string
    eventCreated?: boolean
    eventApproved?: boolean
    eventUpdated?: boolean
    eventRejected?: boolean
  }

  export type WebhookConfigCreateOrConnectWithoutIntegrationInput = {
    where: WebhookConfigWhereUniqueInput
    create: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
  }

  export type WebhookConfigUpsertWithoutIntegrationInput = {
    update: XOR<WebhookConfigUpdateWithoutIntegrationInput, WebhookConfigUncheckedUpdateWithoutIntegrationInput>
    create: XOR<WebhookConfigCreateWithoutIntegrationInput, WebhookConfigUncheckedCreateWithoutIntegrationInput>
    where?: WebhookConfigWhereInput
  }

  export type WebhookConfigUpdateToOneWithWhereWithoutIntegrationInput = {
    where?: WebhookConfigWhereInput
    data: XOR<WebhookConfigUpdateWithoutIntegrationInput, WebhookConfigUncheckedUpdateWithoutIntegrationInput>
  }

  export type WebhookConfigUpdateWithoutIntegrationInput = {
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebhookConfigUncheckedUpdateWithoutIntegrationInput = {
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    eventCreated?: BoolFieldUpdateOperationsInput | boolean
    eventApproved?: BoolFieldUpdateOperationsInput | boolean
    eventUpdated?: BoolFieldUpdateOperationsInput | boolean
    eventRejected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExternalIntegrationCreateWithoutWebhookInput = {
    id?: string
    type: string
    displayName: string
    active?: boolean
    configJson: string
    lastSyncedAt?: Date | string | null
    status: string
  }

  export type ExternalIntegrationUncheckedCreateWithoutWebhookInput = {
    id?: string
    type: string
    displayName: string
    active?: boolean
    configJson: string
    lastSyncedAt?: Date | string | null
    status: string
  }

  export type ExternalIntegrationCreateOrConnectWithoutWebhookInput = {
    where: ExternalIntegrationWhereUniqueInput
    create: XOR<ExternalIntegrationCreateWithoutWebhookInput, ExternalIntegrationUncheckedCreateWithoutWebhookInput>
  }

  export type ExternalIntegrationUpsertWithoutWebhookInput = {
    update: XOR<ExternalIntegrationUpdateWithoutWebhookInput, ExternalIntegrationUncheckedUpdateWithoutWebhookInput>
    create: XOR<ExternalIntegrationCreateWithoutWebhookInput, ExternalIntegrationUncheckedCreateWithoutWebhookInput>
    where?: ExternalIntegrationWhereInput
  }

  export type ExternalIntegrationUpdateToOneWithWhereWithoutWebhookInput = {
    where?: ExternalIntegrationWhereInput
    data: XOR<ExternalIntegrationUpdateWithoutWebhookInput, ExternalIntegrationUncheckedUpdateWithoutWebhookInput>
  }

  export type ExternalIntegrationUpdateWithoutWebhookInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ExternalIntegrationUncheckedUpdateWithoutWebhookInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    configJson?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApprovalCreateWithoutNotificationInput = {
    id?: string
    response: string
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutNotificationInput = {
    id?: string
    userId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutNotificationInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput>
  }

  export type ApprovalCreateManyNotificationInputEnvelope = {
    data: ApprovalCreateManyNotificationInput | ApprovalCreateManyNotificationInput[]
  }

  export type RecipientCreateWithoutNotificationInput = {
    id?: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
  }

  export type RecipientUncheckedCreateWithoutNotificationInput = {
    id?: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
  }

  export type RecipientCreateOrConnectWithoutNotificationInput = {
    where: RecipientWhereUniqueInput
    create: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput>
  }

  export type RecipientCreateManyNotificationInputEnvelope = {
    data: RecipientCreateManyNotificationInput | RecipientCreateManyNotificationInput[]
  }

  export type NotificationAttachmentCreateWithoutNotificationInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
  }

  export type NotificationAttachmentUncheckedCreateWithoutNotificationInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
  }

  export type NotificationAttachmentCreateOrConnectWithoutNotificationInput = {
    where: NotificationAttachmentWhereUniqueInput
    create: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationAttachmentCreateManyNotificationInputEnvelope = {
    data: NotificationAttachmentCreateManyNotificationInput | NotificationAttachmentCreateManyNotificationInput[]
  }

  export type ApprovalUpsertWithWhereUniqueWithoutNotificationInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutNotificationInput, ApprovalUncheckedUpdateWithoutNotificationInput>
    create: XOR<ApprovalCreateWithoutNotificationInput, ApprovalUncheckedCreateWithoutNotificationInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutNotificationInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutNotificationInput, ApprovalUncheckedUpdateWithoutNotificationInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutNotificationInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutNotificationInput>
  }

  export type RecipientUpsertWithWhereUniqueWithoutNotificationInput = {
    where: RecipientWhereUniqueInput
    update: XOR<RecipientUpdateWithoutNotificationInput, RecipientUncheckedUpdateWithoutNotificationInput>
    create: XOR<RecipientCreateWithoutNotificationInput, RecipientUncheckedCreateWithoutNotificationInput>
  }

  export type RecipientUpdateWithWhereUniqueWithoutNotificationInput = {
    where: RecipientWhereUniqueInput
    data: XOR<RecipientUpdateWithoutNotificationInput, RecipientUncheckedUpdateWithoutNotificationInput>
  }

  export type RecipientUpdateManyWithWhereWithoutNotificationInput = {
    where: RecipientScalarWhereInput
    data: XOR<RecipientUpdateManyMutationInput, RecipientUncheckedUpdateManyWithoutNotificationInput>
  }

  export type RecipientScalarWhereInput = {
    AND?: RecipientScalarWhereInput | RecipientScalarWhereInput[]
    OR?: RecipientScalarWhereInput[]
    NOT?: RecipientScalarWhereInput | RecipientScalarWhereInput[]
    id?: StringFilter<"Recipient"> | string
    notificationId?: StringFilter<"Recipient"> | string
    type?: StringFilter<"Recipient"> | string
    userId?: StringNullableFilter<"Recipient"> | string | null
    groupId?: StringNullableFilter<"Recipient"> | string | null
    companyCode?: StringNullableFilter<"Recipient"> | string | null
  }

  export type NotificationAttachmentUpsertWithWhereUniqueWithoutNotificationInput = {
    where: NotificationAttachmentWhereUniqueInput
    update: XOR<NotificationAttachmentUpdateWithoutNotificationInput, NotificationAttachmentUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationAttachmentCreateWithoutNotificationInput, NotificationAttachmentUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationAttachmentUpdateWithWhereUniqueWithoutNotificationInput = {
    where: NotificationAttachmentWhereUniqueInput
    data: XOR<NotificationAttachmentUpdateWithoutNotificationInput, NotificationAttachmentUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationAttachmentUpdateManyWithWhereWithoutNotificationInput = {
    where: NotificationAttachmentScalarWhereInput
    data: XOR<NotificationAttachmentUpdateManyMutationInput, NotificationAttachmentUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationAttachmentScalarWhereInput = {
    AND?: NotificationAttachmentScalarWhereInput | NotificationAttachmentScalarWhereInput[]
    OR?: NotificationAttachmentScalarWhereInput[]
    NOT?: NotificationAttachmentScalarWhereInput | NotificationAttachmentScalarWhereInput[]
    id?: StringFilter<"NotificationAttachment"> | string
    notificationId?: StringFilter<"NotificationAttachment"> | string
    fileName?: StringFilter<"NotificationAttachment"> | string
    fileUrl?: StringFilter<"NotificationAttachment"> | string
    mimeType?: StringFilter<"NotificationAttachment"> | string
  }

  export type NotificationCreateWithoutApprovalsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    recipients?: RecipientCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutApprovalsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    recipients?: RecipientUncheckedCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutApprovalsInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutApprovalsInput, NotificationUncheckedCreateWithoutApprovalsInput>
  }

  export type UserCreateWithoutApprovalsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApprovalsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApprovalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
  }

  export type NotificationUpsertWithoutApprovalsInput = {
    update: XOR<NotificationUpdateWithoutApprovalsInput, NotificationUncheckedUpdateWithoutApprovalsInput>
    create: XOR<NotificationCreateWithoutApprovalsInput, NotificationUncheckedCreateWithoutApprovalsInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutApprovalsInput, NotificationUncheckedUpdateWithoutApprovalsInput>
  }

  export type NotificationUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipients?: RecipientUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipients?: RecipientUncheckedUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type UserUpsertWithoutApprovalsInput = {
    update: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationCreateWithoutRecipientsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutRecipientsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutNotificationInput
    attachments?: NotificationAttachmentUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutRecipientsInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutRecipientsInput, NotificationUncheckedCreateWithoutRecipientsInput>
  }

  export type NotificationUpsertWithoutRecipientsInput = {
    update: XOR<NotificationUpdateWithoutRecipientsInput, NotificationUncheckedUpdateWithoutRecipientsInput>
    create: XOR<NotificationCreateWithoutRecipientsInput, NotificationUncheckedCreateWithoutRecipientsInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutRecipientsInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutRecipientsInput, NotificationUncheckedUpdateWithoutRecipientsInput>
  }

  export type NotificationUpdateWithoutRecipientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutRecipientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutNotificationNestedInput
    attachments?: NotificationAttachmentUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutNotificationInput
    recipients?: RecipientCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    message: string
    scheduledAt?: Date | string | null
    status?: string
    type: string
    category?: string | null
    link?: string | null
    urgencyDays?: number
    repeatIntervalDays?: number
    dueDate?: Date | string | null
    taskStatus?: string | null
    taskCompletedAt?: Date | string | null
    taskCompletedBy?: string | null
    postponeCount?: number
    postponeReason?: string | null
    lastPostponedAt?: Date | string | null
    originalDueDate?: Date | string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    scheduleMonthDay?: number | null
    scheduleWeekDay?: number | null
    scheduleTime?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutNotificationInput
    recipients?: RecipientUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutAttachmentsInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutAttachmentsInput, NotificationUncheckedCreateWithoutAttachmentsInput>
  }

  export type NotificationUpsertWithoutAttachmentsInput = {
    update: XOR<NotificationUpdateWithoutAttachmentsInput, NotificationUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<NotificationCreateWithoutAttachmentsInput, NotificationUncheckedCreateWithoutAttachmentsInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutAttachmentsInput, NotificationUncheckedUpdateWithoutAttachmentsInput>
  }

  export type NotificationUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutNotificationNestedInput
    recipients?: RecipientUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyDays?: IntFieldUpdateOperationsInput | number
    repeatIntervalDays?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    taskCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskCompletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postponeCount?: IntFieldUpdateOperationsInput | number
    postponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastPostponedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleMonthDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeekDay?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutNotificationNestedInput
    recipients?: RecipientUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type TeamMemberCreateWithoutTeamInput = {
    id?: string
    role?: string
    user: UserCreateNestedOneWithoutTeamMembershipsInput
  }

  export type TeamMemberUncheckedCreateWithoutTeamInput = {
    id?: string
    employeeId: string
    role?: string
  }

  export type TeamMemberCreateOrConnectWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberCreateManyTeamInputEnvelope = {
    data: TeamMemberCreateManyTeamInput | TeamMemberCreateManyTeamInput[]
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamCreateWithoutMembersInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdAt?: Date | string
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    leaderId?: string | null
    createdAt?: Date | string
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutTeamMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembershipsInput, UserUncheckedCreateWithoutTeamMembershipsInput>
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTeamMembershipsInput = {
    update: XOR<UserUpdateWithoutTeamMembershipsInput, UserUncheckedUpdateWithoutTeamMembershipsInput>
    create: XOR<UserCreateWithoutTeamMembershipsInput, UserUncheckedCreateWithoutTeamMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMembershipsInput, UserUncheckedUpdateWithoutTeamMembershipsInput>
  }

  export type UserUpdateWithoutTeamMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnalyticsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnalyticsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnalyticsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnalyticsInput, UserUncheckedCreateWithoutAnalyticsInput>
  }

  export type UserUpsertWithoutAnalyticsInput = {
    update: XOR<UserUpdateWithoutAnalyticsInput, UserUncheckedUpdateWithoutAnalyticsInput>
    create: XOR<UserCreateWithoutAnalyticsInput, UserUncheckedCreateWithoutAnalyticsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnalyticsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnalyticsInput, UserUncheckedUpdateWithoutAnalyticsInput>
  }

  export type UserUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUploadedFilesInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
  }

  export type UserUpsertWithoutUploadedFilesInput = {
    update: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    systemChanges?: SystemChangeLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    systemChanges?: SystemChangeLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    systemChanges?: SystemChangeLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    systemChanges?: SystemChangeLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSystemChangesInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutSystemChangesInput = {
    id?: string
    email: string
    passwordHash: string
    role: string
    status?: string
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    loginFailCount?: number
    twoFaSecret?: string | null
    deviceFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    employeeProfile?: EmployeeProfileUncheckedCreateNestedOneWithoutUserInput
    adminProfile?: AdminProfileUncheckedCreateNestedOneWithoutUserInput
    notificationPref?: UserNotificationPrefUncheckedCreateNestedOneWithoutUserInput
    appearancePref?: UserAppearancePrefUncheckedCreateNestedOneWithoutUserInput
    securityLogs?: SecurityLogUncheckedCreateNestedManyWithoutUserInput
    teamMemberships?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    analytics?: EmployeeAnalyticsUncheckedCreateNestedManyWithoutEmployeeInput
    uploadedFiles?: FileStorageUncheckedCreateNestedManyWithoutUploaderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutSystemChangesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSystemChangesInput, UserUncheckedCreateWithoutSystemChangesInput>
  }

  export type UserUpsertWithoutSystemChangesInput = {
    update: XOR<UserUpdateWithoutSystemChangesInput, UserUncheckedUpdateWithoutSystemChangesInput>
    create: XOR<UserCreateWithoutSystemChangesInput, UserUncheckedCreateWithoutSystemChangesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSystemChangesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSystemChangesInput, UserUncheckedUpdateWithoutSystemChangesInput>
  }

  export type UserUpdateWithoutSystemChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutSystemChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    loginFailCount?: IntFieldUpdateOperationsInput | number
    twoFaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    employeeProfile?: EmployeeProfileUncheckedUpdateOneWithoutUserNestedInput
    adminProfile?: AdminProfileUncheckedUpdateOneWithoutUserNestedInput
    notificationPref?: UserNotificationPrefUncheckedUpdateOneWithoutUserNestedInput
    appearancePref?: UserAppearancePrefUncheckedUpdateOneWithoutUserNestedInput
    securityLogs?: SecurityLogUncheckedUpdateManyWithoutUserNestedInput
    teamMemberships?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    analytics?: EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeNestedInput
    uploadedFiles?: FileStorageUncheckedUpdateManyWithoutUploaderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    fingerprint?: string | null
    userAgent?: string | null
    status?: string
    createdAt?: Date | string
    expiresAt: Date | string
    refreshToken?: string | null
    refreshExpires?: Date | string | null
  }

  export type ApprovalCreateManyUserInput = {
    id?: string
    notificationId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type SecurityLogCreateManyUserInput = {
    id?: string
    action: string
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type TeamMemberCreateManyUserInput = {
    id?: string
    teamId: string
    role?: string
  }

  export type EmployeeAnalyticsCreateManyEmployeeInput = {
    id?: string
    period: string
    totalTasks?: number
    completedTasks?: number
    completedOnTime?: number
    completedLate?: number
    postponedTasks?: number
    avgPostponeDays?: number
    avgCompletionTime?: number
    urgentTasksCount?: number
    urgentTasksOnTime?: number
    commonPostponeReason?: string | null
    workloadScore?: number
    timeManagementScore?: number
    aiAnalysis?: string | null
    recommendations?: string | null
    alertLevel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileStorageCreateManyUploaderInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
    fileSize: number
    bucket: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type AuditLogCreateManyAdminInput = {
    id?: string
    action: string
    module: string
    targetType: string
    targetId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress: string
    userAgent: string
    createdAt?: Date | string
  }

  export type SystemChangeLogCreateManyUserInput = {
    id?: string
    component: string
    changeType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notification?: NotificationUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeAnalyticsUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeAnalyticsUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeAnalyticsUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    completedTasks?: IntFieldUpdateOperationsInput | number
    completedOnTime?: IntFieldUpdateOperationsInput | number
    completedLate?: IntFieldUpdateOperationsInput | number
    postponedTasks?: IntFieldUpdateOperationsInput | number
    avgPostponeDays?: FloatFieldUpdateOperationsInput | number
    avgCompletionTime?: FloatFieldUpdateOperationsInput | number
    urgentTasksCount?: IntFieldUpdateOperationsInput | number
    urgentTasksOnTime?: IntFieldUpdateOperationsInput | number
    commonPostponeReason?: NullableStringFieldUpdateOperationsInput | string | null
    workloadScore?: FloatFieldUpdateOperationsInput | number
    timeManagementScore?: FloatFieldUpdateOperationsInput | number
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    alertLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileStorageUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileStorageUncheckedUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileStorageUncheckedUpdateManyWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    module?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemChangeLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    component?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateManyNotificationInput = {
    id?: string
    userId: string
    response: string
    comment?: string | null
    createdAt?: Date | string
  }

  export type RecipientCreateManyNotificationInput = {
    id?: string
    type: string
    userId?: string | null
    groupId?: string | null
    companyCode?: string | null
  }

  export type NotificationAttachmentCreateManyNotificationInput = {
    id?: string
    fileName: string
    fileUrl: string
    mimeType: string
  }

  export type ApprovalUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipientUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipientUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipientUncheckedUpdateManyWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationAttachmentUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationAttachmentUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationAttachmentUncheckedUpdateManyWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMemberCreateManyTeamInput = {
    id?: string
    employeeId: string
    role?: string
  }

  export type TeamMemberUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTeamMembershipsNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}