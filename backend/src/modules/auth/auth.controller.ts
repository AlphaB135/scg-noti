/**
 * @fileoverview ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö SCG Notification
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
 * 
 * ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 * - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 * - ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô JWT ‡πÅ‡∏¢‡∏Å Access Token ‡πÅ‡∏•‡∏∞ Refresh Token
 * - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ HTTP-only cookies
 */

import { Request, Response, NextFunction } from 'express'
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import crypto from 'crypto'
import { JWT_SECRET } from '../../config/env'
import { prisma } from '../../config/prismaClient'

/**
 * ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
 * ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á access token ‡πÅ‡∏•‡∏∞ refresh token
 * 
 * @param {number} maxAge - ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÉ‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
 * @returns {Object} ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
 */
const cookieOptions = (maxAge: number) => ({
  httpOnly: true,
  sameSite: 'strict' as const,
  secure: process.env.NODE_ENV === 'production',
  maxAge,
  path: '/',
})

/**
 * ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
 * 
 * @route POST /auth/login
 * @param {Request} req - Express request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô body
 * @param {Response} res - Express response
 * @param {NextFunction} next - Express next middleware
 * 
 * @bodyParam {string} [employeeCode] - ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * @bodyParam {string} [email] - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 * @bodyParam {string} password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
 * 
 * @returns {Promise<Response>} ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * @throws {400} ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
 * @throws {401} ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 * @throws {500} ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
 */
export async function login(req: Request, res: Response, next: NextFunction): Promise<Response | void> {
  try {
    console.log('üì• [LOGIN] req.body:', req.body)

    const { employeeCode, email, password } =
      req.body as { employeeCode?: string; email?: string; password?: string }
    const code = employeeCode ?? email

    if (!code || !password) {
      console.warn('‚ö†Ô∏è Missing credentials:', { code, password })
      res.status(400).json({ message: 'Missing credentials' })
      return
    }

    const user = await prisma.user.findFirst({
      where: { employeeProfile: { employeeCode: code } },
      include: { employeeProfile: true },
    })
    if (!user) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', code)
      res.status(401).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
      return
    }

    const valid = await bcrypt.compare(password, user.passwordHash)
    if (!valid) {
      console.warn('‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', code)
      res.status(401).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
      return
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏ô DB
    const fingerprint = `${req.ip}|${req.headers['user-agent']}`
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000) // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    const session = await prisma.session.create({
      data: { userId: user.id, fingerprint, expiresAt },
    })    // ‡πÄ‡∏ã‡πá‡∏ô Access JWT (15m)
    const token = jwt.sign(
      { 
        sessionId: session.id,
        userId: user.id,
        role: user.role
      }, 
      JWT_SECRET!, 
      { expiresIn: '15m' }
    )

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Refresh Token (7 ‡∏ß‡∏±‡∏ô)
    const rawRefresh = crypto.randomBytes(64).toString('hex')
    const hashedRefresh = crypto.createHash('sha256').update(rawRefresh).digest('hex')
    const refreshExpires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    await prisma.session.update({
      where: { id: session.id },
      data: { refreshToken: hashedRefresh, refreshExpires },
    })

    console.log(
      '‚úÖ Authenticated:',
      code,
      '| Role:',
      user.role,
      '| SessionID:',
      session.id
    )

    // ‡πÄ‡∏ã‡πá‡∏ï Cookies ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß
    res
      .cookie('token', token, cookieOptions(15 * 60 * 1000))
      .cookie('refreshToken', rawRefresh, cookieOptions(7 * 24 * 60 * 60 * 1000))
      .json({ ok: true, role: user.role })
  } catch (err) {
    console.error('‚ùå [LOGIN ERROR]', err)
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' })
  }
}

/**
 * ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 * ‡∏•‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
 * 
 * @route POST /auth/logout
 * @param {Request} req - Express request ‡∏û‡∏£‡πâ‡∏≠‡∏° token ‡πÉ‡∏ô‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
 * @param {Response} res - Express response
 * @returns {Promise<Response>} ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * 
 * @security JWT
 */
export async function logout(req: Request, res: Response): Promise<Response | void> {
  const token = req.cookies?.token as string | undefined
  if (token) {
    try {
      const { sessionId } = jwt.verify(token, JWT_SECRET!) as any
      await prisma.session.delete({ where: { id: sessionId } })
    } catch (er) {
      console.error('‚ùå [LOGOUT ERROR]', er)
    }
  }

  console.log('üîì Logged out session')
  res
    .clearCookie('token', { ...cookieOptions(0) })
    .clearCookie('refreshToken', { ...cookieOptions(0) })
    .json({ ok: true })
}

/**
 * ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * 
 * @route GET /auth/me
 * @param {Request} req - Express request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å JWT
 * @param {Response} res - Express response
 * @returns {Promise<Response>} ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * 
 * @security JWT
 */
export async function me(req: Request, res: Response): Promise<Response | void> {
  console.log('üì• [ME] req.user:', req.user)
  const userId = (req.user as any)?.id
  if (!userId) {
    console.warn('‚ö†Ô∏è Unauthorized access to /me')
    res.status(401).json({ message: 'Unauthorized' })
    return
  }

  const user = await prisma.user.findUnique({
    where: { id: userId },
    include: { employeeProfile: true },
  })
  if (!user) {
    console.warn('‚ö†Ô∏è User not found for id:', userId)
    res.status(404).json({ message: 'User not found' })
    return
  }

  console.log('‚úÖ [ME] returning user:', user.employeeProfile!.employeeCode)
  res.json({ user })
}

/**
 * ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ refresh token
 * 
 * @route POST /auth/refresh
 * @param {Request} req - Express request ‡∏û‡∏£‡πâ‡∏≠‡∏° refresh token ‡πÉ‡∏ô‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
 * @param {Response} res - Express response
 * @returns {Promise<Response>} ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * 
 * @security RefreshToken
 */
export async function refresh(req: Request, res: Response): Promise<Response | void> {
  try {
    const raw = req.cookies?.refreshToken as string | undefined
    if (!raw) {
      return res.status(401).json({ message: 'No refresh token' })
    }

    const hashed = crypto.createHash('sha256').update(raw).digest('hex')
    const session = await prisma.session.findFirst({
      where: { refreshToken: hashed },
      include: { user: true },
    })

    if (!session || !session.refreshExpires || session.refreshExpires < new Date()) {
      res.clearCookie('token', { ...cookieOptions(0) })
      res.clearCookie('refreshToken', { ...cookieOptions(0) })
      return res.status(401).json({ message: 'Invalid or expired refresh token' })
    }

    // issue new tokens
    const newAccess = jwt.sign({ sessionId: session.id }, JWT_SECRET!, {
      expiresIn: '15m',
    })
    const newRaw = crypto.randomBytes(64).toString('hex')
    const newHashed = crypto.createHash('sha256').update(newRaw).digest('hex')
    const newExpires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    await prisma.session.update({
      where: { id: session.id },
      data: { refreshToken: newHashed, refreshExpires: newExpires },
    })

    res
      .cookie('token', newAccess, cookieOptions(15 * 60 * 1000))
      .cookie('refreshToken', newRaw, cookieOptions(7 * 24 * 60 * 60 * 1000))
      .json({ ok: true })
  } catch (err) {
    console.error('‚ùå [REFRESH ERROR]', err)
    res.status(500).json({ message: 'Server error' })
  }
}
