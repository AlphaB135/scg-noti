
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  loginFailCount: 'loginFailCount',
  twoFaSecret: 'twoFaSecret',
  deviceFingerprint: 'deviceFingerprint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeProfileScalarFieldEnum = {
  userId: 'userId',
  companyCode: 'companyCode',
  employeeCode: 'employeeCode',
  firstName: 'firstName',
  lastName: 'lastName',
  nickname: 'nickname',
  position: 'position',
  profileImageUrl: 'profileImageUrl',
  lineToken: 'lineToken'
};

exports.Prisma.AdminProfileScalarFieldEnum = {
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  nickname: 'nickname',
  position: 'position',
  profileImageUrl: 'profileImageUrl'
};

exports.Prisma.SecurityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.UserNotificationPrefScalarFieldEnum = {
  userId: 'userId',
  emailEnabled: 'emailEnabled',
  pushEnabled: 'pushEnabled',
  smsEnabled: 'smsEnabled',
  digestFreq: 'digestFreq',
  sound: 'sound',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd'
};

exports.Prisma.UserAppearancePrefScalarFieldEnum = {
  userId: 'userId',
  theme: 'theme',
  accentColor: 'accentColor',
  density: 'density'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  systemName: 'systemName',
  defaultLanguage: 'defaultLanguage',
  dateFormat: 'dateFormat',
  timeFormat: 'timeFormat',
  timezone: 'timezone',
  autoLogoutMinutes: 'autoLogoutMinutes',
  enableAuditLogging: 'enableAuditLogging',
  enableAnalytics: 'enableAnalytics',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationSMTPScalarFieldEnum = {
  id: 'id',
  server: 'server',
  port: 'port',
  username: 'username',
  passwordEnc: 'passwordEnc',
  useTls: 'useTls',
  lastTestedAt: 'lastTestedAt'
};

exports.Prisma.ExternalIntegrationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  displayName: 'displayName',
  active: 'active',
  configJson: 'configJson',
  lastSyncedAt: 'lastSyncedAt',
  status: 'status'
};

exports.Prisma.WebhookConfigScalarFieldEnum = {
  integrationId: 'integrationId',
  url: 'url',
  secret: 'secret',
  eventCreated: 'eventCreated',
  eventApproved: 'eventApproved',
  eventUpdated: 'eventUpdated',
  eventRejected: 'eventRejected'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fingerprint: 'fingerprint',
  userAgent: 'userAgent',
  status: 'status',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  refreshToken: 'refreshToken',
  refreshExpires: 'refreshExpires'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  scheduledAt: 'scheduledAt',
  status: 'status',
  type: 'type',
  category: 'category',
  link: 'link',
  urgencyDays: 'urgencyDays',
  repeatIntervalDays: 'repeatIntervalDays',
  dueDate: 'dueDate',
  taskStatus: 'taskStatus',
  taskCompletedAt: 'taskCompletedAt',
  taskCompletedBy: 'taskCompletedBy',
  postponeCount: 'postponeCount',
  postponeReason: 'postponeReason',
  lastPostponedAt: 'lastPostponedAt',
  originalDueDate: 'originalDueDate',
  aiGenerated: 'aiGenerated',
  aiPrompt: 'aiPrompt',
  scheduleMonthDay: 'scheduleMonthDay',
  scheduleWeekDay: 'scheduleWeekDay',
  scheduleTime: 'scheduleTime',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  userId: 'userId',
  response: 'response',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.RecipientScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  type: 'type',
  userId: 'userId',
  groupId: 'groupId',
  companyCode: 'companyCode'
};

exports.Prisma.NotificationAttachmentScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  mimeType: 'mimeType'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  leaderId: 'leaderId',
  createdAt: 'createdAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  employeeId: 'employeeId',
  role: 'role'
};

exports.Prisma.EmployeeAnalyticsScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  period: 'period',
  totalTasks: 'totalTasks',
  completedTasks: 'completedTasks',
  completedOnTime: 'completedOnTime',
  completedLate: 'completedLate',
  postponedTasks: 'postponedTasks',
  avgPostponeDays: 'avgPostponeDays',
  avgCompletionTime: 'avgCompletionTime',
  urgentTasksCount: 'urgentTasksCount',
  urgentTasksOnTime: 'urgentTasksOnTime',
  commonPostponeReason: 'commonPostponeReason',
  workloadScore: 'workloadScore',
  timeManagementScore: 'timeManagementScore',
  aiAnalysis: 'aiAnalysis',
  recommendations: 'recommendations',
  alertLevel: 'alertLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileStorageScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  bucket: 'bucket',
  path: 'path',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  module: 'module',
  targetType: 'targetType',
  targetId: 'targetId',
  oldValue: 'oldValue',
  newValue: 'newValue',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SystemChangeLogScalarFieldEnum = {
  id: 'id',
  changedBy: 'changedBy',
  component: 'component',
  changeType: 'changeType',
  description: 'description',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  EmployeeProfile: 'EmployeeProfile',
  AdminProfile: 'AdminProfile',
  SecurityLog: 'SecurityLog',
  UserNotificationPref: 'UserNotificationPref',
  UserAppearancePref: 'UserAppearancePref',
  SystemSettings: 'SystemSettings',
  IntegrationSMTP: 'IntegrationSMTP',
  ExternalIntegration: 'ExternalIntegration',
  WebhookConfig: 'WebhookConfig',
  Session: 'Session',
  Notification: 'Notification',
  Approval: 'Approval',
  Recipient: 'Recipient',
  NotificationAttachment: 'NotificationAttachment',
  Team: 'Team',
  TeamMember: 'TeamMember',
  EmployeeAnalytics: 'EmployeeAnalytics',
  FileStorage: 'FileStorage',
  AuditLog: 'AuditLog',
  SystemChangeLog: 'SystemChangeLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
