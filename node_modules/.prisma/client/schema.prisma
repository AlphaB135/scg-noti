generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(uuid()) @db.UniqueIdentifier
  email             String                @unique @db.NVarChar(160)
  passwordHash      String                @db.NVarChar(255)
  role              String                @db.VarChar(20)
  status            String                @default("ACTIVE") @db.VarChar(10)
  lastLoginAt       DateTime?
  lastLoginIp       String?               @db.VarChar(45)
  loginFailCount    Int                   @default(0)
  twoFaSecret       String?               @db.NVarChar(64)
  deviceFingerprint String?               @db.NVarChar(128)
  createdAt         DateTime              @default(dbgenerated("sysutcdatetime()"))
  updatedAt         DateTime              @default(dbgenerated("sysutcdatetime()"))
  adminProfile      AdminProfile?
  approvals         Approval[]
  auditLogs         AuditLog[]
  analytics         EmployeeAnalytics[]
  employeeProfile   EmployeeProfile?
  uploadedFiles     FileStorage[]
  securityLogs      SecurityLog[]
  sessions          Session[]
  systemChanges     SystemChangeLog[]
  teamMemberships   TeamMember[]
  appearancePref    UserAppearancePref?
  notificationPref  UserNotificationPref?
}

model EmployeeProfile {
  userId          String  @id @db.UniqueIdentifier
  companyCode     String  @db.VarChar(12)
  employeeCode    String  @unique @db.VarChar(30)
  firstName       String  @db.NVarChar(80)
  lastName        String  @db.NVarChar(80)
  nickname        String? @db.NVarChar(60)
  position        String? @db.NVarChar(120)
  profileImageUrl String? @db.NVarChar(255)
  lineToken       String? @db.NVarChar(255)
  user            User    @relation(fields: [userId], references: [id])
}

model AdminProfile {
  userId          String  @id @db.UniqueIdentifier
  firstName       String  @db.NVarChar(80)
  lastName        String  @db.NVarChar(80)
  nickname        String? @db.NVarChar(60)
  position        String? @db.NVarChar(120)
  profileImageUrl String? @db.NVarChar(255)
  user            User    @relation(fields: [userId], references: [id])
}

model SecurityLog {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  action    String   @db.VarChar(20)
  ipAddress String   @db.VarChar(45)
  userAgent String   @db.NVarChar(255)
  createdAt DateTime @default(dbgenerated("sysutcdatetime()"))
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model UserNotificationPref {
  userId          String    @id @db.UniqueIdentifier
  emailEnabled    Boolean   @default(true)
  pushEnabled     Boolean   @default(true)
  smsEnabled      Boolean   @default(false)
  digestFreq      String    @db.VarChar(10)
  sound           String    @default("Default") @db.NVarChar(50)
  quietHoursStart DateTime? @db.Time
  quietHoursEnd   DateTime? @db.Time
  user            User      @relation(fields: [userId], references: [id])
}

model UserAppearancePref {
  userId      String @id @db.UniqueIdentifier
  theme       String @db.VarChar(10)
  accentColor String @db.NVarChar(20)
  density     String @db.VarChar(12)
  user        User   @relation(fields: [userId], references: [id])
}

model SystemSettings {
  id                 Int      @id
  systemName         String   @db.NVarChar(120)
  defaultLanguage    String   @db.NVarChar(10)
  dateFormat         String   @db.NVarChar(20)
  timeFormat         String   @db.VarChar(8)
  timezone           String   @db.NVarChar(40)
  autoLogoutMinutes  Int
  enableAuditLogging Boolean
  enableAnalytics    Boolean
  updatedAt          DateTime @default(dbgenerated("sysutcdatetime()"))
}

model IntegrationSMTP {
  id           Int       @id
  server       String    @db.NVarChar(120)
  port         Int
  username     String    @db.NVarChar(120)
  passwordEnc  String    @db.NVarChar(255)
  useTls       Boolean   @default(true)
  lastTestedAt DateTime?
}

model ExternalIntegration {
  id           String         @id @default(uuid()) @db.UniqueIdentifier
  type         String         @db.VarChar(12)
  displayName  String         @db.NVarChar(120)
  active       Boolean        @default(false)
  configJson   String         @db.NVarChar(4000)
  lastSyncedAt DateTime?
  status       String         @db.VarChar(8)
  webhook      WebhookConfig?
}

model WebhookConfig {
  integrationId String              @id @db.UniqueIdentifier
  url           String              @db.NVarChar(255)
  secret        String              @db.NVarChar(128)
  eventCreated  Boolean             @default(false)
  eventApproved Boolean             @default(false)
  eventUpdated  Boolean             @default(false)
  eventRejected Boolean             @default(false)
  integration   ExternalIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model Session {
  id             String    @id @default(uuid())
  userId         String    @db.UniqueIdentifier
  fingerprint    String?   @db.NVarChar(255)
  createdAt      DateTime  @default(now())
  expiresAt      DateTime
  refreshExpires DateTime?
  refreshToken   String?   @db.NVarChar(255)
  status         String    @default("ACTIVE") @db.VarChar(20)
  userAgent      String?   @db.NVarChar(500)
  user           User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Notification {
  id                 String                   @id @default(uuid()) @db.UniqueIdentifier
  title              String                   @db.NVarChar(255)
  message            String                   @db.NVarChar(2000)
  scheduledAt        DateTime?
  status             String                   @default("PENDING") @db.VarChar(20)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  category           String?                  @db.NVarChar(80)
  createdBy          String                   @db.UniqueIdentifier
  dueDate            DateTime?
  link               String?                  @db.NVarChar(255)
  repeatIntervalDays Int                      @default(0)
  type               String                   @db.VarChar(20)
  urgencyDays        Int                      @default(0)
  aiGenerated        Boolean                  @default(false)
  aiPrompt           String?                  @db.NVarChar(2000)
  lastPostponedAt    DateTime?
  originalDueDate    DateTime?
  postponeCount      Int                      @default(0)
  postponeReason     String?                  @db.NVarChar(500)
  scheduleMonthDay   Int?
  scheduleTime       DateTime?                @db.Time
  scheduleWeekDay    Int?
  taskCompletedAt    DateTime?
  taskCompletedBy    String?                  @db.UniqueIdentifier
  taskStatus         String?                  @default("PENDING") @db.VarChar(20)
  impact             String?
  linkUsername       String?                  @db.NVarChar(255)
  linkPassword       String?                  @db.NVarChar(255)
  approvals          Approval[]
  attachments        NotificationAttachment[]
  recipients         Recipient[]

  @@index([status])
  @@index([taskStatus])
  @@index([taskCompletedBy])
}

model Approval {
  id             String       @id @default(uuid()) @db.UniqueIdentifier
  notificationId String       @db.UniqueIdentifier
  userId         String       @db.UniqueIdentifier
  response       String       @db.VarChar(20)
  comment        String?
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@index([notificationId])
  @@index([userId])
}

model Recipient {
  id             String       @id @default(uuid())
  notificationId String       @db.UniqueIdentifier
  type           String       @db.VarChar(20)
  userId         String?      @db.UniqueIdentifier
  companyCode    String?      @db.VarChar(12)
  groupId        String?      @db.UniqueIdentifier
  notification   Notification @relation(fields: [notificationId], references: [id])
}

model NotificationAttachment {
  id             String       @id @default(uuid())
  notificationId String       @db.UniqueIdentifier
  fileName       String       @db.NVarChar(255)
  fileUrl        String       @db.NVarChar(255)
  mimeType       String       @db.NVarChar(100)
  Notification   Notification @relation(fields: [notificationId], references: [id])
}

model Team {
  id        String       @id @default(uuid()) @db.UniqueIdentifier
  name      String       @db.NVarChar(255)
  leaderId  String?      @db.UniqueIdentifier
  createdAt DateTime     @default(now())
  members   TeamMember[]

  @@index([leaderId])
}

model TeamMember {
  id         String @id @default(uuid()) @db.UniqueIdentifier
  teamId     String @db.UniqueIdentifier
  employeeId String @db.UniqueIdentifier
  role       String @default("MEMBER") @db.VarChar(20)
  user       User   @relation(fields: [employeeId], references: [id])
  team       Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([employeeId], map: "TeamMember_userId_idx")
}

model EmployeeAnalytics {
  id                   String   @id @default(uuid()) @db.UniqueIdentifier
  employeeId           String   @db.UniqueIdentifier
  period               String   @db.VarChar(7)
  totalTasks           Int      @default(0)
  completedTasks       Int      @default(0)
  completedOnTime      Int      @default(0)
  completedLate        Int      @default(0)
  postponedTasks       Int      @default(0)
  avgPostponeDays      Float    @default(0)
  avgCompletionTime    Float    @default(0)
  urgentTasksCount     Int      @default(0)
  urgentTasksOnTime    Int      @default(0)
  commonPostponeReason String?  @db.NVarChar(500)
  workloadScore        Float    @default(0)
  timeManagementScore  Float    @default(0)
  aiAnalysis           String?  @db.NVarChar(2000)
  recommendations      String?
  alertLevel           String   @default("NORMAL") @db.VarChar(20)
  createdAt            DateTime @default(dbgenerated("sysutcdatetime()"))
  updatedAt            DateTime @updatedAt
  employee             User     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, period])
  @@index([employeeId, period])
  @@index([alertLevel])
}

model FileStorage {
  id         String    @id @default(uuid()) @db.UniqueIdentifier
  fileName   String    @db.NVarChar(255)
  fileUrl    String    @db.NVarChar(255)
  mimeType   String    @db.NVarChar(100)
  fileSize   Int
  bucket     String    @db.VarChar(100)
  path       String    @db.NVarChar(500)
  uploadedBy String    @db.UniqueIdentifier
  createdAt  DateTime  @default(dbgenerated("sysutcdatetime()"))
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  uploader   User      @relation(fields: [uploadedBy], references: [id])

  @@index([bucket, uploadedBy])
  @@index([deleted])
}

model AuditLog {
  id         String   @id @default(uuid()) @db.UniqueIdentifier
  adminId    String   @db.UniqueIdentifier
  action     String   @db.VarChar(50)
  module     String   @db.VarChar(30)
  targetType String   @db.VarChar(30)
  targetId   String?  @db.NVarChar(100)
  oldValue   String?  @db.NVarChar(Max)
  newValue   String?  @db.NVarChar(Max)
  ipAddress  String   @db.VarChar(45)
  userAgent  String   @db.NVarChar(255)
  createdAt  DateTime @default(dbgenerated("sysutcdatetime()"))
  admin      User     @relation(fields: [adminId], references: [id])

  @@index([adminId, createdAt])
  @@index([module, targetType])
  @@index([targetType, targetId])
}

model SystemChangeLog {
  id          String   @id @default(uuid()) @db.UniqueIdentifier
  changedBy   String   @db.UniqueIdentifier
  component   String   @db.VarChar(50)
  changeType  String   @db.VarChar(20)
  description String   @db.NVarChar(500)
  details     String?  @db.NVarChar(Max)
  createdAt   DateTime @default(dbgenerated("sysutcdatetime()"))
  user        User     @relation(fields: [changedBy], references: [id])

  @@index([changedBy, createdAt])
  @@index([component])
}
