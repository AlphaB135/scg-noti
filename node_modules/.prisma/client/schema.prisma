// generator และ datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// USER + PROFILE
model User {
  id                String                @id @default(uuid()) @db.UniqueIdentifier
  email             String                @unique @db.NVarChar(160)
  passwordHash      String                @db.NVarChar(255)
  role              String                @db.VarChar(20) // e.g. "EMPLOYEE", "ADMIN", "SUPERADMIN", "AUDITOR"
  status            String                @default("ACTIVE") @db.VarChar(10) // e.g. "ACTIVE", "LOCKED", "DISABLED"
  lastLoginAt       DateTime?             @db.DateTime2
  lastLoginIp       String?               @db.VarChar(45)
  loginFailCount    Int                   @default(0)
  twoFaSecret       String?               @db.NVarChar(64)
  deviceFingerprint String?               @db.NVarChar(128)
  createdAt         DateTime              @default(dbgenerated("SYSUTCDATETIME()")) @db.DateTime2
  updatedAt         DateTime              @default(dbgenerated("SYSUTCDATETIME()")) @db.DateTime2
  sessions          Session[]
  approvals         Approval[]
  employeeProfile   EmployeeProfile?
  adminProfile      AdminProfile?
  notificationPref  UserNotificationPref?
  appearancePref    UserAppearancePref?
  securityLogs      SecurityLog[]
  teamMemberships   TeamMember[]
}

// Profiles
model EmployeeProfile {
  userId          String  @id @db.UniqueIdentifier
  user            User    @relation(fields: [userId], references: [id])
  companyCode     String  @db.VarChar(12)
  employeeCode    String  @unique @db.VarChar(30)
  firstName       String  @db.NVarChar(80)
  lastName        String  @db.NVarChar(80)
  nickname        String? @db.NVarChar(60)
  position        String? @db.NVarChar(120)
  profileImageUrl String? @db.NVarChar(255)
  lineToken       String? @db.NVarChar(255)
}

model AdminProfile {
  userId          String  @id @db.UniqueIdentifier
  user            User    @relation(fields: [userId], references: [id])
  firstName       String  @db.NVarChar(80)
  lastName        String  @db.NVarChar(80)
  nickname        String? @db.NVarChar(60)
  position        String? @db.NVarChar(120)
  profileImageUrl String? @db.NVarChar(255)
}

// SECURITY LOG
model SecurityLog {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  user      User     @relation(fields: [userId], references: [id])
  action    String   @db.VarChar(20) // e.g. "LOGIN_SUCCESS", "LOGIN_FAILURE", "LOGOUT", "PASSWORD_RESET"
  ipAddress String   @db.VarChar(45)
  userAgent String   @db.NVarChar(255)
  createdAt DateTime @default(dbgenerated("SYSUTCDATETIME()")) @db.DateTime2

  @@index([userId, createdAt])
}

// USER PREFERENCES
model UserNotificationPref {
  userId          String    @id @db.UniqueIdentifier
  user            User      @relation(fields: [userId], references: [id])
  emailEnabled    Boolean   @default(true)
  pushEnabled     Boolean   @default(true)
  smsEnabled      Boolean   @default(false)
  digestFreq      String    @db.VarChar(10)
  sound           String    @default("Default") @db.NVarChar(50)
  quietHoursStart DateTime? @db.Time
  quietHoursEnd   DateTime? @db.Time
}

model UserAppearancePref {
  userId      String @id @db.UniqueIdentifier
  user        User   @relation(fields: [userId], references: [id])
  theme       String @db.VarChar(10)
  accentColor String @db.NVarChar(20)
  density     String @db.VarChar(12)
}

// SYSTEM SETTINGS & INTEGRATION
model SystemSettings {
  id                 Int      @id
  systemName         String   @db.NVarChar(120)
  defaultLanguage    String   @db.NVarChar(10)
  dateFormat         String   @db.NVarChar(20)
  timeFormat         String   @db.VarChar(8)
  timezone           String   @db.NVarChar(40)
  autoLogoutMinutes  Int
  enableAuditLogging Boolean
  enableAnalytics    Boolean
  updatedAt          DateTime @default(dbgenerated("SYSUTCDATETIME()")) @db.DateTime2
}

model IntegrationSMTP {
  id           Int       @id
  server       String    @db.NVarChar(120)
  port         Int
  username     String    @db.NVarChar(120)
  passwordEnc  String    @db.NVarChar(255)
  useTls       Boolean   @default(true)
  lastTestedAt DateTime? @db.DateTime2
}

model ExternalIntegration {
  id           String         @id @default(uuid()) @db.UniqueIdentifier
  type         String         @db.VarChar(12)
  displayName  String         @db.NVarChar(120)
  active       Boolean        @default(false)
  configJson   String         @db.NVarChar(4000)
  lastSyncedAt DateTime?      @db.DateTime2
  status       String         @db.VarChar(8)
  webhook      WebhookConfig?
}

model WebhookConfig {
  integrationId String              @id @db.UniqueIdentifier
  integration   ExternalIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  url           String              @db.NVarChar(255)
  secret        String              @db.NVarChar(128)
  eventCreated  Boolean             @default(false)
  eventApproved Boolean             @default(false)
  eventUpdated  Boolean             @default(false)
  eventRejected Boolean             @default(false)
}

// Session
model Session {
  id             String    @id @default(uuid())
  userId         String    @db.UniqueIdentifier
  user           User      @relation(fields: [userId], references: [id])
  fingerprint    String?   @db.NVarChar(255)
  userAgent      String?   @db.NVarChar(500)
  status         String    @default("ACTIVE") @db.VarChar(20)
  createdAt      DateTime  @default(now())
  expiresAt      DateTime
  refreshToken   String?   @db.NVarChar(255)
  refreshExpires DateTime? @db.DateTime2

  @@index([userId])
  @@index([expiresAt])
}

// Notification & Approval
model Notification {
  id                 String    @id @default(uuid()) @db.UniqueIdentifier
  title              String    @db.NVarChar(255)
  message            String    @db.NVarChar(2000)
  scheduledAt        DateTime?
  status             String    @default("PENDING") @db.VarChar(20)
  type               String    @db.VarChar(20) // SYSTEM / TODO / REMINDER
  category           String?   @db.NVarChar(80)
  link               String?   @db.NVarChar(255)
  urgencyDays        Int       @default(0)
  repeatIntervalDays Int       @default(0)
  dueDate            DateTime?

  createdBy String   @db.UniqueIdentifier
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @updatedAt @db.DateTime2

  approvals   Approval[]
  recipients  Recipient[]
  attachments NotificationAttachment[]

  @@index([status])
}

model Approval {
  id             String       @id @default(uuid()) @db.UniqueIdentifier
  notificationId String       @db.UniqueIdentifier
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String       @db.UniqueIdentifier
  user           User         @relation(fields: [userId], references: [id])
  response       String       @db.VarChar(20)
  comment        String?      @db.NVarChar(1000)
  createdAt      DateTime     @default(now()) @db.DateTime2

  @@index([notificationId])
  @@index([userId])
}

model Recipient {
  id             String       @id @default(uuid())
  notificationId String       @db.UniqueIdentifier
  notification   Notification @relation(fields: [notificationId], references: [id])
  type           String       @db.VarChar(20) // ALL / USER / GROUP / COMPANY
  userId         String?      @db.UniqueIdentifier
  groupId        String?      @db.UniqueIdentifier // เก็บ teamId
  companyCode    String?      @db.VarChar(12)
}

model NotificationAttachment {
  id             String       @id @default(uuid())
  notificationId String       @db.UniqueIdentifier
  fileName       String       @db.NVarChar(255)
  fileUrl        String       @db.NVarChar(255)
  mimeType       String       @db.NVarChar(100)
  Notification   Notification @relation(fields: [notificationId], references: [id])
}

model Team {
  id        String       @id @default(uuid()) @db.UniqueIdentifier
  name      String       @db.NVarChar(255)
  leaderId  String?      @db.UniqueIdentifier // user.id ของหัวหน้าทีม
  members   TeamMember[]
  createdAt DateTime     @default(now()) @db.DateTime2

  @@index([leaderId])
}

model TeamMember {
  id         String @id @default(uuid()) @db.UniqueIdentifier
  teamId     String @db.UniqueIdentifier
  employeeId String @db.UniqueIdentifier // user.id ของพนักงาน

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [employeeId], references: [id])

  @@index([teamId], map: "TeamMember_teamId_idx")
  @@index([employeeId], map: "TeamMember_userId_idx")
  @@index([employeeId])
}
