// üìÅ frontend/src/axiosConfig.ts
import axios from 'axios'

// ‡πÉ‡∏´‡πâ axios ‡πÉ‡∏ä‡πâ cookie ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞ proxy /api ‚Üí backend
axios.defaults.withCredentials = true
console.log('Axios configured with withCredentials = true')

// ‡∏ï‡∏¥‡∏î interceptor ‡∏î‡∏±‡∏Å 401 ‡πÅ‡∏Ñ‡πà‡∏Å‡∏±‡∏ö ‚Äúdata-fetch‚Äù routes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const config = error.config
    const status = error.response?.status
    const url = config.url || ''

    // ‡∏ñ‡πâ‡∏≤ 401, ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ retry, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà /auth/me ‡∏´‡∏£‡∏∑‡∏≠ /auth/refresh
    if (
      status === 401 &&
      !config._retry &&
      !url.endsWith('/auth/me') &&
      !url.endsWith('/auth/refresh')
    ) {
      config._retry = true
      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token
        await axios.post('/api/auth/refresh', {})
        // retry request ‡πÄ‡∏î‡∏¥‡∏°
        return axios(config)
      } catch {
        // ‡∏ñ‡πâ‡∏≤ refresh ‡∏¢‡∏±‡∏á 401 ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏¢‡∏Å error ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return Promise.reject(error)
      }
    }

    // default: ‡∏¢‡∏Å error ‡∏Å‡∏•‡∏±‡∏ö
    return Promise.reject(error)
  }
)

export default axios
